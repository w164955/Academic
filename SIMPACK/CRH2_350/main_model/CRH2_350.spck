!file.version=2.5! Removing this line will make the file unreadable

!**********************************************************************
! Simpack Version Information
!**********************************************************************
version.number = 201800
version.desc   = ''
version.build  = 51

!**********************************************************************
!  Global parameters
!**********************************************************************
searchpath (              1                                       ) = '../database'
gravity (                 3                                       ) = 9.8100004195999997E+00  ! Gravity
vehicle.startvel                                                    = { 50km/h }              ! Vehicle initial velocity
vehicle.applystartvel                                               = 0                       ! Apply vehicle initial velocity at solver start
glob.compat.flxnodeori                                              = 1                       ! Flexbody Node Orientation Method
glob.compat.afcf                                                    = 2                       ! References Frame for Joint and Force Element Forces and Torques
glob.form.tuning                                                    = 0                       ! Formalism Tuning
time                                                                = 0.0000000000000000E+00  ! Time
slv.active                                                          = $SLV_SolverSettings     ! Active SolverSettings element
track.active                                                        = $Trk_Track              ! Active Track element
glob.ifctn.bounds                                                   = 1                       ! Cubic spline boundary conditions
prop3d.bg.base.color.r                                              = 2.3200000000000000E+02  ! Background color (red component)
prop3d.bg.base.color.g                                              = 2.3200000000000000E+02  ! Background color (green component)
prop3d.bg.base.color.b                                              = 2.3200000000000000E+02  ! Background color (blue component)
prop3d.bg.base.color.t                                              = 0.0000000000000000E+00  ! Background color (transparency component)
prop3d.marker.color.r                                               = 2.5500000000000000E+02  ! Marker color (red component)
prop3d.marker.color.g                                               = 0.0000000000000000E+00  ! Marker color (green component)
prop3d.marker.color.b                                               = 0.0000000000000000E+00  ! Marker color (blue component)
prop3d.marker.color.t                                               = 0.0000000000000000E+00  ! Marker color (transparency component)
prop3d.display                                                      = 1                       ! 1 = shaded,  2 = wireframe, 3 = hidden line
prop2d.proj.dir                                                     = 2                       ! Projection direction


!**********************************************************************
! Input Function Sets
!**********************************************************************
ifctnset.file (                     $N_irregulation               ) = 'AAR5.tre'              ! Filename

!**********************************************************************
! Views
!**********************************************************************
view.type (                         $V_View_1                     ) = 0                       ! Projection type
view.angle (                        $V_View_1                     ) = 3.4708076476999999E+01  ! Lens angle
view.fclip.auto (                   $V_View_1                     ) = 0                       ! Front clipping plane auto
view.bclip.auto (                   $V_View_1                     ) = 0                       ! Back clipping plane auto
view.fclip.value (                  $V_View_1                     ) = 1.0000000149000000E-01  ! Front clipping plane value
view.bclip.value (                  $V_View_1                     ) = 1.0000000000000000E+03  ! Back clipping plane value
view.motion.active (                $V_View_1                     ) = 1                       ! Camera is moved
view.motion.ref (                   $V_View_1                     ) = $M_Bogie2               ! Marker
view.motion.x (                     $V_View_1                     ) = 1                       ! Moved camera direction x
view.motion.y (                     $V_View_1                     ) = 1                       ! Moved camera direction y
view.motion.z (                     $V_View_1                     ) = 1                       ! Moved camera direction z
view.motion.al (                    $V_View_1                     ) = 1                       ! Moved camera direction alpha
view.motion.be (                    $V_View_1                     ) = 1                       ! Moved camera direction beta
view.motion.ga (                    $V_View_1                     ) = 1                       ! Moved camera direction gamma
view.motion.pos (         1 ,       $V_View_1                     ) = -2.2416055678999999E+01 ! Relative position
view.motion.pos (         2 ,       $V_View_1                     ) = 1.6545503616000001E+01  ! Relative position
view.motion.pos (         3 ,       $V_View_1                     ) = -9.4555921554999998E+00 ! Relative position
view.motion.orient (      1 ,       $V_View_1                     ) = 6.9632070702550408E-01  ! Relative orientation
view.motion.orient (      2 ,       $V_View_1                     ) = 3.8004300484074199E-01  ! Relative orientation
view.motion.orient (      3 ,       $V_View_1                     ) = -3.1148537735325577E-01 ! Relative orientation
view.motion.orient (      4 ,       $V_View_1                     ) = -5.2314591380820497E-01 ! Relative orientation

view.type (                         $V_View_2                     ) = 1                       ! Projection type
view.pos (                1 ,       $V_View_2                     ) = 3.7804206848000000E+01  ! Position
view.pos (                2 ,       $V_View_2                     ) = 9.9999999109999991E-38  ! Position
view.pos (                3 ,       $V_View_2                     ) = 9.9999999109999991E-38  ! Position
view.orient (             1 ,       $V_View_2                     ) = 5.0000000000000000E-01  ! Orientation
view.orient (             2 ,       $V_View_2                     ) = 5.0000000000000000E-01  ! Orientation
view.orient (             3 ,       $V_View_2                     ) = 5.0000000000000000E-01  ! Orientation
view.orient (             4 ,       $V_View_2                     ) = 5.0000000000000000E-01  ! Orientation
view.height (                       $V_View_2                     ) = 1.0585181713200000E+00  ! View height
view.fclip.auto (                   $V_View_2                     ) = 0                       ! Front clipping plane auto
view.bclip.auto (                   $V_View_2                     ) = 0                       ! Back clipping plane auto
view.fclip.value (                  $V_View_2                     ) = 1.0000000149000000E-01  ! Front clipping plane value
view.bclip.value (                  $V_View_2                     ) = 1.0000000000000000E+03  ! Back clipping plane value

view.type (                         $V_View_3                     ) = 1                       ! Projection type
view.pos (                1 ,       $V_View_3                     ) = 9.9999999109999991E-38  ! Position
view.pos (                2 ,       $V_View_3                     ) = 1.0000000000000000E+02  ! Position
view.pos (                3 ,       $V_View_3                     ) = 9.9999999109999991E-38  ! Position
view.orient (             1 ,       $V_View_3                     ) = 7.0710677489329706E-38  ! Orientation
view.orient (             2 ,       $V_View_3                     ) = 7.0710678118654757E-01  ! Orientation
view.orient (             3 ,       $V_View_3                     ) = 7.0710678118654746E-01  ! Orientation
view.orient (             4 ,       $V_View_3                     ) = 0.0000000000000000E+00  ! Orientation
view.height (                       $V_View_3                     ) = 2.7999999523999999E+00  ! View height
view.fclip.auto (                   $V_View_3                     ) = 0                       ! Front clipping plane auto
view.bclip.auto (                   $V_View_3                     ) = 0                       ! Back clipping plane auto
view.fclip.value (                  $V_View_3                     ) = 1.0000000149000000E-01  ! Front clipping plane value
view.bclip.value (                  $V_View_3                     ) = 1.0000000000000000E+03  ! Back clipping plane value

view.type (                         $V_View_4                     ) = 1                       ! Projection type
view.pos (                1 ,       $V_View_4                     ) = 9.9999999109999991E-38  ! Position
view.pos (                2 ,       $V_View_4                     ) = 9.9999999109999991E-38  ! Position
view.pos (                3 ,       $V_View_4                     ) = 1.0000000000000000E+02  ! Position
view.orient (             1 ,       $V_View_4                     ) = -4.9999999554999995E-38 ! Orientation
view.orient (             2 ,       $V_View_4                     ) = 4.9999999554999995E-38  ! Orientation
view.orient (             3 ,       $V_View_4                     ) = -4.9999999554999995E-38 ! Orientation
view.orient (             4 ,       $V_View_4                     ) = 1.0000000000000000E+00  ! Orientation
view.height (                       $V_View_4                     ) = 2.7999999523999999E+00  ! View height
view.fclip.auto (                   $V_View_4                     ) = 0                       ! Front clipping plane auto
view.bclip.auto (                   $V_View_4                     ) = 0                       ! Back clipping plane auto
view.fclip.value (                  $V_View_4                     ) = 1.0000000149000000E-01  ! Front clipping plane value
view.bclip.value (                  $V_View_4                     ) = 1.0000000000000000E+03  ! Back clipping plane value

view.type (                         $V_WorkingView                ) = 0                       ! Projection type
view.pos (                1 ,       $V_WorkingView                ) = 9.9481525421142578E+00  ! Position
view.pos (                2 ,       $V_WorkingView                ) = 4.2105655670166016E+01  ! Position
view.pos (                3 ,       $V_WorkingView                ) = -2.0275306701660156E+00 ! Position
view.orient (             1 ,       $V_WorkingView                ) = 7.0710678118654768E-01  ! Orientation
view.orient (             2 ,       $V_WorkingView                ) = -1.8207859323115064E-18 ! Orientation
view.orient (             3 ,       $V_WorkingView                ) = 1.1921356314713231E-17  ! Orientation
view.orient (             4 ,       $V_WorkingView                ) = -7.0710678118654735E-01 ! Orientation
view.angle (                        $V_WorkingView                ) = 2.6179939508438110E-01  ! Lens angle
view.fclip.auto (                   $V_WorkingView                ) = 0                       ! Front clipping plane auto
view.bclip.auto (                   $V_WorkingView                ) = 0                       ! Back clipping plane auto
view.fclip.value (                  $V_WorkingView                ) = 1.0000000149000000E-01  ! Front clipping plane value
view.bclip.value (                  $V_WorkingView                ) = 1.0000000000000000E+03  ! Back clipping plane value
view.rotcenter.type (               $V_WorkingView                ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_WorkingView                ) = 1                       ! Adjust rotation center
view.motion.active (                $V_WorkingView                ) = 1                       ! Camera is moved
view.motion.ref (                   $V_WorkingView                ) = $M_Bogie2               ! Marker
view.motion.x (                     $V_WorkingView                ) = 1                       ! Moved camera direction x
view.motion.y (                     $V_WorkingView                ) = 1                       ! Moved camera direction y
view.motion.z (                     $V_WorkingView                ) = 1                       ! Moved camera direction z
view.motion.al (                    $V_WorkingView                ) = 1                       ! Moved camera direction alpha
view.motion.be (                    $V_WorkingView                ) = 1                       ! Moved camera direction beta
view.motion.ga (                    $V_WorkingView                ) = 1                       ! Moved camera direction gamma
view.motion.pos (         1 ,       $V_WorkingView                ) = 8.6981525421142578E+00  ! Relative position
view.motion.pos (         2 ,       $V_WorkingView                ) = 4.2105655670166016E+01  ! Relative position
view.motion.pos (         3 ,       $V_WorkingView                ) = -2.0275306701660156E+00 ! Relative position
view.motion.orient (      1 ,       $V_WorkingView                ) = 7.0710678118654768E-01  ! Relative orientation
view.motion.orient (      2 ,       $V_WorkingView                ) = -1.8207859323115064E-18 ! Relative orientation
view.motion.orient (      3 ,       $V_WorkingView                ) = 1.1921356314713231E-17  ! Relative orientation
view.motion.orient (      4 ,       $V_WorkingView                ) = -7.0710678118654735E-01 ! Relative orientation
view.stereo.active (                $V_WorkingView                ) = 0                       ! Stereo enabled
view.stereo.balance (               $V_WorkingView                ) = 1.0000000000000000E+00  ! Stereo balance
view.stereo.offset (                $V_WorkingView                ) = 1.0000000000000000E+00  ! Stereo offset

viewgroup.begin (                   $G_RWP_WR1                    )                           ! $G_RWP_WR1
   view.type (                      $V_Exterior                   ) = 0                       ! Projection type
   view.pos (             1 ,       $V_Exterior                   ) = -2.0583140498027205E+01 ! Position
   view.pos (             2 ,       $V_Exterior                   ) = 1.6963162158615887E+01  ! Position
   view.pos (             3 ,       $V_Exterior                   ) = -9.4326083075720817E+00 ! Position
   view.orient (          1 ,       $V_Exterior                   ) = 6.9632070702550408E-01  ! Orientation
   view.orient (          2 ,       $V_Exterior                   ) = 3.8004300484074199E-01  ! Orientation
   view.orient (          3 ,       $V_Exterior                   ) = -3.1148537735325577E-01 ! Orientation
   view.orient (          4 ,       $V_Exterior                   ) = -5.2314591380820497E-01 ! Orientation
   view.angle (                     $V_Exterior                   ) = 6.1086523819801530E-01  ! Lens angle
   view.fclip.auto (                $V_Exterior                   ) = 1                       ! Front clipping plane auto
   view.bclip.auto (                $V_Exterior                   ) = 1                       ! Back clipping plane auto
   view.fclip.value (               $V_Exterior                   ) = 1.0000000149000000E-01  ! Front clipping plane value
   view.bclip.value (               $V_Exterior                   ) = 1.0000000000000000E+03  ! Back clipping plane value
   view.rotcenter.type (            $V_Exterior                   ) = 1                       ! Rotation center type
   view.rotcenter.ele (             $V_Exterior                   ) = $M_B_Isys_ProfRef_RWP_WR1 ! Rotation center element
   view.rotcenter.adjust (          $V_Exterior                   ) = 0                       ! Adjust rotation center
   view.motion.active (             $V_Exterior                   ) = 1                       ! Camera is moved
   view.motion.ref (                $V_Exterior                   ) = $M_Isys_TrackFrame_RWP_WR1 ! Marker
   view.motion.x (                  $V_Exterior                   ) = 1                       ! Moved camera direction x
   view.motion.y (                  $V_Exterior                   ) = 1                       ! Moved camera direction y
   view.motion.z (                  $V_Exterior                   ) = 1                       ! Moved camera direction z
   view.motion.al (                 $V_Exterior                   ) = 1                       ! Moved camera direction alpha
   view.motion.be (                 $V_Exterior                   ) = 1                       ! Moved camera direction beta
   view.motion.ga (                 $V_Exterior                   ) = 1                       ! Moved camera direction gamma
   view.motion.pos (      1 ,       $V_Exterior                   ) = -1.2900000000000000E+00 ! Relative position
   view.motion.pos (      2 ,       $V_Exterior                   ) = 1.8662500000000002E+00  ! Relative position
   view.motion.pos (      3 ,       $V_Exterior                   ) = -4.2999999999999999E-01 ! Relative position
   view.motion.orient (   1 ,       $V_Exterior                   ) = 5.9999999999999998E-01  ! Relative orientation
   view.motion.orient (   2 ,       $V_Exterior                   ) = 3.4999999999999998E-01  ! Relative orientation
   view.motion.orient (   3 ,       $V_Exterior                   ) = -3.4999999999999998E-01 ! Relative orientation
   view.motion.orient (   4 ,       $V_Exterior                   ) = -5.9999999999999998E-01 ! Relative orientation

   view.type (                      $V_Contact                    ) = 1                       ! Projection type
   view.pos (             1 ,       $V_Contact                    ) = -2.0583140498027205E+01 ! Position
   view.pos (             2 ,       $V_Contact                    ) = 1.6963162158615887E+01  ! Position
   view.pos (             3 ,       $V_Contact                    ) = -9.4326083075720817E+00 ! Position
   view.orient (          1 ,       $V_Contact                    ) = 6.9632070702550408E-01  ! Orientation
   view.orient (          2 ,       $V_Contact                    ) = 3.8004300484074199E-01  ! Orientation
   view.orient (          3 ,       $V_Contact                    ) = -3.1148537735325577E-01 ! Orientation
   view.orient (          4 ,       $V_Contact                    ) = -5.2314591380820497E-01 ! Orientation
   view.angle (                     $V_Contact                    ) = 2.6179939508438110E-01  ! Lens angle
   view.height (                    $V_Contact                    ) = 1.0000000000000001E-01  ! View height
   view.fclip.auto (                $V_Contact                    ) = 0                       ! Front clipping plane auto
   view.bclip.auto (                $V_Contact                    ) = 0                       ! Back clipping plane auto
   view.fclip.value (               $V_Contact                    ) = 0.0000000000000000E+00  ! Front clipping plane value
   view.bclip.value (               $V_Contact                    ) = 1.2900000000000000E+00  ! Back clipping plane value
   view.rotcenter.type (            $V_Contact                    ) = 1                       ! Rotation center type
   view.rotcenter.ele (             $V_Contact                    ) = $M_B_Isys_ProfRef_RWP_WR1 ! Rotation center element
   view.rotcenter.adjust (          $V_Contact                    ) = 0                       ! Adjust rotation center
   view.motion.active (             $V_Contact                    ) = 1                       ! Camera is moved
   view.motion.ref (                $V_Contact                    ) = $M_B_wheelset1_ProfRef_RWP_WR1 ! Marker
   view.motion.x (                  $V_Contact                    ) = 1                       ! Moved camera direction x
   view.motion.y (                  $V_Contact                    ) = 1                       ! Moved camera direction y
   view.motion.z (                  $V_Contact                    ) = 1                       ! Moved camera direction z
   view.motion.al (                 $V_Contact                    ) = 1                       ! Moved camera direction alpha
   view.motion.be (                 $V_Contact                    ) = 1                       ! Moved camera direction beta
   view.motion.ga (                 $V_Contact                    ) = 1                       ! Moved camera direction gamma
   view.motion.pos (      1 ,       $V_Contact                    ) = -8.5999999999999999E-01 ! Relative position
   view.motion.pos (      2 ,       $V_Contact                    ) = 0.0000000000000000E+00  ! Relative position
   view.motion.pos (      3 ,       $V_Contact                    ) = 0.0000000000000000E+00  ! Relative position
   view.motion.orient (   1 ,       $V_Contact                    ) = 5.0000000000000000E-01  ! Relative orientation
   view.motion.orient (   2 ,       $V_Contact                    ) = 5.0000000000000000E-01  ! Relative orientation
   view.motion.orient (   3 ,       $V_Contact                    ) = -5.0000000000000000E-01 ! Relative orientation
   view.motion.orient (   4 ,       $V_Contact                    ) = -5.0000000000000000E-01 ! Relative orientation

viewgroup.end (                     $G_RWP_WR1                    )                           ! $G_RWP_WR1

viewgroup.begin (                   $G_RWP_WL1                    )                           ! $G_RWP_WL1
   view.type (                      $V_Exterior                   ) = 0                       ! Projection type
   view.pos (             1 ,       $V_Exterior                   ) = -2.0583140498027205E+01 ! Position
   view.pos (             2 ,       $V_Exterior                   ) = 1.6963162158615887E+01  ! Position
   view.pos (             3 ,       $V_Exterior                   ) = -9.4326083075720817E+00 ! Position
   view.orient (          1 ,       $V_Exterior                   ) = 6.9632070702550408E-01  ! Orientation
   view.orient (          2 ,       $V_Exterior                   ) = 3.8004300484074199E-01  ! Orientation
   view.orient (          3 ,       $V_Exterior                   ) = -3.1148537735325577E-01 ! Orientation
   view.orient (          4 ,       $V_Exterior                   ) = -5.2314591380820497E-01 ! Orientation
   view.angle (                     $V_Exterior                   ) = 6.1086523819801530E-01  ! Lens angle
   view.fclip.auto (                $V_Exterior                   ) = 1                       ! Front clipping plane auto
   view.bclip.auto (                $V_Exterior                   ) = 1                       ! Back clipping plane auto
   view.fclip.value (               $V_Exterior                   ) = 1.0000000149000000E-01  ! Front clipping plane value
   view.bclip.value (               $V_Exterior                   ) = 1.0000000000000000E+03  ! Back clipping plane value
   view.rotcenter.type (            $V_Exterior                   ) = 1                       ! Rotation center type
   view.rotcenter.ele (             $V_Exterior                   ) = $M_B_Isys_ProfRef_RWP_WL1 ! Rotation center element
   view.rotcenter.adjust (          $V_Exterior                   ) = 0                       ! Adjust rotation center
   view.motion.active (             $V_Exterior                   ) = 1                       ! Camera is moved
   view.motion.ref (                $V_Exterior                   ) = $M_Isys_TrackFrame_RWP_WL1 ! Marker
   view.motion.x (                  $V_Exterior                   ) = 1                       ! Moved camera direction x
   view.motion.y (                  $V_Exterior                   ) = 1                       ! Moved camera direction y
   view.motion.z (                  $V_Exterior                   ) = 1                       ! Moved camera direction z
   view.motion.al (                 $V_Exterior                   ) = 1                       ! Moved camera direction alpha
   view.motion.be (                 $V_Exterior                   ) = 1                       ! Moved camera direction beta
   view.motion.ga (                 $V_Exterior                   ) = 1                       ! Moved camera direction gamma
   view.motion.pos (      1 ,       $V_Exterior                   ) = -1.2900000000000000E+00 ! Relative position
   view.motion.pos (      2 ,       $V_Exterior                   ) = -1.8662500000000002E+00 ! Relative position
   view.motion.pos (      3 ,       $V_Exterior                   ) = -4.2999999999999999E-01 ! Relative position
   view.motion.orient (   1 ,       $V_Exterior                   ) = -3.4999999999999998E-01 ! Relative orientation
   view.motion.orient (   2 ,       $V_Exterior                   ) = -5.9999999999999998E-01 ! Relative orientation
   view.motion.orient (   3 ,       $V_Exterior                   ) = 5.9999999999999998E-01  ! Relative orientation
   view.motion.orient (   4 ,       $V_Exterior                   ) = 3.4999999999999998E-01  ! Relative orientation

   view.type (                      $V_Contact                    ) = 1                       ! Projection type
   view.pos (             1 ,       $V_Contact                    ) = -2.0583140498027205E+01 ! Position
   view.pos (             2 ,       $V_Contact                    ) = 1.6963162158615887E+01  ! Position
   view.pos (             3 ,       $V_Contact                    ) = -9.4326083075720817E+00 ! Position
   view.orient (          1 ,       $V_Contact                    ) = 6.9632070702550408E-01  ! Orientation
   view.orient (          2 ,       $V_Contact                    ) = 3.8004300484074199E-01  ! Orientation
   view.orient (          3 ,       $V_Contact                    ) = -3.1148537735325577E-01 ! Orientation
   view.orient (          4 ,       $V_Contact                    ) = -5.2314591380820497E-01 ! Orientation
   view.angle (                     $V_Contact                    ) = 2.6179939508438110E-01  ! Lens angle
   view.height (                    $V_Contact                    ) = 1.0000000000000001E-01  ! View height
   view.fclip.auto (                $V_Contact                    ) = 0                       ! Front clipping plane auto
   view.bclip.auto (                $V_Contact                    ) = 0                       ! Back clipping plane auto
   view.fclip.value (               $V_Contact                    ) = 0.0000000000000000E+00  ! Front clipping plane value
   view.bclip.value (               $V_Contact                    ) = 1.2900000000000000E+00  ! Back clipping plane value
   view.rotcenter.type (            $V_Contact                    ) = 1                       ! Rotation center type
   view.rotcenter.ele (             $V_Contact                    ) = $M_B_Isys_ProfRef_RWP_WL1 ! Rotation center element
   view.rotcenter.adjust (          $V_Contact                    ) = 0                       ! Adjust rotation center
   view.motion.active (             $V_Contact                    ) = 1                       ! Camera is moved
   view.motion.ref (                $V_Contact                    ) = $M_B_wheelset1_ProfRef_RWP_WL1 ! Marker
   view.motion.x (                  $V_Contact                    ) = 1                       ! Moved camera direction x
   view.motion.y (                  $V_Contact                    ) = 1                       ! Moved camera direction y
   view.motion.z (                  $V_Contact                    ) = 1                       ! Moved camera direction z
   view.motion.al (                 $V_Contact                    ) = 1                       ! Moved camera direction alpha
   view.motion.be (                 $V_Contact                    ) = 1                       ! Moved camera direction beta
   view.motion.ga (                 $V_Contact                    ) = 1                       ! Moved camera direction gamma
   view.motion.pos (      1 ,       $V_Contact                    ) = -8.5999999999999999E-01 ! Relative position
   view.motion.pos (      2 ,       $V_Contact                    ) = 0.0000000000000000E+00  ! Relative position
   view.motion.pos (      3 ,       $V_Contact                    ) = 0.0000000000000000E+00  ! Relative position
   view.motion.orient (   1 ,       $V_Contact                    ) = 5.0000000000000000E-01  ! Relative orientation
   view.motion.orient (   2 ,       $V_Contact                    ) = 5.0000000000000000E-01  ! Relative orientation
   view.motion.orient (   3 ,       $V_Contact                    ) = -5.0000000000000000E-01 ! Relative orientation
   view.motion.orient (   4 ,       $V_Contact                    ) = -5.0000000000000000E-01 ! Relative orientation

viewgroup.end (                     $G_RWP_WL1                    )                           ! $G_RWP_WL1

viewgroup.begin (                   $G_RWP_WR2                    )                           ! $G_RWP_WR2
   view.type (                      $V_Exterior                   ) = 0                       ! Projection type
   view.pos (             1 ,       $V_Exterior                   ) = -2.0583140498027205E+01 ! Position
   view.pos (             2 ,       $V_Exterior                   ) = 1.6963162158615887E+01  ! Position
   view.pos (             3 ,       $V_Exterior                   ) = -9.4326083075720817E+00 ! Position
   view.orient (          1 ,       $V_Exterior                   ) = 6.9632070702550408E-01  ! Orientation
   view.orient (          2 ,       $V_Exterior                   ) = 3.8004300484074199E-01  ! Orientation
   view.orient (          3 ,       $V_Exterior                   ) = -3.1148537735325577E-01 ! Orientation
   view.orient (          4 ,       $V_Exterior                   ) = -5.2314591380820497E-01 ! Orientation
   view.angle (                     $V_Exterior                   ) = 6.1086523819801530E-01  ! Lens angle
   view.fclip.auto (                $V_Exterior                   ) = 1                       ! Front clipping plane auto
   view.bclip.auto (                $V_Exterior                   ) = 1                       ! Back clipping plane auto
   view.fclip.value (               $V_Exterior                   ) = 1.0000000149000000E-01  ! Front clipping plane value
   view.bclip.value (               $V_Exterior                   ) = 1.0000000000000000E+03  ! Back clipping plane value
   view.rotcenter.type (            $V_Exterior                   ) = 1                       ! Rotation center type
   view.rotcenter.ele (             $V_Exterior                   ) = $M_B_Isys_ProfRef_RWP_WR2 ! Rotation center element
   view.rotcenter.adjust (          $V_Exterior                   ) = 0                       ! Adjust rotation center
   view.motion.active (             $V_Exterior                   ) = 1                       ! Camera is moved
   view.motion.ref (                $V_Exterior                   ) = $M_Isys_TrackFrame_RWP_WR2 ! Marker
   view.motion.x (                  $V_Exterior                   ) = 1                       ! Moved camera direction x
   view.motion.y (                  $V_Exterior                   ) = 1                       ! Moved camera direction y
   view.motion.z (                  $V_Exterior                   ) = 1                       ! Moved camera direction z
   view.motion.al (                 $V_Exterior                   ) = 1                       ! Moved camera direction alpha
   view.motion.be (                 $V_Exterior                   ) = 1                       ! Moved camera direction beta
   view.motion.ga (                 $V_Exterior                   ) = 1                       ! Moved camera direction gamma
   view.motion.pos (      1 ,       $V_Exterior                   ) = -1.2900000000000000E+00 ! Relative position
   view.motion.pos (      2 ,       $V_Exterior                   ) = 1.8662500000000002E+00  ! Relative position
   view.motion.pos (      3 ,       $V_Exterior                   ) = -4.2999999999999999E-01 ! Relative position
   view.motion.orient (   1 ,       $V_Exterior                   ) = 5.9999999999999998E-01  ! Relative orientation
   view.motion.orient (   2 ,       $V_Exterior                   ) = 3.4999999999999998E-01  ! Relative orientation
   view.motion.orient (   3 ,       $V_Exterior                   ) = -3.4999999999999998E-01 ! Relative orientation
   view.motion.orient (   4 ,       $V_Exterior                   ) = -5.9999999999999998E-01 ! Relative orientation

   view.type (                      $V_Contact                    ) = 1                       ! Projection type
   view.pos (             1 ,       $V_Contact                    ) = -2.0583140498027205E+01 ! Position
   view.pos (             2 ,       $V_Contact                    ) = 1.6963162158615887E+01  ! Position
   view.pos (             3 ,       $V_Contact                    ) = -9.4326083075720817E+00 ! Position
   view.orient (          1 ,       $V_Contact                    ) = 6.9632070702550408E-01  ! Orientation
   view.orient (          2 ,       $V_Contact                    ) = 3.8004300484074199E-01  ! Orientation
   view.orient (          3 ,       $V_Contact                    ) = -3.1148537735325577E-01 ! Orientation
   view.orient (          4 ,       $V_Contact                    ) = -5.2314591380820497E-01 ! Orientation
   view.angle (                     $V_Contact                    ) = 2.6179939508438110E-01  ! Lens angle
   view.height (                    $V_Contact                    ) = 1.0000000000000001E-01  ! View height
   view.fclip.auto (                $V_Contact                    ) = 0                       ! Front clipping plane auto
   view.bclip.auto (                $V_Contact                    ) = 0                       ! Back clipping plane auto
   view.fclip.value (               $V_Contact                    ) = 0.0000000000000000E+00  ! Front clipping plane value
   view.bclip.value (               $V_Contact                    ) = 1.2900000000000000E+00  ! Back clipping plane value
   view.rotcenter.type (            $V_Contact                    ) = 1                       ! Rotation center type
   view.rotcenter.ele (             $V_Contact                    ) = $M_B_Isys_ProfRef_RWP_WR2 ! Rotation center element
   view.rotcenter.adjust (          $V_Contact                    ) = 0                       ! Adjust rotation center
   view.motion.active (             $V_Contact                    ) = 1                       ! Camera is moved
   view.motion.ref (                $V_Contact                    ) = $M_B_wheelset2_ProfRef_RWP_WR2 ! Marker
   view.motion.x (                  $V_Contact                    ) = 1                       ! Moved camera direction x
   view.motion.y (                  $V_Contact                    ) = 1                       ! Moved camera direction y
   view.motion.z (                  $V_Contact                    ) = 1                       ! Moved camera direction z
   view.motion.al (                 $V_Contact                    ) = 1                       ! Moved camera direction alpha
   view.motion.be (                 $V_Contact                    ) = 1                       ! Moved camera direction beta
   view.motion.ga (                 $V_Contact                    ) = 1                       ! Moved camera direction gamma
   view.motion.pos (      1 ,       $V_Contact                    ) = -8.5999999999999999E-01 ! Relative position
   view.motion.pos (      2 ,       $V_Contact                    ) = 0.0000000000000000E+00  ! Relative position
   view.motion.pos (      3 ,       $V_Contact                    ) = 0.0000000000000000E+00  ! Relative position
   view.motion.orient (   1 ,       $V_Contact                    ) = 5.0000000000000000E-01  ! Relative orientation
   view.motion.orient (   2 ,       $V_Contact                    ) = 5.0000000000000000E-01  ! Relative orientation
   view.motion.orient (   3 ,       $V_Contact                    ) = -5.0000000000000000E-01 ! Relative orientation
   view.motion.orient (   4 ,       $V_Contact                    ) = -5.0000000000000000E-01 ! Relative orientation

viewgroup.end (                     $G_RWP_WR2                    )                           ! $G_RWP_WR2

viewgroup.begin (                   $G_RWP_WL2                    )                           ! $G_RWP_WL2
   view.type (                      $V_Exterior                   ) = 0                       ! Projection type
   view.pos (             1 ,       $V_Exterior                   ) = -2.0583140498027205E+01 ! Position
   view.pos (             2 ,       $V_Exterior                   ) = 1.6963162158615887E+01  ! Position
   view.pos (             3 ,       $V_Exterior                   ) = -9.4326083075720817E+00 ! Position
   view.orient (          1 ,       $V_Exterior                   ) = 6.9632070702550408E-01  ! Orientation
   view.orient (          2 ,       $V_Exterior                   ) = 3.8004300484074199E-01  ! Orientation
   view.orient (          3 ,       $V_Exterior                   ) = -3.1148537735325577E-01 ! Orientation
   view.orient (          4 ,       $V_Exterior                   ) = -5.2314591380820497E-01 ! Orientation
   view.angle (                     $V_Exterior                   ) = 6.1086523819801530E-01  ! Lens angle
   view.fclip.auto (                $V_Exterior                   ) = 1                       ! Front clipping plane auto
   view.bclip.auto (                $V_Exterior                   ) = 1                       ! Back clipping plane auto
   view.fclip.value (               $V_Exterior                   ) = 1.0000000149000000E-01  ! Front clipping plane value
   view.bclip.value (               $V_Exterior                   ) = 1.0000000000000000E+03  ! Back clipping plane value
   view.rotcenter.type (            $V_Exterior                   ) = 1                       ! Rotation center type
   view.rotcenter.ele (             $V_Exterior                   ) = $M_B_Isys_ProfRef_RWP_WL2 ! Rotation center element
   view.rotcenter.adjust (          $V_Exterior                   ) = 0                       ! Adjust rotation center
   view.motion.active (             $V_Exterior                   ) = 1                       ! Camera is moved
   view.motion.ref (                $V_Exterior                   ) = $M_Isys_TrackFrame_RWP_WL2 ! Marker
   view.motion.x (                  $V_Exterior                   ) = 1                       ! Moved camera direction x
   view.motion.y (                  $V_Exterior                   ) = 1                       ! Moved camera direction y
   view.motion.z (                  $V_Exterior                   ) = 1                       ! Moved camera direction z
   view.motion.al (                 $V_Exterior                   ) = 1                       ! Moved camera direction alpha
   view.motion.be (                 $V_Exterior                   ) = 1                       ! Moved camera direction beta
   view.motion.ga (                 $V_Exterior                   ) = 1                       ! Moved camera direction gamma
   view.motion.pos (      1 ,       $V_Exterior                   ) = -1.2900000000000000E+00 ! Relative position
   view.motion.pos (      2 ,       $V_Exterior                   ) = -1.8662500000000002E+00 ! Relative position
   view.motion.pos (      3 ,       $V_Exterior                   ) = -4.2999999999999999E-01 ! Relative position
   view.motion.orient (   1 ,       $V_Exterior                   ) = -3.4999999999999998E-01 ! Relative orientation
   view.motion.orient (   2 ,       $V_Exterior                   ) = -5.9999999999999998E-01 ! Relative orientation
   view.motion.orient (   3 ,       $V_Exterior                   ) = 5.9999999999999998E-01  ! Relative orientation
   view.motion.orient (   4 ,       $V_Exterior                   ) = 3.4999999999999998E-01  ! Relative orientation

   view.type (                      $V_Contact                    ) = 1                       ! Projection type
   view.pos (             1 ,       $V_Contact                    ) = -2.0583140498027205E+01 ! Position
   view.pos (             2 ,       $V_Contact                    ) = 1.6963162158615887E+01  ! Position
   view.pos (             3 ,       $V_Contact                    ) = -9.4326083075720817E+00 ! Position
   view.orient (          1 ,       $V_Contact                    ) = 6.9632070702550408E-01  ! Orientation
   view.orient (          2 ,       $V_Contact                    ) = 3.8004300484074199E-01  ! Orientation
   view.orient (          3 ,       $V_Contact                    ) = -3.1148537735325577E-01 ! Orientation
   view.orient (          4 ,       $V_Contact                    ) = -5.2314591380820497E-01 ! Orientation
   view.angle (                     $V_Contact                    ) = 2.6179939508438110E-01  ! Lens angle
   view.height (                    $V_Contact                    ) = 1.0000000000000001E-01  ! View height
   view.fclip.auto (                $V_Contact                    ) = 0                       ! Front clipping plane auto
   view.bclip.auto (                $V_Contact                    ) = 0                       ! Back clipping plane auto
   view.fclip.value (               $V_Contact                    ) = 0.0000000000000000E+00  ! Front clipping plane value
   view.bclip.value (               $V_Contact                    ) = 1.2900000000000000E+00  ! Back clipping plane value
   view.rotcenter.type (            $V_Contact                    ) = 1                       ! Rotation center type
   view.rotcenter.ele (             $V_Contact                    ) = $M_B_Isys_ProfRef_RWP_WL2 ! Rotation center element
   view.rotcenter.adjust (          $V_Contact                    ) = 0                       ! Adjust rotation center
   view.motion.active (             $V_Contact                    ) = 1                       ! Camera is moved
   view.motion.ref (                $V_Contact                    ) = $M_B_wheelset2_ProfRef_RWP_WL2 ! Marker
   view.motion.x (                  $V_Contact                    ) = 1                       ! Moved camera direction x
   view.motion.y (                  $V_Contact                    ) = 1                       ! Moved camera direction y
   view.motion.z (                  $V_Contact                    ) = 1                       ! Moved camera direction z
   view.motion.al (                 $V_Contact                    ) = 1                       ! Moved camera direction alpha
   view.motion.be (                 $V_Contact                    ) = 1                       ! Moved camera direction beta
   view.motion.ga (                 $V_Contact                    ) = 1                       ! Moved camera direction gamma
   view.motion.pos (      1 ,       $V_Contact                    ) = -8.5999999999999999E-01 ! Relative position
   view.motion.pos (      2 ,       $V_Contact                    ) = 0.0000000000000000E+00  ! Relative position
   view.motion.pos (      3 ,       $V_Contact                    ) = 0.0000000000000000E+00  ! Relative position
   view.motion.orient (   1 ,       $V_Contact                    ) = 5.0000000000000000E-01  ! Relative orientation
   view.motion.orient (   2 ,       $V_Contact                    ) = 5.0000000000000000E-01  ! Relative orientation
   view.motion.orient (   3 ,       $V_Contact                    ) = -5.0000000000000000E-01 ! Relative orientation
   view.motion.orient (   4 ,       $V_Contact                    ) = -5.0000000000000000E-01 ! Relative orientation

viewgroup.end (                     $G_RWP_WL2                    )                           ! $G_RWP_WL2

viewgroup.begin (                   $G_RWP_WR3                    )                           ! $G_RWP_WR3
   view.type (                      $V_Exterior                   ) = 0                       ! Projection type
   view.pos (             1 ,       $V_Exterior                   ) = -2.0583140498027205E+01 ! Position
   view.pos (             2 ,       $V_Exterior                   ) = 1.6963162158615887E+01  ! Position
   view.pos (             3 ,       $V_Exterior                   ) = -9.4326083075720817E+00 ! Position
   view.orient (          1 ,       $V_Exterior                   ) = 6.9632070702550408E-01  ! Orientation
   view.orient (          2 ,       $V_Exterior                   ) = 3.8004300484074199E-01  ! Orientation
   view.orient (          3 ,       $V_Exterior                   ) = -3.1148537735325577E-01 ! Orientation
   view.orient (          4 ,       $V_Exterior                   ) = -5.2314591380820497E-01 ! Orientation
   view.angle (                     $V_Exterior                   ) = 6.1086523819801530E-01  ! Lens angle
   view.fclip.auto (                $V_Exterior                   ) = 1                       ! Front clipping plane auto
   view.bclip.auto (                $V_Exterior                   ) = 1                       ! Back clipping plane auto
   view.fclip.value (               $V_Exterior                   ) = 1.0000000149000000E-01  ! Front clipping plane value
   view.bclip.value (               $V_Exterior                   ) = 1.0000000000000000E+03  ! Back clipping plane value
   view.rotcenter.type (            $V_Exterior                   ) = 1                       ! Rotation center type
   view.rotcenter.ele (             $V_Exterior                   ) = $M_B_Isys_ProfRef_RWP_WR3 ! Rotation center element
   view.rotcenter.adjust (          $V_Exterior                   ) = 0                       ! Adjust rotation center
   view.motion.active (             $V_Exterior                   ) = 1                       ! Camera is moved
   view.motion.ref (                $V_Exterior                   ) = $M_Isys_TrackFrame_RWP_WR3 ! Marker
   view.motion.x (                  $V_Exterior                   ) = 1                       ! Moved camera direction x
   view.motion.y (                  $V_Exterior                   ) = 1                       ! Moved camera direction y
   view.motion.z (                  $V_Exterior                   ) = 1                       ! Moved camera direction z
   view.motion.al (                 $V_Exterior                   ) = 1                       ! Moved camera direction alpha
   view.motion.be (                 $V_Exterior                   ) = 1                       ! Moved camera direction beta
   view.motion.ga (                 $V_Exterior                   ) = 1                       ! Moved camera direction gamma
   view.motion.pos (      1 ,       $V_Exterior                   ) = -1.2900000000000000E+00 ! Relative position
   view.motion.pos (      2 ,       $V_Exterior                   ) = 1.8662500000000002E+00  ! Relative position
   view.motion.pos (      3 ,       $V_Exterior                   ) = -4.2999999999999999E-01 ! Relative position
   view.motion.orient (   1 ,       $V_Exterior                   ) = 5.9999999999999998E-01  ! Relative orientation
   view.motion.orient (   2 ,       $V_Exterior                   ) = 3.4999999999999998E-01  ! Relative orientation
   view.motion.orient (   3 ,       $V_Exterior                   ) = -3.4999999999999998E-01 ! Relative orientation
   view.motion.orient (   4 ,       $V_Exterior                   ) = -5.9999999999999998E-01 ! Relative orientation

   view.type (                      $V_Contact                    ) = 1                       ! Projection type
   view.pos (             1 ,       $V_Contact                    ) = -2.0583140498027205E+01 ! Position
   view.pos (             2 ,       $V_Contact                    ) = 1.6963162158615887E+01  ! Position
   view.pos (             3 ,       $V_Contact                    ) = -9.4326083075720817E+00 ! Position
   view.orient (          1 ,       $V_Contact                    ) = 6.9632070702550408E-01  ! Orientation
   view.orient (          2 ,       $V_Contact                    ) = 3.8004300484074199E-01  ! Orientation
   view.orient (          3 ,       $V_Contact                    ) = -3.1148537735325577E-01 ! Orientation
   view.orient (          4 ,       $V_Contact                    ) = -5.2314591380820497E-01 ! Orientation
   view.angle (                     $V_Contact                    ) = 2.6179939508438110E-01  ! Lens angle
   view.height (                    $V_Contact                    ) = 1.0000000000000001E-01  ! View height
   view.fclip.auto (                $V_Contact                    ) = 0                       ! Front clipping plane auto
   view.bclip.auto (                $V_Contact                    ) = 0                       ! Back clipping plane auto
   view.fclip.value (               $V_Contact                    ) = 0.0000000000000000E+00  ! Front clipping plane value
   view.bclip.value (               $V_Contact                    ) = 1.2900000000000000E+00  ! Back clipping plane value
   view.rotcenter.type (            $V_Contact                    ) = 1                       ! Rotation center type
   view.rotcenter.ele (             $V_Contact                    ) = $M_B_Isys_ProfRef_RWP_WR3 ! Rotation center element
   view.rotcenter.adjust (          $V_Contact                    ) = 0                       ! Adjust rotation center
   view.motion.active (             $V_Contact                    ) = 1                       ! Camera is moved
   view.motion.ref (                $V_Contact                    ) = $M_B_wheelset3_ProfRef_RWP_WR3 ! Marker
   view.motion.x (                  $V_Contact                    ) = 1                       ! Moved camera direction x
   view.motion.y (                  $V_Contact                    ) = 1                       ! Moved camera direction y
   view.motion.z (                  $V_Contact                    ) = 1                       ! Moved camera direction z
   view.motion.al (                 $V_Contact                    ) = 1                       ! Moved camera direction alpha
   view.motion.be (                 $V_Contact                    ) = 1                       ! Moved camera direction beta
   view.motion.ga (                 $V_Contact                    ) = 1                       ! Moved camera direction gamma
   view.motion.pos (      1 ,       $V_Contact                    ) = -8.5999999999999999E-01 ! Relative position
   view.motion.pos (      2 ,       $V_Contact                    ) = 0.0000000000000000E+00  ! Relative position
   view.motion.pos (      3 ,       $V_Contact                    ) = 0.0000000000000000E+00  ! Relative position
   view.motion.orient (   1 ,       $V_Contact                    ) = 5.0000000000000000E-01  ! Relative orientation
   view.motion.orient (   2 ,       $V_Contact                    ) = 5.0000000000000000E-01  ! Relative orientation
   view.motion.orient (   3 ,       $V_Contact                    ) = -5.0000000000000000E-01 ! Relative orientation
   view.motion.orient (   4 ,       $V_Contact                    ) = -5.0000000000000000E-01 ! Relative orientation

viewgroup.end (                     $G_RWP_WR3                    )                           ! $G_RWP_WR3

viewgroup.begin (                   $G_RWP_WL3                    )                           ! $G_RWP_WL3
   view.type (                      $V_Exterior                   ) = 0                       ! Projection type
   view.pos (             1 ,       $V_Exterior                   ) = -2.0583140498027205E+01 ! Position
   view.pos (             2 ,       $V_Exterior                   ) = 1.6963162158615887E+01  ! Position
   view.pos (             3 ,       $V_Exterior                   ) = -9.4326083075720817E+00 ! Position
   view.orient (          1 ,       $V_Exterior                   ) = 6.9632070702550408E-01  ! Orientation
   view.orient (          2 ,       $V_Exterior                   ) = 3.8004300484074199E-01  ! Orientation
   view.orient (          3 ,       $V_Exterior                   ) = -3.1148537735325577E-01 ! Orientation
   view.orient (          4 ,       $V_Exterior                   ) = -5.2314591380820497E-01 ! Orientation
   view.angle (                     $V_Exterior                   ) = 6.1086523819801530E-01  ! Lens angle
   view.fclip.auto (                $V_Exterior                   ) = 1                       ! Front clipping plane auto
   view.bclip.auto (                $V_Exterior                   ) = 1                       ! Back clipping plane auto
   view.fclip.value (               $V_Exterior                   ) = 1.0000000149000000E-01  ! Front clipping plane value
   view.bclip.value (               $V_Exterior                   ) = 1.0000000000000000E+03  ! Back clipping plane value
   view.rotcenter.type (            $V_Exterior                   ) = 1                       ! Rotation center type
   view.rotcenter.ele (             $V_Exterior                   ) = $M_B_Isys_ProfRef_RWP_WL3 ! Rotation center element
   view.rotcenter.adjust (          $V_Exterior                   ) = 0                       ! Adjust rotation center
   view.motion.active (             $V_Exterior                   ) = 1                       ! Camera is moved
   view.motion.ref (                $V_Exterior                   ) = $M_Isys_TrackFrame_RWP_WL3 ! Marker
   view.motion.x (                  $V_Exterior                   ) = 1                       ! Moved camera direction x
   view.motion.y (                  $V_Exterior                   ) = 1                       ! Moved camera direction y
   view.motion.z (                  $V_Exterior                   ) = 1                       ! Moved camera direction z
   view.motion.al (                 $V_Exterior                   ) = 1                       ! Moved camera direction alpha
   view.motion.be (                 $V_Exterior                   ) = 1                       ! Moved camera direction beta
   view.motion.ga (                 $V_Exterior                   ) = 1                       ! Moved camera direction gamma
   view.motion.pos (      1 ,       $V_Exterior                   ) = -1.2900000000000000E+00 ! Relative position
   view.motion.pos (      2 ,       $V_Exterior                   ) = -1.8662500000000002E+00 ! Relative position
   view.motion.pos (      3 ,       $V_Exterior                   ) = -4.2999999999999999E-01 ! Relative position
   view.motion.orient (   1 ,       $V_Exterior                   ) = -3.4999999999999998E-01 ! Relative orientation
   view.motion.orient (   2 ,       $V_Exterior                   ) = -5.9999999999999998E-01 ! Relative orientation
   view.motion.orient (   3 ,       $V_Exterior                   ) = 5.9999999999999998E-01  ! Relative orientation
   view.motion.orient (   4 ,       $V_Exterior                   ) = 3.4999999999999998E-01  ! Relative orientation

   view.type (                      $V_Contact                    ) = 1                       ! Projection type
   view.pos (             1 ,       $V_Contact                    ) = -2.0583140498027205E+01 ! Position
   view.pos (             2 ,       $V_Contact                    ) = 1.6963162158615887E+01  ! Position
   view.pos (             3 ,       $V_Contact                    ) = -9.4326083075720817E+00 ! Position
   view.orient (          1 ,       $V_Contact                    ) = 6.9632070702550408E-01  ! Orientation
   view.orient (          2 ,       $V_Contact                    ) = 3.8004300484074199E-01  ! Orientation
   view.orient (          3 ,       $V_Contact                    ) = -3.1148537735325577E-01 ! Orientation
   view.orient (          4 ,       $V_Contact                    ) = -5.2314591380820497E-01 ! Orientation
   view.angle (                     $V_Contact                    ) = 2.6179939508438110E-01  ! Lens angle
   view.height (                    $V_Contact                    ) = 1.0000000000000001E-01  ! View height
   view.fclip.auto (                $V_Contact                    ) = 0                       ! Front clipping plane auto
   view.bclip.auto (                $V_Contact                    ) = 0                       ! Back clipping plane auto
   view.fclip.value (               $V_Contact                    ) = 0.0000000000000000E+00  ! Front clipping plane value
   view.bclip.value (               $V_Contact                    ) = 1.2900000000000000E+00  ! Back clipping plane value
   view.rotcenter.type (            $V_Contact                    ) = 1                       ! Rotation center type
   view.rotcenter.ele (             $V_Contact                    ) = $M_B_Isys_ProfRef_RWP_WL3 ! Rotation center element
   view.rotcenter.adjust (          $V_Contact                    ) = 0                       ! Adjust rotation center
   view.motion.active (             $V_Contact                    ) = 1                       ! Camera is moved
   view.motion.ref (                $V_Contact                    ) = $M_B_wheelset3_ProfRef_RWP_WL3 ! Marker
   view.motion.x (                  $V_Contact                    ) = 1                       ! Moved camera direction x
   view.motion.y (                  $V_Contact                    ) = 1                       ! Moved camera direction y
   view.motion.z (                  $V_Contact                    ) = 1                       ! Moved camera direction z
   view.motion.al (                 $V_Contact                    ) = 1                       ! Moved camera direction alpha
   view.motion.be (                 $V_Contact                    ) = 1                       ! Moved camera direction beta
   view.motion.ga (                 $V_Contact                    ) = 1                       ! Moved camera direction gamma
   view.motion.pos (      1 ,       $V_Contact                    ) = -8.5999999999999999E-01 ! Relative position
   view.motion.pos (      2 ,       $V_Contact                    ) = 0.0000000000000000E+00  ! Relative position
   view.motion.pos (      3 ,       $V_Contact                    ) = 0.0000000000000000E+00  ! Relative position
   view.motion.orient (   1 ,       $V_Contact                    ) = 5.0000000000000000E-01  ! Relative orientation
   view.motion.orient (   2 ,       $V_Contact                    ) = 5.0000000000000000E-01  ! Relative orientation
   view.motion.orient (   3 ,       $V_Contact                    ) = -5.0000000000000000E-01 ! Relative orientation
   view.motion.orient (   4 ,       $V_Contact                    ) = -5.0000000000000000E-01 ! Relative orientation

viewgroup.end (                     $G_RWP_WL3                    )                           ! $G_RWP_WL3

viewgroup.begin (                   $G_RWP_WR3_Copy_1             )                           ! $G_RWP_WR3_Copy_1
   view.type (                      $V_Exterior                   ) = 0                       ! Projection type
   view.pos (             1 ,       $V_Exterior                   ) = -2.0583140498027205E+01 ! Position
   view.pos (             2 ,       $V_Exterior                   ) = 1.6963162158615887E+01  ! Position
   view.pos (             3 ,       $V_Exterior                   ) = -9.4326083075720817E+00 ! Position
   view.orient (          1 ,       $V_Exterior                   ) = 6.9632070702550408E-01  ! Orientation
   view.orient (          2 ,       $V_Exterior                   ) = 3.8004300484074199E-01  ! Orientation
   view.orient (          3 ,       $V_Exterior                   ) = -3.1148537735325577E-01 ! Orientation
   view.orient (          4 ,       $V_Exterior                   ) = -5.2314591380820497E-01 ! Orientation
   view.angle (                     $V_Exterior                   ) = 6.1086523819801530E-01  ! Lens angle
   view.fclip.auto (                $V_Exterior                   ) = 1                       ! Front clipping plane auto
   view.bclip.auto (                $V_Exterior                   ) = 1                       ! Back clipping plane auto
   view.fclip.value (               $V_Exterior                   ) = 1.0000000149000000E-01  ! Front clipping plane value
   view.bclip.value (               $V_Exterior                   ) = 1.0000000000000000E+03  ! Back clipping plane value
   view.rotcenter.type (            $V_Exterior                   ) = 1                       ! Rotation center type
   view.rotcenter.ele (             $V_Exterior                   ) = $M_B_Isys_ProfRef_RWP_WR3_Copy_1 ! Rotation center element
   view.rotcenter.adjust (          $V_Exterior                   ) = 0                       ! Adjust rotation center
   view.motion.active (             $V_Exterior                   ) = 1                       ! Camera is moved
   view.motion.ref (                $V_Exterior                   ) = $M_Isys_TrackFrame_RWP_WR3_Copy_1 ! Marker
   view.motion.x (                  $V_Exterior                   ) = 1                       ! Moved camera direction x
   view.motion.y (                  $V_Exterior                   ) = 1                       ! Moved camera direction y
   view.motion.z (                  $V_Exterior                   ) = 1                       ! Moved camera direction z
   view.motion.al (                 $V_Exterior                   ) = 1                       ! Moved camera direction alpha
   view.motion.be (                 $V_Exterior                   ) = 1                       ! Moved camera direction beta
   view.motion.ga (                 $V_Exterior                   ) = 1                       ! Moved camera direction gamma
   view.motion.pos (      1 ,       $V_Exterior                   ) = -1.2900000000000000E+00 ! Relative position
   view.motion.pos (      2 ,       $V_Exterior                   ) = 1.8662500000000002E+00  ! Relative position
   view.motion.pos (      3 ,       $V_Exterior                   ) = -4.2999999999999999E-01 ! Relative position
   view.motion.orient (   1 ,       $V_Exterior                   ) = 5.9999999999999998E-01  ! Relative orientation
   view.motion.orient (   2 ,       $V_Exterior                   ) = 3.4999999999999998E-01  ! Relative orientation
   view.motion.orient (   3 ,       $V_Exterior                   ) = -3.4999999999999998E-01 ! Relative orientation
   view.motion.orient (   4 ,       $V_Exterior                   ) = -5.9999999999999998E-01 ! Relative orientation

   view.type (                      $V_Contact                    ) = 1                       ! Projection type
   view.pos (             1 ,       $V_Contact                    ) = -2.0583140498027205E+01 ! Position
   view.pos (             2 ,       $V_Contact                    ) = 1.6963162158615887E+01  ! Position
   view.pos (             3 ,       $V_Contact                    ) = -9.4326083075720817E+00 ! Position
   view.orient (          1 ,       $V_Contact                    ) = 6.9632070702550408E-01  ! Orientation
   view.orient (          2 ,       $V_Contact                    ) = 3.8004300484074199E-01  ! Orientation
   view.orient (          3 ,       $V_Contact                    ) = -3.1148537735325577E-01 ! Orientation
   view.orient (          4 ,       $V_Contact                    ) = -5.2314591380820497E-01 ! Orientation
   view.angle (                     $V_Contact                    ) = 2.6179939508438110E-01  ! Lens angle
   view.height (                    $V_Contact                    ) = 1.0000000000000001E-01  ! View height
   view.fclip.auto (                $V_Contact                    ) = 0                       ! Front clipping plane auto
   view.bclip.auto (                $V_Contact                    ) = 0                       ! Back clipping plane auto
   view.fclip.value (               $V_Contact                    ) = 0.0000000000000000E+00  ! Front clipping plane value
   view.bclip.value (               $V_Contact                    ) = 1.2900000000000000E+00  ! Back clipping plane value
   view.rotcenter.type (            $V_Contact                    ) = 1                       ! Rotation center type
   view.rotcenter.ele (             $V_Contact                    ) = $M_B_Isys_ProfRef_RWP_WR3_Copy_1 ! Rotation center element
   view.rotcenter.adjust (          $V_Contact                    ) = 0                       ! Adjust rotation center
   view.motion.active (             $V_Contact                    ) = 1                       ! Camera is moved
   view.motion.ref (                $V_Contact                    ) = $M_B_wheelset4_ProfRef_RWP_WR3_Copy_1 ! Marker
   view.motion.x (                  $V_Contact                    ) = 1                       ! Moved camera direction x
   view.motion.y (                  $V_Contact                    ) = 1                       ! Moved camera direction y
   view.motion.z (                  $V_Contact                    ) = 1                       ! Moved camera direction z
   view.motion.al (                 $V_Contact                    ) = 1                       ! Moved camera direction alpha
   view.motion.be (                 $V_Contact                    ) = 1                       ! Moved camera direction beta
   view.motion.ga (                 $V_Contact                    ) = 1                       ! Moved camera direction gamma
   view.motion.pos (      1 ,       $V_Contact                    ) = -8.5999999999999999E-01 ! Relative position
   view.motion.pos (      2 ,       $V_Contact                    ) = 0.0000000000000000E+00  ! Relative position
   view.motion.pos (      3 ,       $V_Contact                    ) = 0.0000000000000000E+00  ! Relative position
   view.motion.orient (   1 ,       $V_Contact                    ) = 5.0000000000000000E-01  ! Relative orientation
   view.motion.orient (   2 ,       $V_Contact                    ) = 5.0000000000000000E-01  ! Relative orientation
   view.motion.orient (   3 ,       $V_Contact                    ) = -5.0000000000000000E-01 ! Relative orientation
   view.motion.orient (   4 ,       $V_Contact                    ) = -5.0000000000000000E-01 ! Relative orientation

viewgroup.end (                     $G_RWP_WR3_Copy_1             )                           ! $G_RWP_WR3_Copy_1

viewgroup.begin (                   $G_RWP_WL4                    )                           ! $G_RWP_WL4
   view.type (                      $V_Exterior                   ) = 0                       ! Projection type
   view.pos (             1 ,       $V_Exterior                   ) = -2.0583140498027205E+01 ! Position
   view.pos (             2 ,       $V_Exterior                   ) = 1.6963162158615887E+01  ! Position
   view.pos (             3 ,       $V_Exterior                   ) = -9.4326083075720817E+00 ! Position
   view.orient (          1 ,       $V_Exterior                   ) = 6.9632070702550408E-01  ! Orientation
   view.orient (          2 ,       $V_Exterior                   ) = 3.8004300484074199E-01  ! Orientation
   view.orient (          3 ,       $V_Exterior                   ) = -3.1148537735325577E-01 ! Orientation
   view.orient (          4 ,       $V_Exterior                   ) = -5.2314591380820497E-01 ! Orientation
   view.angle (                     $V_Exterior                   ) = 6.1086523819801530E-01  ! Lens angle
   view.fclip.auto (                $V_Exterior                   ) = 1                       ! Front clipping plane auto
   view.bclip.auto (                $V_Exterior                   ) = 1                       ! Back clipping plane auto
   view.fclip.value (               $V_Exterior                   ) = 1.0000000149000000E-01  ! Front clipping plane value
   view.bclip.value (               $V_Exterior                   ) = 1.0000000000000000E+03  ! Back clipping plane value
   view.rotcenter.type (            $V_Exterior                   ) = 1                       ! Rotation center type
   view.rotcenter.ele (             $V_Exterior                   ) = $M_B_Isys_ProfRef_RWP_WL4 ! Rotation center element
   view.rotcenter.adjust (          $V_Exterior                   ) = 0                       ! Adjust rotation center
   view.motion.active (             $V_Exterior                   ) = 1                       ! Camera is moved
   view.motion.ref (                $V_Exterior                   ) = $M_Isys_TrackFrame_RWP_WL4 ! Marker
   view.motion.x (                  $V_Exterior                   ) = 1                       ! Moved camera direction x
   view.motion.y (                  $V_Exterior                   ) = 1                       ! Moved camera direction y
   view.motion.z (                  $V_Exterior                   ) = 1                       ! Moved camera direction z
   view.motion.al (                 $V_Exterior                   ) = 1                       ! Moved camera direction alpha
   view.motion.be (                 $V_Exterior                   ) = 1                       ! Moved camera direction beta
   view.motion.ga (                 $V_Exterior                   ) = 1                       ! Moved camera direction gamma
   view.motion.pos (      1 ,       $V_Exterior                   ) = -1.2900000000000000E+00 ! Relative position
   view.motion.pos (      2 ,       $V_Exterior                   ) = -1.8662500000000002E+00 ! Relative position
   view.motion.pos (      3 ,       $V_Exterior                   ) = -4.2999999999999999E-01 ! Relative position
   view.motion.orient (   1 ,       $V_Exterior                   ) = -3.4999999999999998E-01 ! Relative orientation
   view.motion.orient (   2 ,       $V_Exterior                   ) = -5.9999999999999998E-01 ! Relative orientation
   view.motion.orient (   3 ,       $V_Exterior                   ) = 5.9999999999999998E-01  ! Relative orientation
   view.motion.orient (   4 ,       $V_Exterior                   ) = 3.4999999999999998E-01  ! Relative orientation

   view.type (                      $V_Contact                    ) = 1                       ! Projection type
   view.pos (             1 ,       $V_Contact                    ) = -2.0583140498027205E+01 ! Position
   view.pos (             2 ,       $V_Contact                    ) = 1.6963162158615887E+01  ! Position
   view.pos (             3 ,       $V_Contact                    ) = -9.4326083075720817E+00 ! Position
   view.orient (          1 ,       $V_Contact                    ) = 6.9632070702550408E-01  ! Orientation
   view.orient (          2 ,       $V_Contact                    ) = 3.8004300484074199E-01  ! Orientation
   view.orient (          3 ,       $V_Contact                    ) = -3.1148537735325577E-01 ! Orientation
   view.orient (          4 ,       $V_Contact                    ) = -5.2314591380820497E-01 ! Orientation
   view.angle (                     $V_Contact                    ) = 2.6179939508438110E-01  ! Lens angle
   view.height (                    $V_Contact                    ) = 1.0000000000000001E-01  ! View height
   view.fclip.auto (                $V_Contact                    ) = 0                       ! Front clipping plane auto
   view.bclip.auto (                $V_Contact                    ) = 0                       ! Back clipping plane auto
   view.fclip.value (               $V_Contact                    ) = 0.0000000000000000E+00  ! Front clipping plane value
   view.bclip.value (               $V_Contact                    ) = 1.2900000000000000E+00  ! Back clipping plane value
   view.rotcenter.type (            $V_Contact                    ) = 1                       ! Rotation center type
   view.rotcenter.ele (             $V_Contact                    ) = $M_B_Isys_ProfRef_RWP_WL4 ! Rotation center element
   view.rotcenter.adjust (          $V_Contact                    ) = 0                       ! Adjust rotation center
   view.motion.active (             $V_Contact                    ) = 1                       ! Camera is moved
   view.motion.ref (                $V_Contact                    ) = $M_B_wheelset4_ProfRef_RWP_WL4 ! Marker
   view.motion.x (                  $V_Contact                    ) = 1                       ! Moved camera direction x
   view.motion.y (                  $V_Contact                    ) = 1                       ! Moved camera direction y
   view.motion.z (                  $V_Contact                    ) = 1                       ! Moved camera direction z
   view.motion.al (                 $V_Contact                    ) = 1                       ! Moved camera direction alpha
   view.motion.be (                 $V_Contact                    ) = 1                       ! Moved camera direction beta
   view.motion.ga (                 $V_Contact                    ) = 1                       ! Moved camera direction gamma
   view.motion.pos (      1 ,       $V_Contact                    ) = -8.5999999999999999E-01 ! Relative position
   view.motion.pos (      2 ,       $V_Contact                    ) = 0.0000000000000000E+00  ! Relative position
   view.motion.pos (      3 ,       $V_Contact                    ) = 0.0000000000000000E+00  ! Relative position
   view.motion.orient (   1 ,       $V_Contact                    ) = 5.0000000000000000E-01  ! Relative orientation
   view.motion.orient (   2 ,       $V_Contact                    ) = 5.0000000000000000E-01  ! Relative orientation
   view.motion.orient (   3 ,       $V_Contact                    ) = -5.0000000000000000E-01 ! Relative orientation
   view.motion.orient (   4 ,       $V_Contact                    ) = -5.0000000000000000E-01 ! Relative orientation

viewgroup.end (                     $G_RWP_WL4                    )                           ! $G_RWP_WL4

!**********************************************************************
! State Sets
!**********************************************************************
stateset.begin (                    $STS_linearization_state )
   stset.force.st.dyn (   1 ,       $F_PS_Damping_4l              ) = 0.0000000000000000E+00  ! Force dynamic states
   stset.force.st.dyn (   1 ,       $F_PS_Damping_4r              ) = 0.0000000000000000E+00  ! Force dynamic states
   stset.force.st.dyn (   1 ,       $F_PS_Damping_3l              ) = 0.0000000000000000E+00  ! Force dynamic states
   stset.force.st.dyn (   1 ,       $F_PS_Damping_3r              ) = 0.0000000000000000E+00  ! Force dynamic states
   stset.force.st.dyn (   1 ,       $F_PS_Damping_2l              ) = 0.0000000000000000E+00  ! Force dynamic states
   stset.force.st.dyn (   1 ,       $F_PS_Damping_2r              ) = 0.0000000000000000E+00  ! Force dynamic states
   stset.force.st.dyn (   1 ,       $F_PS_Damping_1l              ) = 0.0000000000000000E+00  ! Force dynamic states
   stset.force.st.dyn (   1 ,       $F_PS_Damping_1r              ) = 0.0000000000000000E+00  ! Force dynamic states
   stset.force.st.dyn (   1 ,       $F_SS_KSX_1l                  ) = 0.0000000000000000E+00  ! Force dynamic states
   stset.force.st.dyn (   1 ,       $F_SS_KSX_1r                  ) = 0.0000000000000000E+00  ! Force dynamic states
   stset.force.st.dyn (   1 ,       $F_SS_KSX_2l                  ) = 0.0000000000000000E+00  ! Force dynamic states
   stset.force.st.dyn (   1 ,       $F_SS_KSX_2r                  ) = 0.0000000000000000E+00  ! Force dynamic states
   stset.force.st.dyn (   1 ,       $F_SS_HX_1                    ) = 0.0000000000000000E+00  ! Force dynamic states
   stset.force.st.dyn (   1 ,       $F_SS_HX_2                    ) = 0.0000000000000000E+00  ! Force dynamic states
   stset.force.st.dyn (   1 ,       $F_SS_HX_3                    ) = 0.0000000000000000E+00  ! Force dynamic states
   stset.force.st.dyn (   1 ,       $F_SS_HX_4                    ) = 0.0000000000000000E+00  ! Force dynamic states
   stset.force.st.intern (          $F_PS_Damping_4l              ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Damping_4r              ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Damping_3l              ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Damping_3r              ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Damping_2l              ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Damping_2r              ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Damping_1l              ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Damping_1r              ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_SS_KSX_1l                  ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_SS_KSX_1r                  ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_SS_KSX_2l                  ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_SS_KSX_2r                  ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_SS_HX_1                    ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_SS_HX_2                    ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_SS_HX_3                    ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_SS_HX_4                    ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Spring_4l               ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Spring_4r               ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Spring_3l               ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Spring_3r               ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Joint_4l                ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Joint_4r                ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Joint_3l                ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Joint_3r                ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Spring_2l               ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Spring_2r               ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Spring_1l               ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Spring_1r               ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Joint_2l                ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Joint_2r                ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Joint_1l                ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_PS_Joint_1r                ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_SS_AirSpring_1l            ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_SS_AirSpring_1r            ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_SS_AirSpring_2l            ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_SS_AirSpring_2r            ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_QY_1                       ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_QY_2                       ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_BS_1                       ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_BS_2                       ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_NG_1                       ) = ''                      ! Force internal state
   stset.force.st.intern (          $F_NG_2                       ) = ''                      ! Force internal state
   stset.joint.st.pos (   1 ,       $J_wheelset4                  ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   1 ,       $J_wheelset3                  ) = 2.5000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   1 ,       $J_Bogie2                     ) = 1.2500000000000000E+00  ! Joint position states
   stset.joint.st.pos (   1 ,       $J_box4l                      ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   1 ,       $J_box4r                      ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   1 ,       $J_box3l                      ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   1 ,       $J_box3r                      ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   1 ,       $J_wheelset2                  ) = 1.7500000000000000E+01  ! Joint position states
   stset.joint.st.pos (   1 ,       $J_Bogie                      ) = 1.8750000000000000E+01  ! Joint position states
   stset.joint.st.pos (   1 ,       $J_wheelset1                  ) = 2.0000000000000000E+01  ! Joint position states
   stset.joint.st.pos (   1 ,       $J_box2l                      ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   1 ,       $J_box2r                      ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   1 ,       $J_box1l                      ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   1 ,       $J_box1r                      ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   1 ,       $J_Carbody                    ) = 1.0000000000000000E+01  ! Joint position states
   stset.joint.st.pos (   2 ,       $J_wheelset4                  ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   2 ,       $J_wheelset3                  ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   2 ,       $J_Bogie2                     ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   2 ,       $J_wheelset2                  ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   2 ,       $J_Bogie                      ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   2 ,       $J_wheelset1                  ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   2 ,       $J_Carbody                    ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   3 ,       $J_wheelset4                  ) = -4.2977271891000002E-01 ! Joint position states
   stset.joint.st.pos (   3 ,       $J_wheelset3                  ) = -4.2977271891004215E-01 ! Joint position states
   stset.joint.st.pos (   3 ,       $J_Bogie2                     ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   3 ,       $J_wheelset2                  ) = -4.2977271891004037E-01 ! Joint position states
   stset.joint.st.pos (   3 ,       $J_Bogie                      ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   3 ,       $J_wheelset1                  ) = -4.2977271891004160E-01 ! Joint position states
   stset.joint.st.pos (   3 ,       $J_Carbody                    ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   4 ,       $J_wheelset4                  ) = -5.3336554850000000E-15 ! Joint position states
   stset.joint.st.pos (   4 ,       $J_wheelset3                  ) = -5.7043667597999999E-15 ! Joint position states
   stset.joint.st.pos (   4 ,       $J_Bogie2                     ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   4 ,       $J_wheelset2                  ) = -4.0311279590999997E-15 ! Joint position states
   stset.joint.st.pos (   4 ,       $J_Bogie                      ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   4 ,       $J_wheelset1                  ) = -4.1762814214000000E-15 ! Joint position states
   stset.joint.st.pos (   4 ,       $J_Carbody                    ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   5 ,       $J_wheelset4                  ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   5 ,       $J_wheelset3                  ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   5 ,       $J_Bogie2                     ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   5 ,       $J_wheelset2                  ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   5 ,       $J_Bogie                      ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   5 ,       $J_wheelset1                  ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   5 ,       $J_Carbody                    ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   6 ,       $J_wheelset4                  ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   6 ,       $J_wheelset3                  ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   6 ,       $J_Bogie2                     ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   6 ,       $J_wheelset2                  ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   6 ,       $J_Bogie                      ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   6 ,       $J_wheelset1                  ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.pos (   6 ,       $J_Carbody                    ) = 0.0000000000000000E+00  ! Joint position states
   stset.joint.st.vel (   1 ,       $J_wheelset4                  ) = 6.9444442749023438E+01  ! Joint velocity states
   stset.joint.st.vel (   1 ,       $J_wheelset3                  ) = 6.9444442749023438E+01  ! Joint velocity states
   stset.joint.st.vel (   1 ,       $J_Bogie2                     ) = 6.9444442749023438E+01  ! Joint velocity states
   stset.joint.st.vel (   1 ,       $J_box4l                      ) = 1.6155887969954867E+02  ! Joint velocity states
   stset.joint.st.vel (   1 ,       $J_box4r                      ) = 1.6155887969954867E+02  ! Joint velocity states
   stset.joint.st.vel (   1 ,       $J_box3l                      ) = 1.6155887969954867E+02  ! Joint velocity states
   stset.joint.st.vel (   1 ,       $J_box3r                      ) = 1.6155887969954867E+02  ! Joint velocity states
   stset.joint.st.vel (   1 ,       $J_wheelset2                  ) = 6.9444442749023438E+01  ! Joint velocity states
   stset.joint.st.vel (   1 ,       $J_Bogie                      ) = 6.9444442749023438E+01  ! Joint velocity states
   stset.joint.st.vel (   1 ,       $J_wheelset1                  ) = 6.9444442749023438E+01  ! Joint velocity states
   stset.joint.st.vel (   1 ,       $J_box2l                      ) = 1.6155887969954867E+02  ! Joint velocity states
   stset.joint.st.vel (   1 ,       $J_box2r                      ) = 1.6155887969954867E+02  ! Joint velocity states
   stset.joint.st.vel (   1 ,       $J_box1l                      ) = 1.6155887969954867E+02  ! Joint velocity states
   stset.joint.st.vel (   1 ,       $J_box1r                      ) = 1.6155887969954867E+02  ! Joint velocity states
   stset.joint.st.vel (   1 ,       $J_Carbody                    ) = 6.9444442749023438E+01  ! Joint velocity states
   stset.joint.st.vel (   2 ,       $J_wheelset4                  ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   2 ,       $J_wheelset3                  ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   2 ,       $J_Bogie2                     ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   2 ,       $J_wheelset2                  ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   2 ,       $J_Bogie                      ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   2 ,       $J_wheelset1                  ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   2 ,       $J_Carbody                    ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   3 ,       $J_wheelset4                  ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   3 ,       $J_wheelset3                  ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   3 ,       $J_Bogie2                     ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   3 ,       $J_wheelset2                  ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   3 ,       $J_Bogie                      ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   3 ,       $J_wheelset1                  ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   3 ,       $J_Carbody                    ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   4 ,       $J_wheelset4                  ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   4 ,       $J_wheelset3                  ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   4 ,       $J_Bogie2                     ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   4 ,       $J_wheelset2                  ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   4 ,       $J_Bogie                      ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   4 ,       $J_wheelset1                  ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   4 ,       $J_Carbody                    ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   5 ,       $J_wheelset4                  ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   5 ,       $J_wheelset3                  ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   5 ,       $J_Bogie2                     ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   5 ,       $J_wheelset2                  ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   5 ,       $J_Bogie                      ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   5 ,       $J_wheelset1                  ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   5 ,       $J_Carbody                    ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   6 ,       $J_wheelset4                  ) = -1.6155887969954867E+02 ! Joint velocity states
   stset.joint.st.vel (   6 ,       $J_wheelset3                  ) = -1.6155887969954867E+02 ! Joint velocity states
   stset.joint.st.vel (   6 ,       $J_Bogie2                     ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   6 ,       $J_wheelset2                  ) = -1.6155887969954867E+02 ! Joint velocity states
   stset.joint.st.vel (   6 ,       $J_Bogie                      ) = 0.0000000000000000E+00  ! Joint velocity states
   stset.joint.st.vel (   6 ,       $J_wheelset1                  ) = -1.6155887969954867E+02 ! Joint velocity states
   stset.joint.st.vel (   6 ,       $J_Carbody                    ) = 0.0000000000000000E+00  ! Joint velocity states
stateset.end (                      $STS_linearization_state )
stset.time (                        $STS_linearization_state      ) = 0.0000000000000000E+00  ! Time

!**********************************************************************
! Solver Settings
!**********************************************************************
slv.kin.task (                      $SLV_SolverSettings           ) = 2                       ! KIN_INTPAR_TASK
slv.kin.tout.mode (                 $SLV_SolverSettings           ) = 2                       ! KIN_INTPAR_TOUT_MODE
slv.kin.tout.n (                    $SLV_SolverSettings           ) = 201                     ! KIN_INTPAR_NUM_STEPS
slv.kin.tol (                       $SLV_SolverSettings           ) = 9.9999999999999995E-07  ! Kinematics tolerance
slv.integ.fix.driftstab (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_CONSTAB
slv.integ.fix.jac.update (          $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_FIXINT_JACOBIAN_EVAL
slv.integ.fix.part.type (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_JAC_PART_TYPE
slv.integ.fix.order (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_METHOD_ORDER
slv.integ.fix.posup (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_POS_COORD_UPDATE
slv.integ.sodasrt.formalism (       $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_PAR_FORMALISM
slv.integ.type (                    $SLV_SolverSettings           ) = 1                       ! Integrator type
slv.integ.jac.struc (               $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_JACOBIAN_STRUC
slv.integ.jac.incr.type (           $SLV_SolverSettings           ) = 2                       ! Jacobian increment type
slv.integ.linalg.slv (              $SLV_SolverSettings           ) = 1                       ! 1 = dense ; 2 = sparse (UMFPACK) ; 3 = sparse (PARDISO)
slv.integ.lsode.meth (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_LSODE_INTEG_METHOD
slv.integ.lsode.jac.struc (         $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_LSODE_JACOBIAN_STRUC
slv.integ.lsode.maxord (            $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_LSODE_MAX_ORDER
slv.integ.maxrhs (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_RHS
slv.integ.maxstp (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_TIME_STEPS
slv.integ.newton.maxit (            $SLV_SolverSettings           ) = 7                       ! TIME_INTEG_INTPAR_NEWTON_ITERS
slv.integ.tout.n (                  $SLV_SolverSettings           ) = 500                     ! TIME_INTEG_INTPAR_OUTPUT_NUM_POINTS
slv.integ.sodasrt2.iestsc (         $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_PAR_SODASRT20_ERROR_EST_SCALE_METHOD
slv.integ.sodasrt.maxord (          $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_SODASRT_MAX_ORDER
slv.integ.sodasrt1.errnorm (        $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_SODASRT_NORM_TYPE
slv.integ.tend.mode (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_TEND_MODE
slv.integ.tout.mode (               $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_INTPAR_TOUT_MODE
slv.integ.meetop (                  $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EVAL_MOTION_EQ_AT_COMM_POINTS
slv.integ.driftstab (               $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_BOOLPAR_ACCEPT_DRIFT
slv.integ.root (                    $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_DETECT_IMPLICIT_DISCONTINUITIES
slv.integ.jac.part (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_PARTITIONED_EVAL_JACOBIAN
slv.integ.addrhscall (              $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EXTRA_EVAL_AFTER_SUCCESSFUL_STEP
slv.integ.linalg.red2nd (           $SLV_SolverSettings           ) = 1                       ! Linear equations second order reduction
slv.integ.fix.oneleg (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_IMPLICIT_ONE_LEG_OLC
slv.integ.fix.conforce (            $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_FIXINT_CONFORCE
slv.integ.fix.clss (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_METHOD_CLASS
slv.integ.sodasrt1.scal.lam (       $SLV_SolverSettings           ) = 1.0000000117000000E-07  ! TIME_INTEG_SCALARPAR_SCALE_CONSTRAINT_FORCES
slv.integ.sodasrt1.scal.acc (       $SLV_SolverSettings           ) = 1.0000000000000000E+00  ! TIME_INTEG_SCALARPAR_SCALE_ACCELERATIONS
slv.integ.newton.eps (              $SLV_SolverSettings           ) = 3.3300000428999998E-01  ! TIME_INTEG_SCALARPAR_NEWTON_ERROR_BOUND
slv.integ.fix.utcpar (              $SLV_SolverSettings           ) = 0.0000000000000000E+00  ! TIME_INTEG_SCALARPAR_FIXINT_EULER_UTC
slv.integ.fix.olcpar (              $SLV_SolverSettings           ) = 5.0000000000000000E-01  ! TIME_INTEG_SCALARPAR_FIXINT_ONE_LEG_OLC
slv.integ.sodasrt2.estfac (         $SLV_SolverSettings           ) = 9.9999999999999995E-07  ! TIME_INTEG_SCALARPAR_SODASRT20_ERROR_EST_SCALE_FACTOR
slv.integ.tout.freq (               $SLV_SolverSettings           ) = { 100Hz }               ! TIME_INTEG_PAR_OUTPUT_FREQ
slv.integ.tend.time (               $SLV_SolverSettings           ) = { 20s }                 ! TIME_INTEG_TIMEPAR_END_TIME
slv.integ.hmax (                    $SLV_SolverSettings           ) = 1.0000000000000001E-01  ! TIME_INTEG_TIMEPAR_MAX_STEPSIZE
slv.integ.atol.gen (                $SLV_SolverSettings           ) = 9.9999997474000006E-05  ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.rtol.gen (                $SLV_SolverSettings           ) = 9.9999997474000006E-05  ! TIME_INTEG_PARSTATE_DEFAULT
slv.meas.geo (                      $SLV_SolverSettings           ) = 1                       ! Animation data to result file
slv.meas.prec.dbl (                 $SLV_SolverSettings           ) = 0                       ! Result file in double precision
slv.meas.sensor.pos (               $SLV_SolverSettings           ) = 1                       ! Sensor position to result file
slv.meas.sensor.vel (               $SLV_SolverSettings           ) = 1                       ! Sensor velocity to result file
slv.meas.sensor.acc (               $SLV_SolverSettings           ) = 1                       ! Sensor acceleration to result file
slv.meas.force.af (                 $SLV_SolverSettings           ) = 1                       ! applied forces to result file
slv.meas.force.ov (                 $SLV_SolverSettings           ) = 1                       ! Force outpur values to result file
slv.meas.force.st.dyn (             $SLV_SolverSettings           ) = 1                       ! Force dynamic states to result file
slv.meas.force.st.alg (             $SLV_SolverSettings           ) = 1                       ! Force algebraic states to result file
slv.meas.force.st.desc (            $SLV_SolverSettings           ) = 0                       ! Force descriptive states to result file
slv.meas.force.st.root (            $SLV_SolverSettings           ) = 0                       ! Force root states to result file
slv.meas.joint.st.pos (             $SLV_SolverSettings           ) = 1                       ! Joint position to result file
slv.meas.joint.st.vel (             $SLV_SolverSettings           ) = 1                       ! Joint velocity to result file
slv.meas.joint.st.acc (             $SLV_SolverSettings           ) = 1                       ! Joint acceleration to result file
slv.meas.joint.cf (                 $SLV_SolverSettings           ) = 1                       ! Joint constraining forces to result file
slv.meas.body.vel (                 $SLV_SolverSettings           ) = 1                       ! Body velocity to result file
slv.meas.body.flx.st.pos (          $SLV_SolverSettings           ) = 1                       ! Body elastic state position to result file
slv.meas.body.flx.st.vel (          $SLV_SolverSettings           ) = 1                       ! Body elastic state velocity to result file
slv.meas.body.flx.st.acc (          $SLV_SolverSettings           ) = 1                       ! Body elastic state acceleration to result file
slv.meas.marker.st.alg (            $SLV_SolverSettings           ) = 1                       ! Marker algebraic state to result file
slv.meas.constr.cf (                $SLV_SolverSettings           ) = 1                       ! Constraint constrained state to result file
slv.meas.yout (                     $SLV_SolverSettings           ) = 1                       ! y-Outputs to result file
slv.meas.uvector (                  $SLV_SolverSettings           ) = 0                       ! u-Vector to result file
slv.meas.ifctn.fx (                 $SLV_SolverSettings           ) = 0                       ! Input Function fx to result file
slv.meas.result (                   $SLV_SolverSettings           ) = 1                       ! Result elements to result file
slv.meas.online.active (            $SLV_SolverSettings           ) = 0                       ! MEAS_BOOLPAR_ONLINE
slv.meas.online.merge0dof (         $SLV_SolverSettings           ) = 0                       ! MEAS_BOOLPAR_ONLINE_MERGE0DOF
slv.meas.subvar (                   $SLV_SolverSettings           ) = 1                       ! MEAS_BOOLPAR_SUBVAR
slv.output.path.type (              $SLV_SolverSettings           ) = 1                       ! OUTPUT_PATH_PAR_TYPE
slv.output.eva.enabled (            $SLV_SolverSettings           ) = 1                       ! eva file generation 0 = disable; 1 = enable
slv.threads (                       $SLV_SolverSettings           ) = 2                       ! Solver Threads
slv.ev.scal.body.trans (            $SLV_SolverSettings           ) = 1.0000000000000000E+00  ! EIGENVALUES_SCALARPAR_POSITION
slv.ev.scal.body.rot (              $SLV_SolverSettings           ) = 1.0000000000000000E+00  ! EIGENVALUES_SCALARPAR_ANGLE
slv.ev.scal.body.flx (              $SLV_SolverSettings           ) = 1.0000000000000000E+00  ! EIGENVALUES_SCALARPAR_MODEL_COORD
slv.ev.scal.force (                 $SLV_SolverSettings           ) = 1.0000000000000000E+00  ! EIGENVALUES_SCALARPAR_FORCE_STATE
slv.lin.diff.meth (                 $SLV_SolverSettings           ) = 0                       ! Determination Method
slv.equi.tol (                      $SLV_SolverSettings           ) = 1.0000000000000005E-08  ! Error tolerance
slv.equi.st.integ.tout.mode (       $SLV_SolverSettings           ) = 2                       ! EQUI_STATIC_INTPAR_TOUT_MODE
slv.equi.st.integ.tout.n (          $SLV_SolverSettings           ) = 201                     ! EQUI_STATIC_INTPAR_TOUT_NUM_POINTS
slv.equi.drv.tout.mode (            $SLV_SolverSettings           ) = 2                       ! EQUI_DRV_INTPAR_TOUT_MODE
slv.equi.drv.tout.n (               $SLV_SolverSettings           ) = 201                     ! EQUI_DRV_INTPAR_TOUT_NUM_POINTS
slv.txt (                           $SLV_SolverSettings           ) = ''                      ! Comment

!**********************************************************************
! SubVars
!**********************************************************************
subvar.str (                        $_Lb                          ) = '1.25'                  ! Definition

subvar.str (                        $_L                           ) = '17.5'                  ! Definition

subvar.str (                        $_Wheelset_Z                  ) = '-0.4297727'            ! Definition

subvar.str (                        $_PS_Damping_X                ) = '1.48'                  ! Definition

subvar.str (                        $_PS_Damping_Y                ) = '2'                     ! Definition

subvar.str (                        $_PS_Damping_Z_low            ) = '-.322-$_Wheelset_Z'    ! Definition

subvar.str (                        $_PS_Damping_Z_high           ) = '-.692'                 ! Definition

subvar.str (                        $_PS_Damping_X_4              ) = '$_Lb-$_PS_Damping_X'   ! Definition

subvar.str (                        $_PS_Damping_X_3              ) = '-$_PS_Damping_X_4'     ! Definition

subvar.str (                        $_PS_Damping_X_2              ) = '$_L+$_Lb-$_PS_Damping_X' ! Definition

subvar.str (                        $_PS_Damping_X_1              ) = '0.'                    ! Definition

subvar.str (                        $_KSX_Vertical_jiaodu         ) = '0'                     ! Definition

subvar.str (                        $_KSX_Lateral_jiaodu          ) = '0'                     ! Definition

subvar.str (                        $_HX_Vertical_jiaodu          ) = '-1.51'                 ! Definition

subvar.str (                        $_PS_Damping_Lateral_jiaodu   ) = '0'                     ! Definition

subvar.str (                        $_PS_Damping_longitudinal_jiaodu) = '0'                   ! Definition

subvar.str (                        $_PS_Spring_Z_low             ) = '$_Wheelset_Z-.155'     ! Definition

subvar.str (                        $_PS_Spring_length            ) = '0.248'                 ! Definition

subvar.str (                        $_PS_Spring_Z_high            ) = '$_PS_Spring_Z_low-$_PS_Spring_length' ! Definition

subvar.str (                        $_PS_Joint_X                  ) = '.75'                   ! Definition

subvar.str (                        $_PS_Joint_X_4                ) = '$_Lb-$_PS_Joint_X'     ! Definition

subvar.str (                        $_PS_Joint_X_3                ) = '-$_PS_Joint_X_4'       ! Definition

subvar.str (                        $_PS_Joint_X_2                ) = '0.'                    ! Definition

subvar.str (                        $_PS_Joint_X_1                ) = '0.'                    ! Definition

subvar.str (                        $_PS_Joint_Y                  ) = '1'                     ! Definition

subvar.str (                        $_PS_Joint_Z                  ) = '-.446'                 ! Definition

subvar.str (                        $_2Lb                         ) = '2*$_Lb'                ! Definition

subvar.str (                        $_Bogie_PS_Damping_4          ) = '-$_PS_Damping_X'       ! Definition

subvar.str (                        $_Bogie_PS_Spring_4           ) = '-$_Lb'                 ! Definition

subvar.str (                        $_Bogie_PS_Joint_X            ) = '-.75'                  ! Definition

subvar.str (                        $_PS_Damping_Damping          ) = '19600'                 ! Definition

subvar.str (                        $_PS_Spring_Stiffness_X       ) = '980000'                ! Definition

subvar.str (                        $_PS_Spring_stiffness_Y       ) = '$_PS_Spring_Stiffness_X' ! Definition

subvar.str (                        $_PS_Spring_stiffness_Z       ) = '1176000'               ! Definition

subvar.str (                        $_PS_Damping_Z                ) = '($_PS_Damping_Z_low+$_PS_Damping_Z_high)/2' ! Definition

subvar.str (                        $_PS_Spring_Z                 ) = '($_PS_Spring_Z_low+$_PS_Spring_Z_high)/2' ! Definition

subvar.str (                        $_PS_Spring_Z_box             ) = '$_PS_Spring_Z-$_Wheelset_Z' ! Definition

subvar.str (                        $_PS_Spring_Y_box             ) = '1-2.2204460D-16'       ! Definition

subvar.str (                        $_Lb2                         ) = '$_Lb-2.2204460D-16'    ! Definition

subvar.str (                        $_PS_Damping_Z_box            ) = '$_PS_Damping_Z-$_Wheelset_Z' ! Definition

subvar.str (                        $_PS_Joint_Z_box              ) = '$_PS_Joint_Z-$_Wheelset_Z' ! Definition

subvar.str (                        $_PS_Joing_Stiffness_X        ) = '13720000'              ! Definition

subvar.str (                        $_PS_Joint_stiffness_Y        ) = '5520000'               ! Definition

subvar.str (                        $_SS_AirSpring_Width          ) = '2.46'                  ! Definition

subvar.str (                        $_SS_Airspring_Y              ) = '$_SS_AirSpring_Width/2' ! Definition

subvar.str (                        $_SS_Airspring_FY             ) = '$_SS_Airspring_Y-$_SS_AirSpring_Width' ! Definition

subvar.str (                        $_SS_Airspring_Z              ) = '-.9'                   ! Definition

subvar.str (                        $_Halfcar                     ) = '8.75'                  ! Definition

subvar.str (                        $_SS_KSX_car_bx               ) = '-8.04'                 ! Definition

subvar.str (                        $_SS_KSX_car_fx               ) = '8.04'                  ! Definition

subvar.str (                        $_SS_KSX_bg_fx                ) = '-$_Halfcar+8.7'        ! Definition

subvar.str (                        $_SS_KSX_Yl                   ) = '-1.35'                 ! Definition

subvar.str (                        $_SS_KSX_Yr                   ) = '-$_SS_KSX_Yl'          ! Definition

subvar.str (                        $_SS_KSX_Z                    ) = '-.415'                 ! Definition

subvar.str (                        $_SS_HX_car_bx                ) = '-8.55'                 ! Definition

subvar.str (                        $_SS_HX_car_bx2               ) = '-8.95'                 ! Definition

subvar.str (                        $_SS_HX_car_fx                ) = '-$_SS_HX_car_bx'       ! Definition

subvar.str (                        $_SS_HX_car_fx2               ) = '-$_SS_HX_car_bx2'      ! Definition

subvar.str (                        $_SS_HX_bg_x1                 ) = '.2'                    ! Definition

subvar.str (                        $_SS_HX_bg_x2                 ) = '-$_SS_HX_bg_x1'        ! Definition

subvar.str (                        $_SS_HX_Y1                    ) = '-.14'                  ! Definition

subvar.str (                        $_SS_HX_Y2                    ) = '.315'                  ! Definition

subvar.str (                        $_SS_HX_Y3                    ) = '-.315'                 ! Definition

subvar.str (                        $_SS_HX_Y4                    ) = '.14'                   ! Definition

subvar.str (                        $_SS_HX_Z_car                 ) = '-.785'                 ! Definition

subvar.str (                        $_SS_HX_Z_bg                  ) = '-0.797'                ! Definition

subvar.str (                        $_SS_KSX_bg_bx                ) = '-$_SS_KSX_bg_fx'       ! Definition

subvar.str (                        $_AirSpring_stiffness_x       ) = '167400'                ! Definition

subvar.str (                        $_AirSpring_stiffness_y       ) = '$_AirSpring_stiffness_x' ! Definition

subvar.str (                        $_AirSpring_stiffness_z       ) = '241900'                ! Definition

subvar.str (                        $_QY_Car_Z                    ) = '-.3975'                ! Definition

subvar.str (                        $_QY_Bg_z                     ) = '-.38'                  ! Definition

subvar.str (                        $_QY_Stiffness                ) = '7882000'               ! Definition

subvar.str (                        $_CarFloor_Z                  ) = '-1.3'                  ! Definition

subvar.str (                        $_YY                          ) = '0.005'                 ! Definition

subvar.str (                        $_NG_stiffness                ) = '1e6'                   ! Definition

subvar.str (                        $_PS_Joint_Stiffness_Z        ) = '$_PS_Joing_Stiffness_X' ! Definition

subvar.str (                        $_FrameAcc_Z                  ) = '-0.75'                 ! Definition

subvar.str (                        $_PS_Damping_Bogie_F_x        ) = '0.37*tan($_PS_Damping_longitudinal_jiaodu*PI/180)+1.48' ! Definition

subvar.str (                        $_PS_Damping_Bogie_B_x        ) = '-$_PS_Damping_Bogie_F_x' ! Definition

subvar.str (                        $_PS_Damping_Box_F_x          ) = '0.23'                  ! Definition

subvar.str (                        $_PS_Damping_Box_B_x          ) = '-$_PS_Damping_Box_F_x' ! Definition

subvar.str (                        $_PS_Damping_Bogie_L          ) = '-0.37*tan($_PS_Damping_Lateral_jiaodu*PI/180)-1' ! Definition

subvar.str (                        $_PS_Damping_Bogie_R          ) = '-$_PS_Damping_Bogie_L' ! Definition

subvar.str (                        $_PS_Damping_Box_L            ) = '0'                     ! Definition

subvar.str (                        $_PS_Damping_Box_R            ) = '-$_PS_Damping_Box_L'   ! Definition

subvar.str (                        $_SS_HX_Carbody_z             ) = '-0.785'                ! Definition

subvar.str (                        $_SS_HX_Bogie_z               ) = '0.455*tan($_HX_Vertical_jiaodu*PI/180)-0.785' ! Definition

subvar.str (                        $_SS_KSX_Carbody_L            ) = '-1.35'                 ! Definition

subvar.str (                        $_SS_KSX_Carbody_R            ) = '-$_SS_KSX_Carbody_L'   ! Definition

subvar.str (                        $_SS_KSX_Bogie_L              ) = '-0.66*tan($_KSX_Lateral_jiaodu*PI/180)-1.35' ! Definition

subvar.str (                        $_SS_KSX_Bogie_R              ) = '-$_SS_KSX_Bogie_L'     ! Definition

subvar.str (                        $_SS_KSX_Carbody_z            ) = '-0.415'                ! Definition

subvar.str (                        $_SS_KSX_Bogie_z              ) = '0.66*tan($_KSX_Vertical_jiaodu*PI/180)-0.415' ! Definition

subvar.str (                        $_Speed                       ) = '350/3.6'               ! Definition

!**********************************************************************
! Reference systems
!**********************************************************************
refsys.type (                       $B_Isys                       ) = 1                       ! Type
refsys.attr.2d.pos.x (              $B_Isys                       ) = -5.2600000000000000E+03
refsys.attr.2d.pos.y (              $B_Isys                       ) = -1.6000000000000000E+02
refsys.attr.2d.width (              $B_Isys                       ) = 5.0000000000000000E+03
refsys.attr.2d.height (             $B_Isys                       ) = 3.1000000000000000E+02

marker.type (                       $M_Isys                       ) = 1                       ! Type
marker.parent (                     $M_Isys                       ) = $B_Isys                 ! Reference system

marker.type (                       $M_Rail_Track_Frame_of_wheelset4) = -98                   ! Type
marker.parent (                     $M_Rail_Track_Frame_of_wheelset4) = $B_Isys               ! Reference system
marker.par (              1 ,       $M_Rail_Track_Frame_of_wheelset4) = $J_wheelset4          ! [-] Track Joint

marker.type (                       $M_Rail_Track_Camera_of_wheelset4) = -98                  ! Type
marker.parent (                     $M_Rail_Track_Camera_of_wheelset4) = $B_Isys              ! Reference system
marker.par (              1 ,       $M_Rail_Track_Camera_of_wheelset4) = $J_wheelset4         ! [-] Track Joint
marker.par (              3 ,       $M_Rail_Track_Camera_of_wheelset4) = 1.0000000000000000E+00 ! [-] Lock translation in z of Isys
marker.par (              4 ,       $M_Rail_Track_Camera_of_wheelset4) = 1.0000000000000000E+00 ! [-] Lock rotation about x of Isys

marker.type (                       $M_Rail_Track_Frame_of_wheelset3) = -98                   ! Type
marker.parent (                     $M_Rail_Track_Frame_of_wheelset3) = $B_Isys               ! Reference system
marker.par (              1 ,       $M_Rail_Track_Frame_of_wheelset3) = $J_wheelset3          ! [-] Track Joint

marker.type (                       $M_Rail_Track_Camera_of_wheelset3) = -98                  ! Type
marker.parent (                     $M_Rail_Track_Camera_of_wheelset3) = $B_Isys              ! Reference system
marker.par (              1 ,       $M_Rail_Track_Camera_of_wheelset3) = $J_wheelset3         ! [-] Track Joint
marker.par (              3 ,       $M_Rail_Track_Camera_of_wheelset3) = 1.0000000000000000E+00 ! [-] Lock translation in z of Isys
marker.par (              4 ,       $M_Rail_Track_Camera_of_wheelset3) = 1.0000000000000000E+00 ! [-] Lock rotation about x of Isys

marker.type (                       $M_Rail_Track_Frame_of_wheelset2) = -98                   ! Type
marker.parent (                     $M_Rail_Track_Frame_of_wheelset2) = $B_Isys               ! Reference system
marker.par (              1 ,       $M_Rail_Track_Frame_of_wheelset2) = $J_wheelset2          ! [-] Track Joint

marker.type (                       $M_Rail_Track_Camera_of_wheelset2) = -98                  ! Type
marker.parent (                     $M_Rail_Track_Camera_of_wheelset2) = $B_Isys              ! Reference system
marker.par (              1 ,       $M_Rail_Track_Camera_of_wheelset2) = $J_wheelset2         ! [-] Track Joint
marker.par (              3 ,       $M_Rail_Track_Camera_of_wheelset2) = 1.0000000000000000E+00 ! [-] Lock translation in z of Isys
marker.par (              4 ,       $M_Rail_Track_Camera_of_wheelset2) = 1.0000000000000000E+00 ! [-] Lock rotation about x of Isys

marker.type (                       $M_Rail_Track_Camera_of_wheelset1) = -98                  ! Type
marker.parent (                     $M_Rail_Track_Camera_of_wheelset1) = $B_Isys              ! Reference system
marker.par (              1 ,       $M_Rail_Track_Camera_of_wheelset1) = $J_wheelset1         ! [-] Track Joint
marker.par (              3 ,       $M_Rail_Track_Camera_of_wheelset1) = 1.0000000000000000E+00 ! [-] Lock translation in z of Isys
marker.par (              4 ,       $M_Rail_Track_Camera_of_wheelset1) = 1.0000000000000000E+00 ! [-] Lock rotation about x of Isys

marker.type (                       $M_Rail_Track_Frame_of_wheelset1) = -98                   ! Type
marker.parent (                     $M_Rail_Track_Frame_of_wheelset1) = $B_Isys               ! Reference system
marker.par (              1 ,       $M_Rail_Track_Frame_of_wheelset1) = $J_wheelset1          ! [-] Track Joint

marker.type (                       $M_Bogie2_PtP                 ) = -80                     ! Type
marker.parent (                     $M_Bogie2_PtP                 ) = $B_Isys                 ! Reference system
marker.par (              2 ,       $M_Bogie2_PtP                 ) = 2.0000000000000000E+00  ! [-] Point-to-Point Axis
marker.par (              3 ,       $M_Bogie2_PtP                 ) = $M_Bogie2_PS_4r_damping ! [-] From Marker
marker.par (              4 ,       $M_Bogie2_PtP                 ) = $M_box4r_damping        ! [-] To Marker

marker.type (                       $M_Bogie2_PtP_1               ) = -80                     ! Type
marker.parent (                     $M_Bogie2_PtP_1               ) = $B_Isys                 ! Reference system
marker.par (              2 ,       $M_Bogie2_PtP_1               ) = 2.0000000000000000E+00  ! [-] Point-to-Point Axis
marker.par (              3 ,       $M_Bogie2_PtP_1               ) = $M_Bogie2_PS_3l_damping ! [-] From Marker
marker.par (              4 ,       $M_Bogie2_PtP_1               ) = $M_box3l_damping        ! [-] To Marker

marker.type (                       $M_Bogie2_PtP_2               ) = -80                     ! Type
marker.parent (                     $M_Bogie2_PtP_2               ) = $B_Isys                 ! Reference system
marker.par (              2 ,       $M_Bogie2_PtP_2               ) = 2.0000000000000000E+00  ! [-] Point-to-Point Axis
marker.par (              3 ,       $M_Bogie2_PtP_2               ) = $M_Bogie2_PS_3r_damping ! [-] From Marker
marker.par (              4 ,       $M_Bogie2_PtP_2               ) = $M_box3r_damping        ! [-] To Marker

marker.type (                       $M_Bogie_PtP                  ) = -80                     ! Type
marker.parent (                     $M_Bogie_PtP                  ) = $B_Isys                 ! Reference system
marker.par (              2 ,       $M_Bogie_PtP                  ) = 2.0000000000000000E+00  ! [-] Point-to-Point Axis
marker.par (              3 ,       $M_Bogie_PtP                  ) = $M_Bogie_PS_2l_damping  ! [-] From Marker
marker.par (              4 ,       $M_Bogie_PtP                  ) = $M_box2l_damping        ! [-] To Marker

marker.type (                       $M_Bogie_PtP_1                ) = -80                     ! Type
marker.parent (                     $M_Bogie_PtP_1                ) = $B_Isys                 ! Reference system
marker.par (              2 ,       $M_Bogie_PtP_1                ) = 2.0000000000000000E+00  ! [-] Point-to-Point Axis
marker.par (              3 ,       $M_Bogie_PtP_1                ) = $M_Bogie_PS_2r_damping  ! [-] From Marker
marker.par (              4 ,       $M_Bogie_PtP_1                ) = $M_box2r_damping        ! [-] To Marker

marker.type (                       $M_Bogie_PtP_2                ) = -80                     ! Type
marker.parent (                     $M_Bogie_PtP_2                ) = $B_Isys                 ! Reference system
marker.par (              2 ,       $M_Bogie_PtP_2                ) = 2.0000000000000000E+00  ! [-] Point-to-Point Axis
marker.par (              3 ,       $M_Bogie_PtP_2                ) = $M_Bogie_PS_1l_damping  ! [-] From Marker
marker.par (              4 ,       $M_Bogie_PtP_2                ) = $M_box1l_damping        ! [-] To Marker

marker.type (                       $M_Bogie_PtP_3                ) = -80                     ! Type
marker.parent (                     $M_Bogie_PtP_3                ) = $B_Isys                 ! Reference system
marker.par (              2 ,       $M_Bogie_PtP_3                ) = 2.0000000000000000E+00  ! [-] Point-to-Point Axis
marker.par (              3 ,       $M_Bogie_PtP_3                ) = $M_Bogie_PS_1r_damping  ! [-] From Marker
marker.par (              4 ,       $M_Bogie_PtP_3                ) = $M_box1r_damping        ! [-] To Marker

marker.type (                       $M_Carbody_PtP                ) = -80                     ! Type
marker.parent (                     $M_Carbody_PtP                ) = $B_Isys                 ! Reference system
marker.par (              2 ,       $M_Carbody_PtP                ) = 2.0000000000000000E+00  ! [-] Point-to-Point Axis
marker.par (              3 ,       $M_Carbody_PtP                ) = $M_Carbody_KSX_1l       ! [-] From Marker
marker.par (              4 ,       $M_Carbody_PtP                ) = $M_Bogie_SS_KSX_1l      ! [-] To Marker

marker.type (                       $M_Carbody_PtP_1              ) = -80                     ! Type
marker.parent (                     $M_Carbody_PtP_1              ) = $B_Isys                 ! Reference system
marker.par (              2 ,       $M_Carbody_PtP_1              ) = 2.0000000000000000E+00  ! [-] Point-to-Point Axis
marker.par (              3 ,       $M_Carbody_PtP_1              ) = $M_Carbody_KSX_1r       ! [-] From Marker
marker.par (              4 ,       $M_Carbody_PtP_1              ) = $M_Bogie_SS_KSX_1r      ! [-] To Marker

marker.type (                       $M_Carbody_PtP_2              ) = -80                     ! Type
marker.parent (                     $M_Carbody_PtP_2              ) = $B_Isys                 ! Reference system
marker.par (              2 ,       $M_Carbody_PtP_2              ) = 2.0000000000000000E+00  ! [-] Point-to-Point Axis
marker.par (              3 ,       $M_Carbody_PtP_2              ) = $M_Carbody_KSX_2l       ! [-] From Marker
marker.par (              4 ,       $M_Carbody_PtP_2              ) = $M_Bogie2_SS_KSX_2l     ! [-] To Marker

marker.type (                       $M_Carbody_PtP_3              ) = -80                     ! Type
marker.parent (                     $M_Carbody_PtP_3              ) = $B_Isys                 ! Reference system
marker.par (              2 ,       $M_Carbody_PtP_3              ) = 2.0000000000000000E+00  ! [-] Point-to-Point Axis
marker.par (              3 ,       $M_Carbody_PtP_3              ) = $M_Carbody_KSX_2r       ! [-] From Marker
marker.par (              4 ,       $M_Carbody_PtP_3              ) = $M_Bogie2_SS_KSX_2r     ! [-] To Marker

marker.type (                       $M_Carbody_PtP_4              ) = -80                     ! Type
marker.parent (                     $M_Carbody_PtP_4              ) = $B_Isys                 ! Reference system
marker.par (              2 ,       $M_Carbody_PtP_4              ) = 2.0000000000000000E+00  ! [-] Point-to-Point Axis
marker.par (              3 ,       $M_Carbody_PtP_4              ) = $M_Carbody_HX_1         ! [-] From Marker
marker.par (              4 ,       $M_Carbody_PtP_4              ) = $M_Bogie_SS_HX_1        ! [-] To Marker

marker.type (                       $M_Carbody_PtP_5              ) = -80                     ! Type
marker.parent (                     $M_Carbody_PtP_5              ) = $B_Isys                 ! Reference system
marker.par (              2 ,       $M_Carbody_PtP_5              ) = 2.0000000000000000E+00  ! [-] Point-to-Point Axis
marker.par (              3 ,       $M_Carbody_PtP_5              ) = $M_Carbody_HX_2         ! [-] From Marker
marker.par (              4 ,       $M_Carbody_PtP_5              ) = $M_Bogie_SS_HX_2        ! [-] To Marker

marker.type (                       $M_Carbody_PtP_6              ) = -80                     ! Type
marker.parent (                     $M_Carbody_PtP_6              ) = $B_Isys                 ! Reference system
marker.par (              2 ,       $M_Carbody_PtP_6              ) = 2.0000000000000000E+00  ! [-] Point-to-Point Axis
marker.par (              3 ,       $M_Carbody_PtP_6              ) = $M_Carbody_HX_3         ! [-] From Marker
marker.par (              4 ,       $M_Carbody_PtP_6              ) = $M_Bogie2_SS_HX_3       ! [-] To Marker

marker.type (                       $M_Carbody_PtP_7              ) = -80                     ! Type
marker.parent (                     $M_Carbody_PtP_7              ) = $B_Isys                 ! Reference system
marker.par (              2 ,       $M_Carbody_PtP_7              ) = 2.0000000000000000E+00  ! [-] Point-to-Point Axis
marker.par (              3 ,       $M_Carbody_PtP_7              ) = $M_Carbody_HX_4         ! [-] From Marker
marker.par (              4 ,       $M_Carbody_PtP_7              ) = $M_Bogie2_SS_HX_4       ! [-] To Marker

marker.type (                       $M_Isys_TrackFrame_RWP_WR1    ) = -98                     ! Type
marker.parent (                     $M_Isys_TrackFrame_RWP_WR1    ) = $B_Isys                 ! Reference system
marker.par (              1 ,       $M_Isys_TrackFrame_RWP_WR1    ) = $J_wheelset1            ! [-] Track Joint

marker.type (                       $M_B_Isys_ProfRef_RWP_WR1     ) = -78                     ! Type
marker.parent (                     $M_B_Isys_ProfRef_RWP_WR1     ) = $B_Isys                 ! Reference system
marker.par (              1 ,       $M_B_Isys_ProfRef_RWP_WR1     ) = $RWP_WR1                ! [-] Rail-Wheel Pair

marker.type (                       $M_Isys_TrackFrame_RWP_WL1    ) = -98                     ! Type
marker.parent (                     $M_Isys_TrackFrame_RWP_WL1    ) = $B_Isys                 ! Reference system
marker.par (              1 ,       $M_Isys_TrackFrame_RWP_WL1    ) = $J_wheelset1            ! [-] Track Joint

marker.type (                       $M_B_Isys_ProfRef_RWP_WL1     ) = -78                     ! Type
marker.parent (                     $M_B_Isys_ProfRef_RWP_WL1     ) = $B_Isys                 ! Reference system
marker.par (              1 ,       $M_B_Isys_ProfRef_RWP_WL1     ) = $RWP_WL1                ! [-] Rail-Wheel Pair

marker.type (                       $M_Isys_TrackFrame_RWP_WR2    ) = -98                     ! Type
marker.parent (                     $M_Isys_TrackFrame_RWP_WR2    ) = $B_Isys                 ! Reference system
marker.par (              1 ,       $M_Isys_TrackFrame_RWP_WR2    ) = $J_wheelset2            ! [-] Track Joint

marker.type (                       $M_B_Isys_ProfRef_RWP_WR2     ) = -78                     ! Type
marker.parent (                     $M_B_Isys_ProfRef_RWP_WR2     ) = $B_Isys                 ! Reference system
marker.par (              1 ,       $M_B_Isys_ProfRef_RWP_WR2     ) = $RWP_WR2                ! [-] Rail-Wheel Pair

marker.type (                       $M_Isys_TrackFrame_RWP_WL2    ) = -98                     ! Type
marker.parent (                     $M_Isys_TrackFrame_RWP_WL2    ) = $B_Isys                 ! Reference system
marker.par (              1 ,       $M_Isys_TrackFrame_RWP_WL2    ) = $J_wheelset2            ! [-] Track Joint

marker.type (                       $M_B_Isys_ProfRef_RWP_WL2     ) = -78                     ! Type
marker.parent (                     $M_B_Isys_ProfRef_RWP_WL2     ) = $B_Isys                 ! Reference system
marker.par (              1 ,       $M_B_Isys_ProfRef_RWP_WL2     ) = $RWP_WL2                ! [-] Rail-Wheel Pair

marker.type (                       $M_Isys_TrackFrame_RWP_WR3    ) = -98                     ! Type
marker.parent (                     $M_Isys_TrackFrame_RWP_WR3    ) = $B_Isys                 ! Reference system
marker.par (              1 ,       $M_Isys_TrackFrame_RWP_WR3    ) = $J_wheelset3            ! [-] Track Joint

marker.type (                       $M_B_Isys_ProfRef_RWP_WR3     ) = -78                     ! Type
marker.parent (                     $M_B_Isys_ProfRef_RWP_WR3     ) = $B_Isys                 ! Reference system
marker.par (              1 ,       $M_B_Isys_ProfRef_RWP_WR3     ) = $RWP_WR3                ! [-] Rail-Wheel Pair

marker.type (                       $M_Isys_TrackFrame_RWP_WL3    ) = -98                     ! Type
marker.parent (                     $M_Isys_TrackFrame_RWP_WL3    ) = $B_Isys                 ! Reference system
marker.par (              1 ,       $M_Isys_TrackFrame_RWP_WL3    ) = $J_wheelset3            ! [-] Track Joint

marker.type (                       $M_B_Isys_ProfRef_RWP_WL3     ) = -78                     ! Type
marker.parent (                     $M_B_Isys_ProfRef_RWP_WL3     ) = $B_Isys                 ! Reference system
marker.par (              1 ,       $M_B_Isys_ProfRef_RWP_WL3     ) = $RWP_WL3                ! [-] Rail-Wheel Pair

marker.type (                       $M_Isys_TrackFrame_RWP_WR3_Copy_1) = -98                  ! Type
marker.parent (                     $M_Isys_TrackFrame_RWP_WR3_Copy_1) = $B_Isys              ! Reference system
marker.par (              1 ,       $M_Isys_TrackFrame_RWP_WR3_Copy_1) = $J_wheelset4         ! [-] Track Joint

marker.type (                       $M_B_Isys_ProfRef_RWP_WR3_Copy_1) = -78                   ! Type
marker.parent (                     $M_B_Isys_ProfRef_RWP_WR3_Copy_1) = $B_Isys               ! Reference system
marker.par (              1 ,       $M_B_Isys_ProfRef_RWP_WR3_Copy_1) = $RWP_WR4              ! [-] Rail-Wheel Pair

marker.type (                       $M_Isys_TrackFrame_RWP_WL4    ) = -98                     ! Type
marker.parent (                     $M_Isys_TrackFrame_RWP_WL4    ) = $B_Isys                 ! Reference system
marker.par (              1 ,       $M_Isys_TrackFrame_RWP_WL4    ) = $J_wheelset4            ! [-] Track Joint

marker.type (                       $M_B_Isys_ProfRef_RWP_WL4     ) = -78                     ! Type
marker.parent (                     $M_B_Isys_ProfRef_RWP_WL4     ) = $B_Isys                 ! Reference system
marker.par (              1 ,       $M_B_Isys_ProfRef_RWP_WL4     ) = $RWP_WL4                ! [-] Rail-Wheel Pair

marker.type (                       $M_Isys_load_Fu               ) = -98                     ! Type
marker.parent (                     $M_Isys_load_Fu               ) = $B_Isys                 ! Reference system
marker.par (              1 ,       $M_Isys_load_Fu               ) = $J_Carbody              ! [-] Track Joint
marker.par (              3 ,       $M_Isys_load_Fu               ) = 0.0000000000000000E+00  ! [-] Lock translation in z of Isys
marker.par (              4 ,       $M_Isys_load_Fu               ) = 0.0000000000000000E+00  ! [-] Lock rotation about x of Isys
marker.par (              5 ,       $M_Isys_load_Fu               ) = 0.0000000000000000E+00  ! [-] Lock rotation about y of Isys
marker.par (              6 ,       $M_Isys_load_Fu               ) = 0.0000000000000000E+00  ! [m] Offset in x of Track frame
marker.par (              7 ,       $M_Isys_load_Fu               ) = 0.0000000000000000E+00  ! [m] Offset in y of Track frame
marker.par (              8 ,       $M_Isys_load_Fu               ) = -2.0000000000000000E+00 ! [m] Offset in z of Track frame
marker.par (              9 ,       $M_Isys_load_Fu               ) = 0.0000000000000000E+00  ! [m] Offset in s along Track
marker.par (             10 ,       $M_Isys_load_Fu               ) = 0.0000000000000000E+00  ! [-] Calculate derivatives

prim.type (                         $P_Isys                       ) = 30                      ! Type
prim.ref (                          $P_Isys                       ) = $M_Isys                 ! Reference Marker
prim.color.r (            1 ,       $P_Isys                       ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Isys                       ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Isys                       ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Isys                       ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                3 ,       $P_Isys                       ) = 6.9999998807999997E-01  ! [m] Length

prim.type (                         $P_Isys_track_default         ) = 41                      ! Type
prim.ref (                          $P_Isys_track_default         ) = $M_Isys                 ! Reference Marker
prim.color.r (            1 ,       $P_Isys_track_default         ) = 1.7300000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Isys_track_default         ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Isys_track_default         ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Isys_track_default         ) = 0.0000000000000000E+00  ! Colors (transparency component)

prim.type (                         $P_PS_Damping_4r__3d_         ) = 7                       ! Type
prim.ref (                          $P_PS_Damping_4r__3d_         ) = $M_Bogie2_PtP           ! Reference Marker
prim.ang (                1 ,       $P_PS_Damping_4r__3d_         ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_PS_Damping_4r__3d_         ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_PS_Damping_4r__3d_         ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   1 , $P_PS_Damping_4r__3d_         ) = -1.1999999732000000E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_PS_Damping_4r__3d_         ) = 2.0000000298000001E-01  ! Vertices
prim.vtx (                2 ,   1 , $P_PS_Damping_4r__3d_         ) = 3.9999999106000002E-02  ! Vertices
prim.vtx (                2 ,   2 , $P_PS_Damping_4r__3d_         ) = 3.9999999106000002E-02  ! Vertices
prim.vtx (                3 ,   2 , $P_PS_Damping_4r__3d_         ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_PS_Damping_4r__3d_         ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.r (            2 ,       $P_PS_Damping_4r__3d_         ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Damping_4r__3d_         ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_PS_Damping_4r__3d_         ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Damping_4r__3d_         ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_PS_Damping_4r__3d_         ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Damping_4r__3d_         ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_PS_Damping_4r__3d_         ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.scal.z.type (                  $P_PS_Damping_4r__3d_         ) = 6                       ! Scaling type
prim.scal.z.ele (                   $P_PS_Damping_4r__3d_         ) = $S_PS_Damping_4r__3ds_  ! Scaling element
prim.scal.z.comp (                  $P_PS_Damping_4r__3d_         ) = 4                       ! Scaling component index
prim.scal.z.factor (                $P_PS_Damping_4r__3d_         ) = 2.7027708078519974E+00  ! Scaling factor
prim.par (               11 ,       $P_PS_Damping_4r__3d_         ) = { DIMLESS(0 deg) }      ! [rad] Start angle
prim.par (               12 ,       $P_PS_Damping_4r__3d_         ) = { DIMLESS(0 deg) }      ! [rad] Delta angle
prim.par (               13 ,       $P_PS_Damping_4r__3d_         ) = 5.0000000000000000E+01  ! [-] Number of planes
prim.par (               15 ,       $P_PS_Damping_4r__3d_         ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               16 ,       $P_PS_Damping_4r__3d_         ) = 1.0000000000000000E+00  ! [-] Show top cap
prim.par (               17 ,       $P_PS_Damping_4r__3d_         ) = 1.0000000000000000E+00  ! [-] Show start cross section Cap
prim.par (               18 ,       $P_PS_Damping_4r__3d_         ) = 1.0000000000000000E+00  ! [-] Show end cross Section Cap

prim.type (                         $P_PS_Damping_3l__3d_         ) = 7                       ! Type
prim.ref (                          $P_PS_Damping_3l__3d_         ) = $M_Bogie2_PtP_1         ! Reference Marker
prim.ang (                1 ,       $P_PS_Damping_3l__3d_         ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_PS_Damping_3l__3d_         ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_PS_Damping_3l__3d_         ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   1 , $P_PS_Damping_3l__3d_         ) = -1.1999999732000000E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_PS_Damping_3l__3d_         ) = 2.0000000298000001E-01  ! Vertices
prim.vtx (                2 ,   1 , $P_PS_Damping_3l__3d_         ) = 3.9999999106000002E-02  ! Vertices
prim.vtx (                2 ,   2 , $P_PS_Damping_3l__3d_         ) = 3.9999999106000002E-02  ! Vertices
prim.vtx (                3 ,   2 , $P_PS_Damping_3l__3d_         ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_PS_Damping_3l__3d_         ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.r (            2 ,       $P_PS_Damping_3l__3d_         ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Damping_3l__3d_         ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_PS_Damping_3l__3d_         ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Damping_3l__3d_         ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_PS_Damping_3l__3d_         ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Damping_3l__3d_         ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_PS_Damping_3l__3d_         ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.scal.z.type (                  $P_PS_Damping_3l__3d_         ) = 6                       ! Scaling type
prim.scal.z.ele (                   $P_PS_Damping_3l__3d_         ) = $S_PS_Damping_3l__3ds_  ! Scaling element
prim.scal.z.comp (                  $P_PS_Damping_3l__3d_         ) = 4                       ! Scaling component index
prim.scal.z.factor (                $P_PS_Damping_3l__3d_         ) = 2.7027708078519974E+00  ! Scaling factor
prim.par (               11 ,       $P_PS_Damping_3l__3d_         ) = { DIMLESS(0 deg) }      ! [rad] Start angle
prim.par (               12 ,       $P_PS_Damping_3l__3d_         ) = { DIMLESS(0 deg) }      ! [rad] Delta angle
prim.par (               13 ,       $P_PS_Damping_3l__3d_         ) = 5.0000000000000000E+01  ! [-] Number of planes
prim.par (               15 ,       $P_PS_Damping_3l__3d_         ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               16 ,       $P_PS_Damping_3l__3d_         ) = 1.0000000000000000E+00  ! [-] Show top cap
prim.par (               17 ,       $P_PS_Damping_3l__3d_         ) = 1.0000000000000000E+00  ! [-] Show start cross section Cap
prim.par (               18 ,       $P_PS_Damping_3l__3d_         ) = 1.0000000000000000E+00  ! [-] Show end cross Section Cap

prim.type (                         $P_PS_Damping_3r__3d_         ) = 7                       ! Type
prim.ref (                          $P_PS_Damping_3r__3d_         ) = $M_Bogie2_PtP_2         ! Reference Marker
prim.ang (                1 ,       $P_PS_Damping_3r__3d_         ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_PS_Damping_3r__3d_         ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_PS_Damping_3r__3d_         ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   1 , $P_PS_Damping_3r__3d_         ) = -1.1999999732000000E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_PS_Damping_3r__3d_         ) = 2.0000000298000001E-01  ! Vertices
prim.vtx (                2 ,   1 , $P_PS_Damping_3r__3d_         ) = 3.9999999106000002E-02  ! Vertices
prim.vtx (                2 ,   2 , $P_PS_Damping_3r__3d_         ) = 3.9999999106000002E-02  ! Vertices
prim.vtx (                3 ,   2 , $P_PS_Damping_3r__3d_         ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_PS_Damping_3r__3d_         ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.r (            2 ,       $P_PS_Damping_3r__3d_         ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Damping_3r__3d_         ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_PS_Damping_3r__3d_         ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Damping_3r__3d_         ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_PS_Damping_3r__3d_         ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Damping_3r__3d_         ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_PS_Damping_3r__3d_         ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.scal.z.type (                  $P_PS_Damping_3r__3d_         ) = 6                       ! Scaling type
prim.scal.z.ele (                   $P_PS_Damping_3r__3d_         ) = $S_PS_Damping_3r__3ds_  ! Scaling element
prim.scal.z.comp (                  $P_PS_Damping_3r__3d_         ) = 4                       ! Scaling component index
prim.scal.z.factor (                $P_PS_Damping_3r__3d_         ) = 2.7027708078519974E+00  ! Scaling factor
prim.par (               11 ,       $P_PS_Damping_3r__3d_         ) = { DIMLESS(0 deg) }      ! [rad] Start angle
prim.par (               12 ,       $P_PS_Damping_3r__3d_         ) = { DIMLESS(0 deg) }      ! [rad] Delta angle
prim.par (               13 ,       $P_PS_Damping_3r__3d_         ) = 5.0000000000000000E+01  ! [-] Number of planes
prim.par (               15 ,       $P_PS_Damping_3r__3d_         ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               16 ,       $P_PS_Damping_3r__3d_         ) = 1.0000000000000000E+00  ! [-] Show top cap
prim.par (               17 ,       $P_PS_Damping_3r__3d_         ) = 1.0000000000000000E+00  ! [-] Show start cross section Cap
prim.par (               18 ,       $P_PS_Damping_3r__3d_         ) = 1.0000000000000000E+00  ! [-] Show end cross Section Cap

prim.type (                         $P_PS_Damping_2l__3d_         ) = 7                       ! Type
prim.ref (                          $P_PS_Damping_2l__3d_         ) = $M_Bogie_PtP            ! Reference Marker
prim.ang (                1 ,       $P_PS_Damping_2l__3d_         ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_PS_Damping_2l__3d_         ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_PS_Damping_2l__3d_         ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   1 , $P_PS_Damping_2l__3d_         ) = -1.1999999732000000E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_PS_Damping_2l__3d_         ) = 2.0000000298000001E-01  ! Vertices
prim.vtx (                2 ,   1 , $P_PS_Damping_2l__3d_         ) = 3.9999999106000002E-02  ! Vertices
prim.vtx (                2 ,   2 , $P_PS_Damping_2l__3d_         ) = 3.9999999106000002E-02  ! Vertices
prim.vtx (                3 ,   2 , $P_PS_Damping_2l__3d_         ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_PS_Damping_2l__3d_         ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.r (            2 ,       $P_PS_Damping_2l__3d_         ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Damping_2l__3d_         ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_PS_Damping_2l__3d_         ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Damping_2l__3d_         ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_PS_Damping_2l__3d_         ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Damping_2l__3d_         ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_PS_Damping_2l__3d_         ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.scal.z.type (                  $P_PS_Damping_2l__3d_         ) = 6                       ! Scaling type
prim.scal.z.ele (                   $P_PS_Damping_2l__3d_         ) = $S_PS_Damping_2l__3ds_  ! Scaling element
prim.scal.z.comp (                  $P_PS_Damping_2l__3d_         ) = 4                       ! Scaling component index
prim.scal.z.factor (                $P_PS_Damping_2l__3d_         ) = 2.7027708078519974E+00  ! Scaling factor
prim.par (               11 ,       $P_PS_Damping_2l__3d_         ) = { DIMLESS(0 deg) }      ! [rad] Start angle
prim.par (               12 ,       $P_PS_Damping_2l__3d_         ) = { DIMLESS(0 deg) }      ! [rad] Delta angle
prim.par (               13 ,       $P_PS_Damping_2l__3d_         ) = 5.0000000000000000E+01  ! [-] Number of planes
prim.par (               15 ,       $P_PS_Damping_2l__3d_         ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               16 ,       $P_PS_Damping_2l__3d_         ) = 1.0000000000000000E+00  ! [-] Show top cap
prim.par (               17 ,       $P_PS_Damping_2l__3d_         ) = 1.0000000000000000E+00  ! [-] Show start cross section Cap
prim.par (               18 ,       $P_PS_Damping_2l__3d_         ) = 1.0000000000000000E+00  ! [-] Show end cross Section Cap

prim.type (                         $P_PS_Damping_2r__3d_         ) = 7                       ! Type
prim.ref (                          $P_PS_Damping_2r__3d_         ) = $M_Bogie_PtP_1          ! Reference Marker
prim.ang (                1 ,       $P_PS_Damping_2r__3d_         ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_PS_Damping_2r__3d_         ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_PS_Damping_2r__3d_         ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   1 , $P_PS_Damping_2r__3d_         ) = -1.1999999732000000E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_PS_Damping_2r__3d_         ) = 2.0000000298000001E-01  ! Vertices
prim.vtx (                2 ,   1 , $P_PS_Damping_2r__3d_         ) = 3.9999999106000002E-02  ! Vertices
prim.vtx (                2 ,   2 , $P_PS_Damping_2r__3d_         ) = 3.9999999106000002E-02  ! Vertices
prim.vtx (                3 ,   2 , $P_PS_Damping_2r__3d_         ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_PS_Damping_2r__3d_         ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.r (            2 ,       $P_PS_Damping_2r__3d_         ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Damping_2r__3d_         ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_PS_Damping_2r__3d_         ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Damping_2r__3d_         ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_PS_Damping_2r__3d_         ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Damping_2r__3d_         ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_PS_Damping_2r__3d_         ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.scal.z.type (                  $P_PS_Damping_2r__3d_         ) = 6                       ! Scaling type
prim.scal.z.ele (                   $P_PS_Damping_2r__3d_         ) = $S_PS_Damping_2r__3ds_  ! Scaling element
prim.scal.z.comp (                  $P_PS_Damping_2r__3d_         ) = 4                       ! Scaling component index
prim.scal.z.factor (                $P_PS_Damping_2r__3d_         ) = 2.7027708078519974E+00  ! Scaling factor
prim.par (               11 ,       $P_PS_Damping_2r__3d_         ) = { DIMLESS(0 deg) }      ! [rad] Start angle
prim.par (               12 ,       $P_PS_Damping_2r__3d_         ) = { DIMLESS(0 deg) }      ! [rad] Delta angle
prim.par (               13 ,       $P_PS_Damping_2r__3d_         ) = 5.0000000000000000E+01  ! [-] Number of planes
prim.par (               15 ,       $P_PS_Damping_2r__3d_         ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               16 ,       $P_PS_Damping_2r__3d_         ) = 1.0000000000000000E+00  ! [-] Show top cap
prim.par (               17 ,       $P_PS_Damping_2r__3d_         ) = 1.0000000000000000E+00  ! [-] Show start cross section Cap
prim.par (               18 ,       $P_PS_Damping_2r__3d_         ) = 1.0000000000000000E+00  ! [-] Show end cross Section Cap

prim.type (                         $P_PS_Damping_1l__3d_         ) = 7                       ! Type
prim.ref (                          $P_PS_Damping_1l__3d_         ) = $M_Bogie_PtP_2          ! Reference Marker
prim.ang (                1 ,       $P_PS_Damping_1l__3d_         ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_PS_Damping_1l__3d_         ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_PS_Damping_1l__3d_         ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   1 , $P_PS_Damping_1l__3d_         ) = -1.1999999732000000E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_PS_Damping_1l__3d_         ) = 2.0000000298000001E-01  ! Vertices
prim.vtx (                2 ,   1 , $P_PS_Damping_1l__3d_         ) = 3.9999999106000002E-02  ! Vertices
prim.vtx (                2 ,   2 , $P_PS_Damping_1l__3d_         ) = 3.9999999106000002E-02  ! Vertices
prim.vtx (                3 ,   2 , $P_PS_Damping_1l__3d_         ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_PS_Damping_1l__3d_         ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.r (            2 ,       $P_PS_Damping_1l__3d_         ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Damping_1l__3d_         ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_PS_Damping_1l__3d_         ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Damping_1l__3d_         ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_PS_Damping_1l__3d_         ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Damping_1l__3d_         ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_PS_Damping_1l__3d_         ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.scal.z.type (                  $P_PS_Damping_1l__3d_         ) = 6                       ! Scaling type
prim.scal.z.ele (                   $P_PS_Damping_1l__3d_         ) = $S_PS_Damping_1l__3ds_  ! Scaling element
prim.scal.z.comp (                  $P_PS_Damping_1l__3d_         ) = 4                       ! Scaling component index
prim.scal.z.factor (                $P_PS_Damping_1l__3d_         ) = 2.7027708078519974E+00  ! Scaling factor
prim.par (               11 ,       $P_PS_Damping_1l__3d_         ) = { DIMLESS(0 deg) }      ! [rad] Start angle
prim.par (               12 ,       $P_PS_Damping_1l__3d_         ) = { DIMLESS(0 deg) }      ! [rad] Delta angle
prim.par (               13 ,       $P_PS_Damping_1l__3d_         ) = 5.0000000000000000E+01  ! [-] Number of planes
prim.par (               15 ,       $P_PS_Damping_1l__3d_         ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               16 ,       $P_PS_Damping_1l__3d_         ) = 1.0000000000000000E+00  ! [-] Show top cap
prim.par (               17 ,       $P_PS_Damping_1l__3d_         ) = 1.0000000000000000E+00  ! [-] Show start cross section Cap
prim.par (               18 ,       $P_PS_Damping_1l__3d_         ) = 1.0000000000000000E+00  ! [-] Show end cross Section Cap

prim.type (                         $P_PS_Damping_1r__3d_         ) = 7                       ! Type
prim.ref (                          $P_PS_Damping_1r__3d_         ) = $M_Bogie_PtP_3          ! Reference Marker
prim.ang (                1 ,       $P_PS_Damping_1r__3d_         ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_PS_Damping_1r__3d_         ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_PS_Damping_1r__3d_         ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   1 , $P_PS_Damping_1r__3d_         ) = -1.1999999732000000E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_PS_Damping_1r__3d_         ) = 2.0000000298000001E-01  ! Vertices
prim.vtx (                2 ,   1 , $P_PS_Damping_1r__3d_         ) = 3.9999999106000002E-02  ! Vertices
prim.vtx (                2 ,   2 , $P_PS_Damping_1r__3d_         ) = 3.9999999106000002E-02  ! Vertices
prim.vtx (                3 ,   2 , $P_PS_Damping_1r__3d_         ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_PS_Damping_1r__3d_         ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.r (            2 ,       $P_PS_Damping_1r__3d_         ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Damping_1r__3d_         ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_PS_Damping_1r__3d_         ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Damping_1r__3d_         ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_PS_Damping_1r__3d_         ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Damping_1r__3d_         ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_PS_Damping_1r__3d_         ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.scal.z.type (                  $P_PS_Damping_1r__3d_         ) = 6                       ! Scaling type
prim.scal.z.ele (                   $P_PS_Damping_1r__3d_         ) = $S_PS_Damping_1r__3ds_  ! Scaling element
prim.scal.z.comp (                  $P_PS_Damping_1r__3d_         ) = 4                       ! Scaling component index
prim.scal.z.factor (                $P_PS_Damping_1r__3d_         ) = 2.7027708078519974E+00  ! Scaling factor
prim.par (               11 ,       $P_PS_Damping_1r__3d_         ) = { DIMLESS(0 deg) }      ! [rad] Start angle
prim.par (               12 ,       $P_PS_Damping_1r__3d_         ) = { DIMLESS(0 deg) }      ! [rad] Delta angle
prim.par (               13 ,       $P_PS_Damping_1r__3d_         ) = 5.0000000000000000E+01  ! [-] Number of planes
prim.par (               15 ,       $P_PS_Damping_1r__3d_         ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               16 ,       $P_PS_Damping_1r__3d_         ) = 1.0000000000000000E+00  ! [-] Show top cap
prim.par (               17 ,       $P_PS_Damping_1r__3d_         ) = 1.0000000000000000E+00  ! [-] Show start cross section Cap
prim.par (               18 ,       $P_PS_Damping_1r__3d_         ) = 1.0000000000000000E+00  ! [-] Show end cross Section Cap

prim.type (                         $P_SS_KSX_1l__3d_             ) = 7                       ! Type
prim.ref (                          $P_SS_KSX_1l__3d_             ) = $M_Carbody_PtP          ! Reference Marker
prim.ang (                1 ,       $P_SS_KSX_1l__3d_             ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_SS_KSX_1l__3d_             ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_SS_KSX_1l__3d_             ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   2 , $P_SS_KSX_1l__3d_             ) = 3.4999999403999998E-01  ! Vertices
prim.vtx (                2 ,   1 , $P_SS_KSX_1l__3d_             ) = 5.0000000745000002E-02  ! Vertices
prim.vtx (                2 ,   2 , $P_SS_KSX_1l__3d_             ) = 5.0000000745000002E-02  ! Vertices
prim.vtx (                3 ,   2 , $P_SS_KSX_1l__3d_             ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_SS_KSX_1l__3d_             ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.r (            2 ,       $P_SS_KSX_1l__3d_             ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_SS_KSX_1l__3d_             ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_SS_KSX_1l__3d_             ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_SS_KSX_1l__3d_             ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_SS_KSX_1l__3d_             ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_SS_KSX_1l__3d_             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_SS_KSX_1l__3d_             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.scal.z.type (                  $P_SS_KSX_1l__3d_             ) = 6                       ! Scaling type
prim.scal.z.ele (                   $P_SS_KSX_1l__3d_             ) = $S_SS_KSX_1l__3ds_      ! Scaling element
prim.scal.z.comp (                  $P_SS_KSX_1l__3d_             ) = 4                       ! Scaling component index
prim.scal.z.factor (                $P_SS_KSX_1l__3d_             ) = 1.5151514549357232E+00  ! Scaling factor
prim.par (               11 ,       $P_SS_KSX_1l__3d_             ) = { DIMLESS(0 deg) }      ! [rad] Start angle
prim.par (               12 ,       $P_SS_KSX_1l__3d_             ) = { DIMLESS(0 deg) }      ! [rad] Delta angle
prim.par (               13 ,       $P_SS_KSX_1l__3d_             ) = 5.0000000000000000E+01  ! [-] Number of planes
prim.par (               15 ,       $P_SS_KSX_1l__3d_             ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               16 ,       $P_SS_KSX_1l__3d_             ) = 1.0000000000000000E+00  ! [-] Show top cap
prim.par (               17 ,       $P_SS_KSX_1l__3d_             ) = 1.0000000000000000E+00  ! [-] Show start cross section Cap
prim.par (               18 ,       $P_SS_KSX_1l__3d_             ) = 1.0000000000000000E+00  ! [-] Show end cross Section Cap

prim.type (                         $P_SS_KSX_1r__3d_             ) = 7                       ! Type
prim.ref (                          $P_SS_KSX_1r__3d_             ) = $M_Carbody_PtP_1        ! Reference Marker
prim.ang (                1 ,       $P_SS_KSX_1r__3d_             ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_SS_KSX_1r__3d_             ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_SS_KSX_1r__3d_             ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   2 , $P_SS_KSX_1r__3d_             ) = 3.4999999403999998E-01  ! Vertices
prim.vtx (                2 ,   1 , $P_SS_KSX_1r__3d_             ) = 5.0000000745000002E-02  ! Vertices
prim.vtx (                2 ,   2 , $P_SS_KSX_1r__3d_             ) = 5.0000000745000002E-02  ! Vertices
prim.vtx (                3 ,   2 , $P_SS_KSX_1r__3d_             ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_SS_KSX_1r__3d_             ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.r (            2 ,       $P_SS_KSX_1r__3d_             ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_SS_KSX_1r__3d_             ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_SS_KSX_1r__3d_             ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_SS_KSX_1r__3d_             ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_SS_KSX_1r__3d_             ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_SS_KSX_1r__3d_             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_SS_KSX_1r__3d_             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.scal.z.type (                  $P_SS_KSX_1r__3d_             ) = 6                       ! Scaling type
prim.scal.z.ele (                   $P_SS_KSX_1r__3d_             ) = $S_SS_KSX_1r__3ds_      ! Scaling element
prim.scal.z.comp (                  $P_SS_KSX_1r__3d_             ) = 4                       ! Scaling component index
prim.scal.z.factor (                $P_SS_KSX_1r__3d_             ) = 1.5151514549357232E+00  ! Scaling factor
prim.par (               11 ,       $P_SS_KSX_1r__3d_             ) = { DIMLESS(0 deg) }      ! [rad] Start angle
prim.par (               12 ,       $P_SS_KSX_1r__3d_             ) = { DIMLESS(0 deg) }      ! [rad] Delta angle
prim.par (               13 ,       $P_SS_KSX_1r__3d_             ) = 5.0000000000000000E+01  ! [-] Number of planes
prim.par (               15 ,       $P_SS_KSX_1r__3d_             ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               16 ,       $P_SS_KSX_1r__3d_             ) = 1.0000000000000000E+00  ! [-] Show top cap
prim.par (               17 ,       $P_SS_KSX_1r__3d_             ) = 1.0000000000000000E+00  ! [-] Show start cross section Cap
prim.par (               18 ,       $P_SS_KSX_1r__3d_             ) = 1.0000000000000000E+00  ! [-] Show end cross Section Cap

prim.type (                         $P_SS_KSX_2l__3d_             ) = 7                       ! Type
prim.ref (                          $P_SS_KSX_2l__3d_             ) = $M_Carbody_PtP_2        ! Reference Marker
prim.ang (                1 ,       $P_SS_KSX_2l__3d_             ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_SS_KSX_2l__3d_             ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_SS_KSX_2l__3d_             ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   2 , $P_SS_KSX_2l__3d_             ) = 3.4999999403999998E-01  ! Vertices
prim.vtx (                2 ,   1 , $P_SS_KSX_2l__3d_             ) = 5.0000000745000002E-02  ! Vertices
prim.vtx (                2 ,   2 , $P_SS_KSX_2l__3d_             ) = 5.0000000745000002E-02  ! Vertices
prim.vtx (                3 ,   2 , $P_SS_KSX_2l__3d_             ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_SS_KSX_2l__3d_             ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.r (            2 ,       $P_SS_KSX_2l__3d_             ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_SS_KSX_2l__3d_             ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_SS_KSX_2l__3d_             ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_SS_KSX_2l__3d_             ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_SS_KSX_2l__3d_             ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_SS_KSX_2l__3d_             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_SS_KSX_2l__3d_             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.scal.z.type (                  $P_SS_KSX_2l__3d_             ) = 6                       ! Scaling type
prim.scal.z.ele (                   $P_SS_KSX_2l__3d_             ) = $S_SS_KSX_2l__3ds_      ! Scaling element
prim.scal.z.comp (                  $P_SS_KSX_2l__3d_             ) = 4                       ! Scaling component index
prim.scal.z.factor (                $P_SS_KSX_2l__3d_             ) = 1.5151514549357232E+00  ! Scaling factor
prim.par (               11 ,       $P_SS_KSX_2l__3d_             ) = { 0 deg }               ! [rad] Start angle
prim.par (               12 ,       $P_SS_KSX_2l__3d_             ) = { 0 deg }               ! [rad] Delta angle
prim.par (               13 ,       $P_SS_KSX_2l__3d_             ) = 5.0000000000000000E+01  ! [-] Number of planes
prim.par (               15 ,       $P_SS_KSX_2l__3d_             ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               16 ,       $P_SS_KSX_2l__3d_             ) = 1.0000000000000000E+00  ! [-] Show top cap
prim.par (               17 ,       $P_SS_KSX_2l__3d_             ) = 1.0000000000000000E+00  ! [-] Show start cross section Cap
prim.par (               18 ,       $P_SS_KSX_2l__3d_             ) = 1.0000000000000000E+00  ! [-] Show end cross Section Cap

prim.type (                         $P_SS_KSX_2r__3d_             ) = 7                       ! Type
prim.ref (                          $P_SS_KSX_2r__3d_             ) = $M_Carbody_PtP_3        ! Reference Marker
prim.ang (                1 ,       $P_SS_KSX_2r__3d_             ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_SS_KSX_2r__3d_             ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_SS_KSX_2r__3d_             ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   2 , $P_SS_KSX_2r__3d_             ) = 3.4999999403999998E-01  ! Vertices
prim.vtx (                2 ,   1 , $P_SS_KSX_2r__3d_             ) = 5.0000000745000002E-02  ! Vertices
prim.vtx (                2 ,   2 , $P_SS_KSX_2r__3d_             ) = 5.0000000745000002E-02  ! Vertices
prim.vtx (                3 ,   2 , $P_SS_KSX_2r__3d_             ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_SS_KSX_2r__3d_             ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.r (            2 ,       $P_SS_KSX_2r__3d_             ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_SS_KSX_2r__3d_             ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_SS_KSX_2r__3d_             ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_SS_KSX_2r__3d_             ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_SS_KSX_2r__3d_             ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_SS_KSX_2r__3d_             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_SS_KSX_2r__3d_             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.scal.z.type (                  $P_SS_KSX_2r__3d_             ) = 6                       ! Scaling type
prim.scal.z.ele (                   $P_SS_KSX_2r__3d_             ) = $S_SS_KSX_2r__3ds_      ! Scaling element
prim.scal.z.comp (                  $P_SS_KSX_2r__3d_             ) = 4                       ! Scaling component index
prim.scal.z.factor (                $P_SS_KSX_2r__3d_             ) = 1.5151514549357232E+00  ! Scaling factor
prim.par (               11 ,       $P_SS_KSX_2r__3d_             ) = { DIMLESS(0 deg) }      ! [rad] Start angle
prim.par (               12 ,       $P_SS_KSX_2r__3d_             ) = { DIMLESS(0 deg) }      ! [rad] Delta angle
prim.par (               13 ,       $P_SS_KSX_2r__3d_             ) = 5.0000000000000000E+01  ! [-] Number of planes
prim.par (               15 ,       $P_SS_KSX_2r__3d_             ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               16 ,       $P_SS_KSX_2r__3d_             ) = 1.0000000000000000E+00  ! [-] Show top cap
prim.par (               17 ,       $P_SS_KSX_2r__3d_             ) = 1.0000000000000000E+00  ! [-] Show start cross section Cap
prim.par (               18 ,       $P_SS_KSX_2r__3d_             ) = 1.0000000000000000E+00  ! [-] Show end cross Section Cap

prim.type (                         $P_SS_HX_1__3d_               ) = 7                       ! Type
prim.ref (                          $P_SS_HX_1__3d_               ) = $M_Carbody_PtP_4        ! Reference Marker
prim.ang (                1 ,       $P_SS_HX_1__3d_               ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_SS_HX_1__3d_               ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_SS_HX_1__3d_               ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   2 , $P_SS_HX_1__3d_               ) = 2.3999999463999999E-01  ! Vertices
prim.vtx (                2 ,   1 , $P_SS_HX_1__3d_               ) = 5.0000000745000002E-02  ! Vertices
prim.vtx (                2 ,   2 , $P_SS_HX_1__3d_               ) = 5.0000000745000002E-02  ! Vertices
prim.vtx (                3 ,   2 , $P_SS_HX_1__3d_               ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_SS_HX_1__3d_               ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.r (            2 ,       $P_SS_HX_1__3d_               ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_SS_HX_1__3d_               ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_SS_HX_1__3d_               ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_SS_HX_1__3d_               ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_SS_HX_1__3d_               ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_SS_HX_1__3d_               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_SS_HX_1__3d_               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.scal.z.type (                  $P_SS_HX_1__3d_               ) = 6                       ! Scaling type
prim.scal.z.ele (                   $P_SS_HX_1__3d_               ) = $S_SS_HX_1__3ds_        ! Scaling element
prim.scal.z.comp (                  $P_SS_HX_1__3d_               ) = 4                       ! Scaling component index
prim.scal.z.factor (                $P_SS_HX_1__3d_               ) = 2.1970382859484308E+00  ! Scaling factor
prim.par (               11 ,       $P_SS_HX_1__3d_               ) = { DIMLESS(0 deg) }      ! [rad] Start angle
prim.par (               12 ,       $P_SS_HX_1__3d_               ) = { DIMLESS(0 deg) }      ! [rad] Delta angle
prim.par (               13 ,       $P_SS_HX_1__3d_               ) = 5.0000000000000000E+01  ! [-] Number of planes
prim.par (               15 ,       $P_SS_HX_1__3d_               ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               16 ,       $P_SS_HX_1__3d_               ) = 1.0000000000000000E+00  ! [-] Show top cap
prim.par (               17 ,       $P_SS_HX_1__3d_               ) = 1.0000000000000000E+00  ! [-] Show start cross section Cap
prim.par (               18 ,       $P_SS_HX_1__3d_               ) = 1.0000000000000000E+00  ! [-] Show end cross Section Cap

prim.type (                         $P_SS_HX_2__3d_               ) = 7                       ! Type
prim.ref (                          $P_SS_HX_2__3d_               ) = $M_Carbody_PtP_5        ! Reference Marker
prim.ang (                1 ,       $P_SS_HX_2__3d_               ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_SS_HX_2__3d_               ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_SS_HX_2__3d_               ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   2 , $P_SS_HX_2__3d_               ) = 2.3999999463999999E-01  ! Vertices
prim.vtx (                2 ,   1 , $P_SS_HX_2__3d_               ) = 5.0000000745000002E-02  ! Vertices
prim.vtx (                2 ,   2 , $P_SS_HX_2__3d_               ) = 5.0000000745000002E-02  ! Vertices
prim.vtx (                3 ,   2 , $P_SS_HX_2__3d_               ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_SS_HX_2__3d_               ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.r (            2 ,       $P_SS_HX_2__3d_               ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_SS_HX_2__3d_               ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_SS_HX_2__3d_               ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_SS_HX_2__3d_               ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_SS_HX_2__3d_               ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_SS_HX_2__3d_               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_SS_HX_2__3d_               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.scal.z.type (                  $P_SS_HX_2__3d_               ) = 6                       ! Scaling type
prim.scal.z.ele (                   $P_SS_HX_2__3d_               ) = $S_SS_HX_2__3ds_        ! Scaling element
prim.scal.z.comp (                  $P_SS_HX_2__3d_               ) = 4                       ! Scaling component index
prim.scal.z.factor (                $P_SS_HX_2__3d_               ) = 2.1970382859484308E+00  ! Scaling factor
prim.par (               11 ,       $P_SS_HX_2__3d_               ) = { DIMLESS(0 deg) }      ! [rad] Start angle
prim.par (               12 ,       $P_SS_HX_2__3d_               ) = { DIMLESS(0 deg) }      ! [rad] Delta angle
prim.par (               13 ,       $P_SS_HX_2__3d_               ) = 5.0000000000000000E+01  ! [-] Number of planes
prim.par (               15 ,       $P_SS_HX_2__3d_               ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               16 ,       $P_SS_HX_2__3d_               ) = 1.0000000000000000E+00  ! [-] Show top cap
prim.par (               17 ,       $P_SS_HX_2__3d_               ) = 1.0000000000000000E+00  ! [-] Show start cross section Cap
prim.par (               18 ,       $P_SS_HX_2__3d_               ) = 1.0000000000000000E+00  ! [-] Show end cross Section Cap

prim.type (                         $P_SS_HX_3__3d_               ) = 7                       ! Type
prim.ref (                          $P_SS_HX_3__3d_               ) = $M_Carbody_PtP_6        ! Reference Marker
prim.ang (                1 ,       $P_SS_HX_3__3d_               ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_SS_HX_3__3d_               ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_SS_HX_3__3d_               ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   2 , $P_SS_HX_3__3d_               ) = 2.3999999463999999E-01  ! Vertices
prim.vtx (                2 ,   1 , $P_SS_HX_3__3d_               ) = 5.0000000745000002E-02  ! Vertices
prim.vtx (                2 ,   2 , $P_SS_HX_3__3d_               ) = 5.0000000745000002E-02  ! Vertices
prim.vtx (                3 ,   2 , $P_SS_HX_3__3d_               ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_SS_HX_3__3d_               ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.r (            2 ,       $P_SS_HX_3__3d_               ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_SS_HX_3__3d_               ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_SS_HX_3__3d_               ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_SS_HX_3__3d_               ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_SS_HX_3__3d_               ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_SS_HX_3__3d_               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_SS_HX_3__3d_               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.scal.z.type (                  $P_SS_HX_3__3d_               ) = 6                       ! Scaling type
prim.scal.z.ele (                   $P_SS_HX_3__3d_               ) = $S_SS_HX_3__3ds_        ! Scaling element
prim.scal.z.comp (                  $P_SS_HX_3__3d_               ) = 4                       ! Scaling component index
prim.scal.z.factor (                $P_SS_HX_3__3d_               ) = 2.1970382859484308E+00  ! Scaling factor
prim.par (               11 ,       $P_SS_HX_3__3d_               ) = { 0 deg }               ! [rad] Start angle
prim.par (               12 ,       $P_SS_HX_3__3d_               ) = { 0 deg }               ! [rad] Delta angle
prim.par (               13 ,       $P_SS_HX_3__3d_               ) = 5.0000000000000000E+01  ! [-] Number of planes
prim.par (               15 ,       $P_SS_HX_3__3d_               ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               16 ,       $P_SS_HX_3__3d_               ) = 1.0000000000000000E+00  ! [-] Show top cap
prim.par (               17 ,       $P_SS_HX_3__3d_               ) = 1.0000000000000000E+00  ! [-] Show start cross section Cap
prim.par (               18 ,       $P_SS_HX_3__3d_               ) = 1.0000000000000000E+00  ! [-] Show end cross Section Cap

prim.type (                         $P_SS_HX_4__3d_               ) = 7                       ! Type
prim.ref (                          $P_SS_HX_4__3d_               ) = $M_Carbody_PtP_7        ! Reference Marker
prim.ang (                1 ,       $P_SS_HX_4__3d_               ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_SS_HX_4__3d_               ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_SS_HX_4__3d_               ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   2 , $P_SS_HX_4__3d_               ) = 2.3999999463999999E-01  ! Vertices
prim.vtx (                2 ,   1 , $P_SS_HX_4__3d_               ) = 5.0000000745000002E-02  ! Vertices
prim.vtx (                2 ,   2 , $P_SS_HX_4__3d_               ) = 5.0000000745000002E-02  ! Vertices
prim.vtx (                3 ,   2 , $P_SS_HX_4__3d_               ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_SS_HX_4__3d_               ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.r (            2 ,       $P_SS_HX_4__3d_               ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_SS_HX_4__3d_               ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_SS_HX_4__3d_               ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_SS_HX_4__3d_               ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_SS_HX_4__3d_               ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_SS_HX_4__3d_               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_SS_HX_4__3d_               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.scal.z.type (                  $P_SS_HX_4__3d_               ) = 6                       ! Scaling type
prim.scal.z.ele (                   $P_SS_HX_4__3d_               ) = $S_SS_HX_4__3ds_        ! Scaling element
prim.scal.z.comp (                  $P_SS_HX_4__3d_               ) = 4                       ! Scaling component index
prim.scal.z.factor (                $P_SS_HX_4__3d_               ) = 2.1970382859484308E+00  ! Scaling factor
prim.par (               11 ,       $P_SS_HX_4__3d_               ) = { DIMLESS(0 deg) }      ! [rad] Start angle
prim.par (               12 ,       $P_SS_HX_4__3d_               ) = { DIMLESS(0 deg) }      ! [rad] Delta angle
prim.par (               13 ,       $P_SS_HX_4__3d_               ) = 5.0000000000000000E+01  ! [-] Number of planes
prim.par (               15 ,       $P_SS_HX_4__3d_               ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               16 ,       $P_SS_HX_4__3d_               ) = 1.0000000000000000E+00  ! [-] Show top cap
prim.par (               17 ,       $P_SS_HX_4__3d_               ) = 1.0000000000000000E+00  ! [-] Show start cross section Cap
prim.par (               18 ,       $P_SS_HX_4__3d_               ) = 1.0000000000000000E+00  ! [-] Show end cross Section Cap

prim.type (                         $P_B_Isys_ProfRef_RWP_WR1     ) = 79                      ! Type
prim.ref (                          $P_B_Isys_ProfRef_RWP_WR1     ) = $M_B_Isys_ProfRef_RWP_WR1 ! Reference Marker
prim.color.r (            1 ,       $P_B_Isys_ProfRef_RWP_WR1     ) = 1.0700000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_B_Isys_ProfRef_RWP_WR1     ) = 1.0700000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_B_Isys_ProfRef_RWP_WR1     ) = 1.0700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_B_Isys_ProfRef_RWP_WR1     ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                1 ,       $P_B_Isys_ProfRef_RWP_WR1     ) = $RWP_WR1                ! [-] Rail-wheel pair

prim.type (                         $P_B_Isys_ProfRef_RWP_WL1     ) = 79                      ! Type
prim.ref (                          $P_B_Isys_ProfRef_RWP_WL1     ) = $M_B_Isys_ProfRef_RWP_WL1 ! Reference Marker
prim.color.r (            1 ,       $P_B_Isys_ProfRef_RWP_WL1     ) = 1.0700000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_B_Isys_ProfRef_RWP_WL1     ) = 1.0700000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_B_Isys_ProfRef_RWP_WL1     ) = 1.0700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_B_Isys_ProfRef_RWP_WL1     ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                1 ,       $P_B_Isys_ProfRef_RWP_WL1     ) = $RWP_WL1                ! [-] Rail-wheel pair

prim.type (                         $P_B_Isys_ProfRef_RWP_WR2     ) = 79                      ! Type
prim.ref (                          $P_B_Isys_ProfRef_RWP_WR2     ) = $M_B_Isys_ProfRef_RWP_WR2 ! Reference Marker
prim.color.r (            1 ,       $P_B_Isys_ProfRef_RWP_WR2     ) = 1.0700000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_B_Isys_ProfRef_RWP_WR2     ) = 1.0700000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_B_Isys_ProfRef_RWP_WR2     ) = 1.0700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_B_Isys_ProfRef_RWP_WR2     ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                1 ,       $P_B_Isys_ProfRef_RWP_WR2     ) = $RWP_WR2                ! [-] Rail-wheel pair

prim.type (                         $P_B_Isys_ProfRef_RWP_WL2     ) = 79                      ! Type
prim.ref (                          $P_B_Isys_ProfRef_RWP_WL2     ) = $M_B_Isys_ProfRef_RWP_WL2 ! Reference Marker
prim.color.r (            1 ,       $P_B_Isys_ProfRef_RWP_WL2     ) = 1.0700000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_B_Isys_ProfRef_RWP_WL2     ) = 1.0700000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_B_Isys_ProfRef_RWP_WL2     ) = 1.0700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_B_Isys_ProfRef_RWP_WL2     ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                1 ,       $P_B_Isys_ProfRef_RWP_WL2     ) = $RWP_WL2                ! [-] Rail-wheel pair

prim.type (                         $P_B_Isys_ProfRef_RWP_WR3     ) = 79                      ! Type
prim.ref (                          $P_B_Isys_ProfRef_RWP_WR3     ) = $M_B_Isys_ProfRef_RWP_WR3 ! Reference Marker
prim.color.r (            1 ,       $P_B_Isys_ProfRef_RWP_WR3     ) = 1.0700000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_B_Isys_ProfRef_RWP_WR3     ) = 1.0700000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_B_Isys_ProfRef_RWP_WR3     ) = 1.0700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_B_Isys_ProfRef_RWP_WR3     ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                1 ,       $P_B_Isys_ProfRef_RWP_WR3     ) = $RWP_WR3                ! [-] Rail-wheel pair

prim.type (                         $P_B_Isys_ProfRef_RWP_WL3     ) = 79                      ! Type
prim.ref (                          $P_B_Isys_ProfRef_RWP_WL3     ) = $M_B_Isys_ProfRef_RWP_WL3 ! Reference Marker
prim.color.r (            1 ,       $P_B_Isys_ProfRef_RWP_WL3     ) = 1.0700000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_B_Isys_ProfRef_RWP_WL3     ) = 1.0700000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_B_Isys_ProfRef_RWP_WL3     ) = 1.0700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_B_Isys_ProfRef_RWP_WL3     ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                1 ,       $P_B_Isys_ProfRef_RWP_WL3     ) = $RWP_WL3                ! [-] Rail-wheel pair

prim.type (                         $P_B_Isys_ProfRef_RWP_WR3_Copy_1) = 79                    ! Type
prim.ref (                          $P_B_Isys_ProfRef_RWP_WR3_Copy_1) = $M_B_Isys_ProfRef_RWP_WR3_Copy_1 ! Reference Marker
prim.color.r (            1 ,       $P_B_Isys_ProfRef_RWP_WR3_Copy_1) = 1.0700000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_B_Isys_ProfRef_RWP_WR3_Copy_1) = 1.0700000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_B_Isys_ProfRef_RWP_WR3_Copy_1) = 1.0700000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_B_Isys_ProfRef_RWP_WR3_Copy_1) = 0.0000000000000000E+00 ! Colors (transparency component)
prim.par (                1 ,       $P_B_Isys_ProfRef_RWP_WR3_Copy_1) = $RWP_WR4              ! [-] Rail-wheel pair

prim.type (                         $P_B_Isys_ProfRef_RWP_WL4     ) = 79                      ! Type
prim.ref (                          $P_B_Isys_ProfRef_RWP_WL4     ) = $M_B_Isys_ProfRef_RWP_WL4 ! Reference Marker
prim.color.r (            1 ,       $P_B_Isys_ProfRef_RWP_WL4     ) = 1.0700000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_B_Isys_ProfRef_RWP_WL4     ) = 1.0700000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_B_Isys_ProfRef_RWP_WL4     ) = 1.0700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_B_Isys_ProfRef_RWP_WL4     ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                1 ,       $P_B_Isys_ProfRef_RWP_WL4     ) = $RWP_WL4                ! [-] Rail-wheel pair


!**********************************************************************
! Bodies
!**********************************************************************
body.m (                            $B_wheelset4                  ) = 1.9018000488000000E+03  ! Mass of the Body
body.I.tens (             1 ,   1 , $B_wheelset4                  ) = 6.8500000000000000E+02  ! Moments of inertia
body.I.tens (             2 ,   2 , $B_wheelset4                  ) = 7.6000000000000000E+01  ! Moments of inertia
body.I.tens (             3 ,   3 , $B_wheelset4                  ) = 6.8500000000000000E+02  ! Moments of inertia
body.I.kind (                       $B_wheelset4                  ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.I.ref (                        $B_wheelset4                  ) = null                    ! Inertia Reference Marker
body.type (                         $B_wheelset4                  ) = 0                       ! Body type: 0=rigid; 1=flex modal; 2=SIMBEAM; 4=nonlinear SIMBEAM
body.txt (                          $B_wheelset4                  ) = 'colour of SIMPACK_logo set to -1 in ani file' ! Comment
body.attr.2d.pos.x (                $B_wheelset4                  ) = -5.2300000000000000E+03
body.attr.2d.pos.y (                $B_wheelset4                  ) = -2.0000000000000000E+01
body.attr.2d.width (                $B_wheelset4                  ) = 5.0000000000000000E+01
body.attr.2d.height (               $B_wheelset4                  ) = 3.0000000000000000E+01

marker.type (                       $M_wheelset4                  ) = 1                       ! Type
marker.parent (                     $M_wheelset4                  ) = $B_wheelset4            ! Body

marker.type (                       $M_wheelset4_l                ) = 1                       ! Type
marker.parent (                     $M_wheelset4_l                ) = $B_wheelset4            ! Body
marker.pos (              2 ,       $M_wheelset4_l                ) = -1.0000000000000000E+00 ! Position

marker.type (                       $M_wheelset4_r                ) = 1                       ! Type
marker.parent (                     $M_wheelset4_r                ) = $B_wheelset4            ! Body
marker.pos (              2 ,       $M_wheelset4_r                ) = 1.0000000000000000E+00  ! Position

marker.type (                       $M_wheelset4_BRF              ) = 1                       ! Type
marker.parent (                     $M_wheelset4_BRF              ) = $B_wheelset4            ! Body
marker.flx.type (                   $M_wheelset4_BRF              ) = 4                       ! Flexible type

marker.type (                       $M_B_wheelset4_ProfRef_RWP_WR3_Copy_1) = -78              ! Type
marker.parent (                     $M_B_wheelset4_ProfRef_RWP_WR3_Copy_1) = $B_wheelset4     ! Body
marker.par (              1 ,       $M_B_wheelset4_ProfRef_RWP_WR3_Copy_1) = $RWP_WR4         ! [-] Rail-Wheel Pair

marker.type (                       $M_B_wheelset4_ProfRef_RWP_WL4) = -78                     ! Type
marker.parent (                     $M_B_wheelset4_ProfRef_RWP_WL4) = $B_wheelset4            ! Body
marker.par (              1 ,       $M_B_wheelset4_ProfRef_RWP_WL4) = $RWP_WL4                ! [-] Rail-Wheel Pair

joint.from (                        $J_wheelset4                  ) = $M_Isys                 ! From Marker
joint.to (                          $J_wheelset4                  ) = $M_wheelset4            ! To Marker
joint.type (                        $J_wheelset4                  ) = 7                       ! Type
joint.st.pos (            1 ,       $J_wheelset4                  ) = 0.0000000000000000E+00  ! Position
joint.st.pos (            2 ,       $J_wheelset4                  ) = 0.0000000000000000E+00  ! Position
joint.st.pos (            3 ,       $J_wheelset4                  ) = -4.2977271891000002E-01 ! Position
joint.st.pos (            4 ,       $J_wheelset4                  ) = -5.3336554850000000E-15 ! Position
joint.st.pos (            5 ,       $J_wheelset4                  ) = 0.0000000000000000E+00  ! Position
joint.st.pos (            6 ,       $J_wheelset4                  ) = 0.0000000000000000E+00  ! Position
joint.st.vel (            1 ,       $J_wheelset4                  ) = 1.3888888888888889E+01  ! Velocity
joint.st.vel (            2 ,       $J_wheelset4                  ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            3 ,       $J_wheelset4                  ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            4 ,       $J_wheelset4                  ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            5 ,       $J_wheelset4                  ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            6 ,       $J_wheelset4                  ) = -3.2318788745134782E+01 ! Velocity
joint.st.dep (            1 ,       $J_wheelset4                  ) = 0                       ! Dependency state
joint.st.dep (            2 ,       $J_wheelset4                  ) = 0                       ! Dependency state
joint.st.dep (            3 ,       $J_wheelset4                  ) = 1                       ! Dependency state
joint.st.dep (            4 ,       $J_wheelset4                  ) = 1                       ! Dependency state
joint.st.dep (            5 ,       $J_wheelset4                  ) = 0                       ! Dependency state
joint.st.dep (            6 ,       $J_wheelset4                  ) = 0                       ! Dependency state
joint.st.equi (           6 ,       $J_wheelset4                  ) = 2                       ! Equilibrium
joint.par (               3 ,       $J_wheelset4                  ) = 0.0000000000000000E+00  ! [-] Degrees of freedom
joint.attr.2d.pos.x (     1 ,       $J_wheelset4                  ) = -2940
joint.attr.2d.pos.y (     1 ,       $J_wheelset4                  ) = -20
joint.attr.2d.ori (       1 ,       $J_wheelset4                  ) = 90
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_wheelset4       ) = -2940, -2940
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_wheelset4       ) = -160, -37
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_wheelset4         ) = -5180, -5164.0625, -5164.0625, -5146.25, -5075, -5075, -5075, -5040, -4620, -2940, -2940
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_wheelset4         ) = 0, 0, 20, 20, 20, 10, 0, 0, 0, 0, -3

prim.type (                         $P_wheelset4_Cuboid           ) = 2                       ! Type
prim.ref (                          $P_wheelset4_Cuboid           ) = $M_wheelset4            ! Reference Marker
prim.color.r (            1 ,       $P_wheelset4_Cuboid           ) = 0.0000000000000000E+00  ! Colors (red component)
prim.color.r (            2 ,       $P_wheelset4_Cuboid           ) = 0.0000000000000000E+00  ! Colors (red component)
prim.color.g (            1 ,       $P_wheelset4_Cuboid           ) = 4.6000000000000000E+01  ! Colors (green component)
prim.color.g (            2 ,       $P_wheelset4_Cuboid           ) = 4.6000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_wheelset4_Cuboid           ) = 9.2000000000000000E+01  ! Colors (blue component)
prim.color.b (            2 ,       $P_wheelset4_Cuboid           ) = 9.2000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_wheelset4_Cuboid           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_wheelset4_Cuboid           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_wheelset4_Cuboid           ) = 2.0000000000000000E+00  ! [m] Height
prim.par (                3 ,       $P_wheelset4_Cuboid           ) = 2.0000000298000001E-01  ! [m] Outer diameter
prim.par (                5 ,       $P_wheelset4_Cuboid           ) = 1.6000000000000000E+01  ! [-] Number of planes
prim.par (                7 ,       $P_wheelset4_Cuboid           ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (                8 ,       $P_wheelset4_Cuboid           ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_B_wheelset4_ProfRef_RWP_WR3_Copy_1) = 78               ! Type
prim.ref (                          $P_B_wheelset4_ProfRef_RWP_WR3_Copy_1) = $M_B_wheelset4_ProfRef_RWP_WR3_Copy_1 ! Reference Marker
prim.color.r (            1 ,       $P_B_wheelset4_ProfRef_RWP_WR3_Copy_1) = 5.8000000000000000E+01 ! Colors (red component)
prim.color.g (            1 ,       $P_B_wheelset4_ProfRef_RWP_WR3_Copy_1) = 9.8000000000000000E+01 ! Colors (green component)
prim.color.b (            1 ,       $P_B_wheelset4_ProfRef_RWP_WR3_Copy_1) = 2.0500000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_B_wheelset4_ProfRef_RWP_WR3_Copy_1) = 5.0000000000000000E-01 ! Colors (transparency component)
prim.par (                1 ,       $P_B_wheelset4_ProfRef_RWP_WR3_Copy_1) = $RWP_WR4         ! [-] Rail-wheel pair

prim.type (                         $P_B_wheelset4_ProfRef_RWP_WL4) = 78                      ! Type
prim.ref (                          $P_B_wheelset4_ProfRef_RWP_WL4) = $M_B_wheelset4_ProfRef_RWP_WL4 ! Reference Marker
prim.color.r (            1 ,       $P_B_wheelset4_ProfRef_RWP_WL4) = 5.8000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_B_wheelset4_ProfRef_RWP_WL4) = 9.8000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_B_wheelset4_ProfRef_RWP_WL4) = 2.0500000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_B_wheelset4_ProfRef_RWP_WL4) = 5.0000000000000000E-01  ! Colors (transparency component)
prim.par (                1 ,       $P_B_wheelset4_ProfRef_RWP_WL4) = $RWP_WL4                ! [-] Rail-wheel pair


body.m (                            $B_wheelset3                  ) = 1.9018000488000000E+03  ! Mass of the Body
body.I.tens (             1 ,   1 , $B_wheelset3                  ) = 6.8500000000000000E+02  ! Moments of inertia
body.I.tens (             2 ,   2 , $B_wheelset3                  ) = 7.6000000000000000E+01  ! Moments of inertia
body.I.tens (             3 ,   3 , $B_wheelset3                  ) = 6.8500000000000000E+02  ! Moments of inertia
body.I.kind (                       $B_wheelset3                  ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.I.ref (                        $B_wheelset3                  ) = null                    ! Inertia Reference Marker
body.type (                         $B_wheelset3                  ) = 0                       ! Body type: 0=rigid; 1=flex modal; 2=SIMBEAM; 4=nonlinear SIMBEAM
body.attr.2d.pos.x (                $B_wheelset3                  ) = -5.1300000000000000E+03
body.attr.2d.pos.y (                $B_wheelset3                  ) = -2.0000000000000000E+01
body.attr.2d.width (                $B_wheelset3                  ) = 5.0000000000000000E+01
body.attr.2d.height (               $B_wheelset3                  ) = 3.0000000000000000E+01

marker.type (                       $M_wheelset3                  ) = 1                       ! Type
marker.parent (                     $M_wheelset3                  ) = $B_wheelset3            ! Body

marker.type (                       $M_wheelset3_l                ) = 1                       ! Type
marker.parent (                     $M_wheelset3_l                ) = $B_wheelset3            ! Body
marker.pos (              2 ,       $M_wheelset3_l                ) = -1.0000000000000000E+00 ! Position

marker.type (                       $M_wheelset3_r                ) = 1                       ! Type
marker.parent (                     $M_wheelset3_r                ) = $B_wheelset3            ! Body
marker.pos (              2 ,       $M_wheelset3_r                ) = 1.0000000000000000E+00  ! Position

marker.type (                       $M_wheelset3_BRF              ) = 1                       ! Type
marker.parent (                     $M_wheelset3_BRF              ) = $B_wheelset3            ! Body
marker.flx.type (                   $M_wheelset3_BRF              ) = 4                       ! Flexible type

marker.type (                       $M_B_wheelset3_ProfRef_RWP_WR3) = -78                     ! Type
marker.parent (                     $M_B_wheelset3_ProfRef_RWP_WR3) = $B_wheelset3            ! Body
marker.par (              1 ,       $M_B_wheelset3_ProfRef_RWP_WR3) = $RWP_WR3                ! [-] Rail-Wheel Pair

marker.type (                       $M_B_wheelset3_ProfRef_RWP_WL3) = -78                     ! Type
marker.parent (                     $M_B_wheelset3_ProfRef_RWP_WL3) = $B_wheelset3            ! Body
marker.par (              1 ,       $M_B_wheelset3_ProfRef_RWP_WL3) = $RWP_WL3                ! [-] Rail-Wheel Pair

joint.from (                        $J_wheelset3                  ) = $M_Isys                 ! From Marker
joint.to (                          $J_wheelset3                  ) = $M_wheelset3            ! To Marker
joint.type (                        $J_wheelset3                  ) = 7                       ! Type
joint.st.pos (            1 ,       $J_wheelset3                  ) = 2.5000000000000000E+00  ! Position
joint.st.pos (            2 ,       $J_wheelset3                  ) = 0.0000000000000000E+00  ! Position
joint.st.pos (            3 ,       $J_wheelset3                  ) = -4.2977271891000002E-01 ! Position
joint.st.pos (            4 ,       $J_wheelset3                  ) = -5.7043667597999999E-15 ! Position
joint.st.pos (            5 ,       $J_wheelset3                  ) = 0.0000000000000000E+00  ! Position
joint.st.pos (            6 ,       $J_wheelset3                  ) = 0.0000000000000000E+00  ! Position
joint.st.vel (            1 ,       $J_wheelset3                  ) = 1.3888888888888889E+01  ! Velocity
joint.st.vel (            2 ,       $J_wheelset3                  ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            3 ,       $J_wheelset3                  ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            4 ,       $J_wheelset3                  ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            5 ,       $J_wheelset3                  ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            6 ,       $J_wheelset3                  ) = -3.2318788745134796E+01 ! Velocity
joint.st.dep (            1 ,       $J_wheelset3                  ) = 0                       ! Dependency state
joint.st.dep (            2 ,       $J_wheelset3                  ) = 0                       ! Dependency state
joint.st.dep (            3 ,       $J_wheelset3                  ) = 1                       ! Dependency state
joint.st.dep (            4 ,       $J_wheelset3                  ) = 1                       ! Dependency state
joint.st.dep (            5 ,       $J_wheelset3                  ) = 0                       ! Dependency state
joint.st.dep (            6 ,       $J_wheelset3                  ) = 0                       ! Dependency state
joint.st.equi (           6 ,       $J_wheelset3                  ) = 2                       ! Equilibrium
joint.par (               3 ,       $J_wheelset3                  ) = 0.0000000000000000E+00  ! [-] Degrees of freedom
joint.attr.2d.pos.x (     1 ,       $J_wheelset3                  ) = -2870
joint.attr.2d.pos.y (     1 ,       $J_wheelset3                  ) = -20
joint.attr.2d.ori (       1 ,       $J_wheelset3                  ) = 90
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_wheelset3       ) = -2870, -2870
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_wheelset3       ) = -160, -37
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_wheelset3         ) = -5080, -2870, -2870
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_wheelset3         ) = 0, 0, -3

prim.type (                         $P_wheelset3_Cuboid           ) = 2                       ! Type
prim.ref (                          $P_wheelset3_Cuboid           ) = $M_wheelset3            ! Reference Marker
prim.color.r (            1 ,       $P_wheelset3_Cuboid           ) = 0.0000000000000000E+00  ! Colors (red component)
prim.color.r (            2 ,       $P_wheelset3_Cuboid           ) = 0.0000000000000000E+00  ! Colors (red component)
prim.color.g (            1 ,       $P_wheelset3_Cuboid           ) = 4.6000000000000000E+01  ! Colors (green component)
prim.color.g (            2 ,       $P_wheelset3_Cuboid           ) = 4.6000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_wheelset3_Cuboid           ) = 9.2000000000000000E+01  ! Colors (blue component)
prim.color.b (            2 ,       $P_wheelset3_Cuboid           ) = 9.2000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_wheelset3_Cuboid           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_wheelset3_Cuboid           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_wheelset3_Cuboid           ) = 2.0000000000000000E+00  ! [m] Height
prim.par (                3 ,       $P_wheelset3_Cuboid           ) = 2.0000000298000001E-01  ! [m] Outer diameter
prim.par (                5 ,       $P_wheelset3_Cuboid           ) = 1.6000000000000000E+01  ! [-] Number of planes
prim.par (                7 ,       $P_wheelset3_Cuboid           ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (                8 ,       $P_wheelset3_Cuboid           ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_B_wheelset3_ProfRef_RWP_WR3) = 78                      ! Type
prim.ref (                          $P_B_wheelset3_ProfRef_RWP_WR3) = $M_B_wheelset3_ProfRef_RWP_WR3 ! Reference Marker
prim.color.r (            1 ,       $P_B_wheelset3_ProfRef_RWP_WR3) = 5.8000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_B_wheelset3_ProfRef_RWP_WR3) = 9.8000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_B_wheelset3_ProfRef_RWP_WR3) = 2.0500000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_B_wheelset3_ProfRef_RWP_WR3) = 5.0000000000000000E-01  ! Colors (transparency component)
prim.par (                1 ,       $P_B_wheelset3_ProfRef_RWP_WR3) = $RWP_WR3                ! [-] Rail-wheel pair

prim.type (                         $P_B_wheelset3_ProfRef_RWP_WL3) = 78                      ! Type
prim.ref (                          $P_B_wheelset3_ProfRef_RWP_WL3) = $M_B_wheelset3_ProfRef_RWP_WL3 ! Reference Marker
prim.color.r (            1 ,       $P_B_wheelset3_ProfRef_RWP_WL3) = 5.8000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_B_wheelset3_ProfRef_RWP_WL3) = 9.8000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_B_wheelset3_ProfRef_RWP_WL3) = 2.0500000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_B_wheelset3_ProfRef_RWP_WL3) = 5.0000000000000000E-01  ! Colors (transparency component)
prim.par (                1 ,       $P_B_wheelset3_ProfRef_RWP_WL3) = $RWP_WL3                ! [-] Rail-wheel pair


body.m (                            $B_Bogie2                     ) = 2.2800000000000000E+03  ! Mass of the Body
body.cg.pos (             3 ,       $B_Bogie2                     ) = -5.0999999046000000E-01 ! Center of gravity
body.I.tens (             1 ,   1 , $B_Bogie2                     ) = 1.8470000000000000E+03  ! Moments of inertia
body.I.tens (             2 ,   2 , $B_Bogie2                     ) = 1.2490000000000000E+03  ! Moments of inertia
body.I.tens (             3 ,   3 , $B_Bogie2                     ) = 2.2800000000000000E+03  ! Moments of inertia
body.I.kind (                       $B_Bogie2                     ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.I.ref (                        $B_Bogie2                     ) = null                    ! Inertia Reference Marker
body.type (                         $B_Bogie2                     ) = 0                       ! Body type: 0=rigid; 1=flex modal; 2=SIMBEAM; 4=nonlinear SIMBEAM
body.attr.2d.pos.x (                $B_Bogie2                     ) = -2.2300000000000000E+03
body.attr.2d.pos.y (                $B_Bogie2                     ) = -2.0000000000000000E+01
body.attr.2d.width (                $B_Bogie2                     ) = 5.0000000000000000E+01
body.attr.2d.height (               $B_Bogie2                     ) = 3.0000000000000000E+01

marker.type (                       $M_Bogie2                     ) = 1                       ! Type
marker.parent (                     $M_Bogie2                     ) = $B_Bogie2               ! Body

marker.type (                       $M_Bogie2_PS_4l_damping       ) = 1                       ! Type
marker.parent (                     $M_Bogie2_PS_4l_damping       ) = $B_Bogie2               ! Body
marker.pos (              1 ,       $M_Bogie2_PS_4l_damping       ) = $_PS_Damping_Bogie_B_x  ! Position
marker.pos (              2 ,       $M_Bogie2_PS_4l_damping       ) = $_PS_Damping_Bogie_L    ! Position
marker.pos (              3 ,       $M_Bogie2_PS_4l_damping       ) = $_PS_Damping_Z_high     ! Position

marker.type (                       $M_Bogie2_PS_4r_damping       ) = 1                       ! Type
marker.parent (                     $M_Bogie2_PS_4r_damping       ) = $B_Bogie2               ! Body
marker.pos (              1 ,       $M_Bogie2_PS_4r_damping       ) = $_PS_Damping_Bogie_B_x  ! Position
marker.pos (              2 ,       $M_Bogie2_PS_4r_damping       ) = $_PS_Damping_Bogie_R    ! Position
marker.pos (              3 ,       $M_Bogie2_PS_4r_damping       ) = $_PS_Damping_Z_high     ! Position

marker.type (                       $M_Bogie2_PS_3l_damping       ) = 1                       ! Type
marker.parent (                     $M_Bogie2_PS_3l_damping       ) = $B_Bogie2               ! Body
marker.pos (              1 ,       $M_Bogie2_PS_3l_damping       ) = $_PS_Damping_Bogie_F_x  ! Position
marker.pos (              2 ,       $M_Bogie2_PS_3l_damping       ) = $_PS_Damping_Bogie_L    ! Position
marker.pos (              3 ,       $M_Bogie2_PS_3l_damping       ) = $_PS_Damping_Z_high     ! Position

marker.type (                       $M_Bogie2_PS_3r_damping       ) = 1                       ! Type
marker.parent (                     $M_Bogie2_PS_3r_damping       ) = $B_Bogie2               ! Body
marker.pos (              1 ,       $M_Bogie2_PS_3r_damping       ) = $_PS_Damping_Bogie_F_x  ! Position
marker.pos (              2 ,       $M_Bogie2_PS_3r_damping       ) = $_PS_Damping_Bogie_R    ! Position
marker.pos (              3 ,       $M_Bogie2_PS_3r_damping       ) = $_PS_Damping_Z_high     ! Position

marker.type (                       $M_Bogie2_PS_4l_spring        ) = 1                       ! Type
marker.parent (                     $M_Bogie2_PS_4l_spring        ) = $B_Bogie2               ! Body
marker.pos (              1 ,       $M_Bogie2_PS_4l_spring        ) = $_Bogie_PS_Spring_4     ! Position
marker.pos (              2 ,       $M_Bogie2_PS_4l_spring        ) = -1.0000000000000000E+00 ! Position
marker.pos (              3 ,       $M_Bogie2_PS_4l_spring        ) = $_PS_Spring_Z           ! Position

marker.type (                       $M_Bogie2_PS_4r_spring        ) = 1                       ! Type
marker.parent (                     $M_Bogie2_PS_4r_spring        ) = $B_Bogie2               ! Body
marker.pos (              1 ,       $M_Bogie2_PS_4r_spring        ) = $_Bogie_PS_Spring_4     ! Position
marker.pos (              2 ,       $M_Bogie2_PS_4r_spring        ) = 1.0000000000000000E+00  ! Position
marker.pos (              3 ,       $M_Bogie2_PS_4r_spring        ) = $_PS_Spring_Z           ! Position

marker.type (                       $M_Bogie2_PS_3l_Spring        ) = 1                       ! Type
marker.parent (                     $M_Bogie2_PS_3l_Spring        ) = $B_Bogie2               ! Body
marker.pos (              1 ,       $M_Bogie2_PS_3l_Spring        ) = $_Lb                    ! Position
marker.pos (              2 ,       $M_Bogie2_PS_3l_Spring        ) = -1.0000000000000000E+00 ! Position
marker.pos (              3 ,       $M_Bogie2_PS_3l_Spring        ) = $_PS_Spring_Z           ! Position

marker.type (                       $M_Bogie2_PS_3r_Spring        ) = 1                       ! Type
marker.parent (                     $M_Bogie2_PS_3r_Spring        ) = $B_Bogie2               ! Body
marker.pos (              1 ,       $M_Bogie2_PS_3r_Spring        ) = $_Lb                    ! Position
marker.pos (              2 ,       $M_Bogie2_PS_3r_Spring        ) = 1.0000000000000000E+00  ! Position
marker.pos (              3 ,       $M_Bogie2_PS_3r_Spring        ) = $_PS_Spring_Z           ! Position

marker.type (                       $M_Bogie2_PS_4l_Joint         ) = 1                       ! Type
marker.parent (                     $M_Bogie2_PS_4l_Joint         ) = $B_Bogie2               ! Body
marker.pos (              1 ,       $M_Bogie2_PS_4l_Joint         ) = $_Bogie_PS_Joint_X      ! Position
marker.pos (              2 ,       $M_Bogie2_PS_4l_Joint         ) = -1.0000000000000000E+00 ! Position
marker.pos (              3 ,       $M_Bogie2_PS_4l_Joint         ) = $_PS_Joint_Z            ! Position

marker.type (                       $M_Bogie2_PS_4r_Joint         ) = 1                       ! Type
marker.parent (                     $M_Bogie2_PS_4r_Joint         ) = $B_Bogie2               ! Body
marker.pos (              1 ,       $M_Bogie2_PS_4r_Joint         ) = $_Bogie_PS_Joint_X      ! Position
marker.pos (              2 ,       $M_Bogie2_PS_4r_Joint         ) = 1.0000000000000000E+00  ! Position
marker.pos (              3 ,       $M_Bogie2_PS_4r_Joint         ) = $_PS_Joint_Z            ! Position

marker.type (                       $M_Bogie2_PS_3l_Joint         ) = 1                       ! Type
marker.parent (                     $M_Bogie2_PS_3l_Joint         ) = $B_Bogie2               ! Body
marker.pos (              1 ,       $M_Bogie2_PS_3l_Joint         ) = $_PS_Joint_X            ! Position
marker.pos (              2 ,       $M_Bogie2_PS_3l_Joint         ) = -1.0000000000000000E+00 ! Position
marker.pos (              3 ,       $M_Bogie2_PS_3l_Joint         ) = $_PS_Joint_Z            ! Position

marker.type (                       $M_Bogie2_PS_3r_Joint         ) = 1                       ! Type
marker.parent (                     $M_Bogie2_PS_3r_Joint         ) = $B_Bogie2               ! Body
marker.pos (              1 ,       $M_Bogie2_PS_3r_Joint         ) = $_PS_Joint_X            ! Position
marker.pos (              2 ,       $M_Bogie2_PS_3r_Joint         ) = 1.0000000000000000E+00  ! Position
marker.pos (              3 ,       $M_Bogie2_PS_3r_Joint         ) = $_PS_Joint_Z            ! Position

marker.type (                       $M_Bogie2_Airspring_2l        ) = 1                       ! Type
marker.parent (                     $M_Bogie2_Airspring_2l        ) = $B_Bogie2               ! Body
marker.pos (              2 ,       $M_Bogie2_Airspring_2l        ) = $_SS_Airspring_FY       ! Position
marker.pos (              3 ,       $M_Bogie2_Airspring_2l        ) = $_SS_Airspring_Z        ! Position

marker.type (                       $M_Bogie2_Airspring_2r        ) = 1                       ! Type
marker.parent (                     $M_Bogie2_Airspring_2r        ) = $B_Bogie2               ! Body
marker.pos (              2 ,       $M_Bogie2_Airspring_2r        ) = $_SS_Airspring_Y        ! Position
marker.pos (              3 ,       $M_Bogie2_Airspring_2r        ) = $_SS_Airspring_Z        ! Position

marker.type (                       $M_Bogie2_SS_KSX_2l           ) = 1                       ! Type
marker.parent (                     $M_Bogie2_SS_KSX_2l           ) = $B_Bogie2               ! Body
marker.pos (              1 ,       $M_Bogie2_SS_KSX_2l           ) = $_SS_KSX_bg_bx          ! Position
marker.pos (              2 ,       $M_Bogie2_SS_KSX_2l           ) = $_SS_KSX_Bogie_L        ! Position
marker.pos (              3 ,       $M_Bogie2_SS_KSX_2l           ) = $_SS_KSX_Bogie_z        ! Position

marker.type (                       $M_Bogie2_SS_KSX_2r           ) = 1                       ! Type
marker.parent (                     $M_Bogie2_SS_KSX_2r           ) = $B_Bogie2               ! Body
marker.pos (              1 ,       $M_Bogie2_SS_KSX_2r           ) = $_SS_KSX_bg_bx          ! Position
marker.pos (              2 ,       $M_Bogie2_SS_KSX_2r           ) = $_SS_KSX_Bogie_R        ! Position
marker.pos (              3 ,       $M_Bogie2_SS_KSX_2r           ) = $_SS_KSX_Bogie_z        ! Position

marker.type (                       $M_Bogie2_SS_HX_3             ) = 1                       ! Type
marker.parent (                     $M_Bogie2_SS_HX_3             ) = $B_Bogie2               ! Body
marker.pos (              1 ,       $M_Bogie2_SS_HX_3             ) = $_SS_HX_bg_x1           ! Position
marker.pos (              2 ,       $M_Bogie2_SS_HX_3             ) = $_SS_HX_Y2              ! Position
marker.pos (              3 ,       $M_Bogie2_SS_HX_3             ) = $_SS_HX_Bogie_z         ! Position

marker.type (                       $M_Bogie2_SS_HX_4             ) = 1                       ! Type
marker.parent (                     $M_Bogie2_SS_HX_4             ) = $B_Bogie2               ! Body
marker.pos (              1 ,       $M_Bogie2_SS_HX_4             ) = $_SS_HX_bg_x2           ! Position
marker.pos (              2 ,       $M_Bogie2_SS_HX_4             ) = $_SS_HX_Y3              ! Position
marker.pos (              3 ,       $M_Bogie2_SS_HX_4             ) = $_SS_HX_Bogie_z         ! Position

marker.type (                       $M_Bogie2_QY                  ) = 1                       ! Type
marker.parent (                     $M_Bogie2_QY                  ) = $B_Bogie2               ! Body
marker.pos (              3 ,       $M_Bogie2_QY                  ) = $_QY_Car_Z              ! Position

marker.type (                       $M_Bogie2_ZD_l                ) = 1                       ! Type
marker.parent (                     $M_Bogie2_ZD_l                ) = $B_Bogie2               ! Body
marker.pos (              2 ,       $M_Bogie2_ZD_l                ) = -1.8999999762000000E-01 ! Position
marker.pos (              3 ,       $M_Bogie2_ZD_l                ) = -6.8000000714999997E-01 ! Position

marker.type (                       $M_Bogie2_ZD_r                ) = 1                       ! Type
marker.parent (                     $M_Bogie2_ZD_r                ) = $B_Bogie2               ! Body
marker.pos (              2 ,       $M_Bogie2_ZD_r                ) = 1.8999999762000000E-01  ! Position
marker.pos (              3 ,       $M_Bogie2_ZD_r                ) = -6.8000000714999997E-01 ! Position

marker.type (                       $M_Bogie2_NG                  ) = 1                       ! Type
marker.parent (                     $M_Bogie2_NG                  ) = $B_Bogie2               ! Body
marker.pos (              3 ,       $M_Bogie2_NG                  ) = -4.3000000714999997E-01 ! Position

marker.type (                       $M_Bogie2_ZD                  ) = 1                       ! Type
marker.parent (                     $M_Bogie2_ZD                  ) = $B_Bogie2               ! Body
marker.pos (              3 ,       $M_Bogie2_ZD                  ) = -6.8000000714999997E-01 ! Position

marker.type (                       $M_Bogie2_FrameAcc_y          ) = 1                       ! Type
marker.parent (                     $M_Bogie2_FrameAcc_y          ) = $B_Bogie2               ! Body
marker.pos (              1 ,       $M_Bogie2_FrameAcc_y          ) = 1.2500000000000000E+00  ! Position
marker.pos (              2 ,       $M_Bogie2_FrameAcc_y          ) = 1.0000000000000000E+00  ! Position
marker.pos (              3 ,       $M_Bogie2_FrameAcc_y          ) = $_FrameAcc_Z            ! Position

marker.type (                       $M_Bogie2_BRF                 ) = 1                       ! Type
marker.parent (                     $M_Bogie2_BRF                 ) = $B_Bogie2               ! Body
marker.flx.type (                   $M_Bogie2_BRF                 ) = 4                       ! Flexible type

joint.from (                        $J_Bogie2                     ) = $M_Isys                 ! From Marker
joint.to (                          $J_Bogie2                     ) = $M_Bogie2               ! To Marker
joint.type (                        $J_Bogie2                     ) = 7                       ! Type
joint.st.pos (            1 ,       $J_Bogie2                     ) = 1.2500000000000000E+00  ! Position
joint.st.pos (            2 ,       $J_Bogie2                     ) = 0.0000000000000000E+00  ! Position
joint.st.pos (            3 ,       $J_Bogie2                     ) = 0.0000000000000000E+00  ! Position
joint.st.pos (            4 ,       $J_Bogie2                     ) = 0.0000000000000000E+00  ! Position
joint.st.pos (            5 ,       $J_Bogie2                     ) = 0.0000000000000000E+00  ! Position
joint.st.pos (            6 ,       $J_Bogie2                     ) = 0.0000000000000000E+00  ! Position
joint.st.vel (            1 ,       $J_Bogie2                     ) = 1.3888888888888889E+01  ! Velocity
joint.st.vel (            2 ,       $J_Bogie2                     ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            3 ,       $J_Bogie2                     ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            4 ,       $J_Bogie2                     ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            5 ,       $J_Bogie2                     ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            6 ,       $J_Bogie2                     ) = 0.0000000000000000E+00  ! Velocity
joint.st.dep (            1 ,       $J_Bogie2                     ) = 0                       ! Dependency state
joint.st.dep (            2 ,       $J_Bogie2                     ) = 0                       ! Dependency state
joint.st.dep (            3 ,       $J_Bogie2                     ) = 0                       ! Dependency state
joint.st.dep (            4 ,       $J_Bogie2                     ) = 0                       ! Dependency state
joint.st.dep (            5 ,       $J_Bogie2                     ) = 0                       ! Dependency state
joint.st.dep (            6 ,       $J_Bogie2                     ) = 0                       ! Dependency state
joint.par (               3 ,       $J_Bogie2                     ) = 0.0000000000000000E+00  ! [-] Degrees of freedom
joint.attr.2d.pos.x (     1 ,       $J_Bogie2                     ) = -2740
joint.attr.2d.pos.y (     1 ,       $J_Bogie2                     ) = -20
joint.attr.2d.ori (       1 ,       $J_Bogie2                     ) = 90
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_Bogie2          ) = -2740, -2740
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_Bogie2          ) = -160, -37
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_Bogie2            ) = -2230, -2740, -2740
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_Bogie2            ) = 0, 0, -3

prim.type (                         $P_Bogie2_Cuboid              ) = 22                      ! Type
prim.ref (                          $P_Bogie2_Cuboid              ) = $M_Bogie2               ! Reference Marker
prim.pos (                3 ,       $P_Bogie2_Cuboid              ) = -5.0999999046000000E-01 ! Position
prim.color.r (            1 ,       $P_Bogie2_Cuboid              ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie2_Cuboid              ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie2_Cuboid              ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie2_Cuboid              ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie2_Cuboid              ) = 3.0000000000000000E+00  ! [m] Length L1
prim.par (                3 ,       $P_Bogie2_Cuboid              ) = 1.5000000000000000E+00  ! [m] Length L2
prim.par (                4 ,       $P_Bogie2_Cuboid              ) = 3.0000001191999998E-01  ! [m] Height H1
prim.par (                5 ,       $P_Bogie2_Cuboid              ) = 1.5000000595999999E-01  ! [m] Height H2
prim.par (                6 ,       $P_Bogie2_Cuboid              ) = 1.5000000595999999E-01  ! [m] Width B1
prim.par (                7 ,       $P_Bogie2_Cuboid              ) = 2.0000000000000000E+00  ! [m] Distance right left

prim.type (                         $P_Bogie2_frame3              ) = 1                       ! Type
prim.ref (                          $P_Bogie2_frame3              ) = $M_Bogie2               ! Reference Marker
prim.pos (                1 ,       $P_Bogie2_frame3              ) = 4.0000000596000002E-01  ! Position
prim.pos (                3 ,       $P_Bogie2_frame3              ) = -5.8499997853999997E-01 ! Position
prim.color.r (            1 ,       $P_Bogie2_frame3              ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie2_frame3              ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie2_frame3              ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie2_frame3              ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie2_frame3              ) = 1.5000000595999999E-01  ! [m] Length in X
prim.par (                3 ,       $P_Bogie2_frame3              ) = 2.0000000000000000E+00  ! [m] Length in Y
prim.par (                4 ,       $P_Bogie2_frame3              ) = 1.5000000595999999E-01  ! [m] Length in Z

prim.type (                         $P_Bogie2_frame4              ) = 1                       ! Type
prim.ref (                          $P_Bogie2_frame4              ) = $M_Bogie2               ! Reference Marker
prim.pos (                1 ,       $P_Bogie2_frame4              ) = -4.0000000596000002E-01 ! Position
prim.pos (                3 ,       $P_Bogie2_frame4              ) = -5.8499997853999997E-01 ! Position
prim.color.r (            1 ,       $P_Bogie2_frame4              ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie2_frame4              ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie2_frame4              ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie2_frame4              ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie2_frame4              ) = 1.5000000595999999E-01  ! [m] Length in X
prim.par (                3 ,       $P_Bogie2_frame4              ) = 2.0000000000000000E+00  ! [m] Length in Y
prim.par (                4 ,       $P_Bogie2_frame4              ) = 1.5000000595999999E-01  ! [m] Length in Z

prim.type (                         $P_Bogie2_Lat_Damp_R          ) = 5                       ! Type
prim.ref (                          $P_Bogie2_Lat_Damp_R          ) = $M_Bogie2               ! Reference Marker
prim.pos (                1 ,       $P_Bogie2_Lat_Damp_R          ) = 2.0000000298000001E-01  ! Position
prim.pos (                2 ,       $P_Bogie2_Lat_Damp_R          ) = 3.1499999762000003E-01  ! Position
prim.pos (                3 ,       $P_Bogie2_Lat_Damp_R          ) = -6.6000002622999998E-01 ! Position
prim.ang (                1 ,       $P_Bogie2_Lat_Damp_R          ) = { -90 deg }             ! Angles
prim.ang (                2 ,       $P_Bogie2_Lat_Damp_R          ) = { 0 deg }               ! Angles
prim.ang (                3 ,       $P_Bogie2_Lat_Damp_R          ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   1 , $P_Bogie2_Lat_Damp_R          ) = -4.0000000596000002E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_Bogie2_Lat_Damp_R          ) = 4.0000000596000002E-01  ! Vertices
prim.vtx (                1 ,   3 , $P_Bogie2_Lat_Damp_R          ) = 1.5000000595999999E-01  ! Vertices
prim.vtx (                1 ,   4 , $P_Bogie2_Lat_Damp_R          ) = -1.5000000595999999E-01 ! Vertices
prim.vtx (                2 ,   3 , $P_Bogie2_Lat_Damp_R          ) = 3.0000001191999998E-01  ! Vertices
prim.vtx (                2 ,   4 , $P_Bogie2_Lat_Damp_R          ) = 3.0000001191999998E-01  ! Vertices
prim.vtx (                3 ,   4 , $P_Bogie2_Lat_Damp_R          ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_Bogie2_Lat_Damp_R          ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie2_Lat_Damp_R          ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie2_Lat_Damp_R          ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie2_Lat_Damp_R          ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie2_Lat_Damp_R          ) = 0.0000000000000000E+00  ! [-] Contour by
prim.par (                4 ,       $P_Bogie2_Lat_Damp_R          ) = 1.0000000000000000E+00  ! [-] Contour
prim.par (                6 ,       $P_Bogie2_Lat_Damp_R          ) = 0.0000000000000000E+00  ! [-] Curve fitting type
prim.par (                9 ,       $P_Bogie2_Lat_Damp_R          ) = 0.0000000000000000E+00  ! [-] Material side
prim.par (               10 ,       $P_Bogie2_Lat_Damp_R          ) = 1.0000000149000000E-01  ! [m] Depth
prim.par (               12 ,       $P_Bogie2_Lat_Damp_R          ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               13 ,       $P_Bogie2_Lat_Damp_R          ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_Bogie2_Lat_Damp_L          ) = 5                       ! Type
prim.ref (                          $P_Bogie2_Lat_Damp_L          ) = $M_Bogie2               ! Reference Marker
prim.pos (                1 ,       $P_Bogie2_Lat_Damp_L          ) = -2.0000000298000001E-01 ! Position
prim.pos (                2 ,       $P_Bogie2_Lat_Damp_L          ) = -3.1499999762000003E-01 ! Position
prim.pos (                3 ,       $P_Bogie2_Lat_Damp_L          ) = -6.6000002622999998E-01 ! Position
prim.ang (                1 ,       $P_Bogie2_Lat_Damp_L          ) = { -90 deg }             ! Angles
prim.ang (                2 ,       $P_Bogie2_Lat_Damp_L          ) = { 0 deg }               ! Angles
prim.ang (                3 ,       $P_Bogie2_Lat_Damp_L          ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   1 , $P_Bogie2_Lat_Damp_L          ) = -4.0000000596000002E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_Bogie2_Lat_Damp_L          ) = 4.0000000596000002E-01  ! Vertices
prim.vtx (                1 ,   3 , $P_Bogie2_Lat_Damp_L          ) = 1.5000000595999999E-01  ! Vertices
prim.vtx (                1 ,   4 , $P_Bogie2_Lat_Damp_L          ) = -1.5000000595999999E-01 ! Vertices
prim.vtx (                2 ,   3 , $P_Bogie2_Lat_Damp_L          ) = 3.0000001191999998E-01  ! Vertices
prim.vtx (                2 ,   4 , $P_Bogie2_Lat_Damp_L          ) = 3.0000001191999998E-01  ! Vertices
prim.vtx (                3 ,   4 , $P_Bogie2_Lat_Damp_L          ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_Bogie2_Lat_Damp_L          ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie2_Lat_Damp_L          ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie2_Lat_Damp_L          ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie2_Lat_Damp_L          ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie2_Lat_Damp_L          ) = 0.0000000000000000E+00  ! [-] Contour by
prim.par (                4 ,       $P_Bogie2_Lat_Damp_L          ) = 1.0000000000000000E+00  ! [-] Contour
prim.par (                6 ,       $P_Bogie2_Lat_Damp_L          ) = 0.0000000000000000E+00  ! [-] Curve fitting type
prim.par (                9 ,       $P_Bogie2_Lat_Damp_L          ) = 0.0000000000000000E+00  ! [-] Material side
prim.par (               10 ,       $P_Bogie2_Lat_Damp_L          ) = 1.0000000149000000E-01  ! [m] Depth
prim.par (               12 ,       $P_Bogie2_Lat_Damp_L          ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               13 ,       $P_Bogie2_Lat_Damp_L          ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_Bogie2_PrimDampVert_3R     ) = 19                      ! Type
prim.ref (                          $P_Bogie2_PrimDampVert_3R     ) = $M_Bogie2               ! Reference Marker
prim.color.r (            1 ,       $P_Bogie2_PrimDampVert_3R     ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie2_PrimDampVert_3R     ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie2_PrimDampVert_3R     ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie2_PrimDampVert_3R     ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie2_PrimDampVert_3R     ) = $M_Bogie2_PS_3r_damping ! [-] Marker i
prim.par (                3 ,       $P_Bogie2_PrimDampVert_3R     ) = $M_box3r_damping        ! [-] Marker j
prim.par (                6 ,       $P_Bogie2_PrimDampVert_3R     ) = 2.9999999329000000E-02  ! [m] Radius of x-section
prim.par (               13 ,       $P_Bogie2_PrimDampVert_3R     ) = 5.0000000000000000E+01  ! [-] Number of planes

prim.type (                         $P_Bogie2_PrimDampVert_3L     ) = 19                      ! Type
prim.ref (                          $P_Bogie2_PrimDampVert_3L     ) = $M_Bogie2               ! Reference Marker
prim.color.r (            1 ,       $P_Bogie2_PrimDampVert_3L     ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie2_PrimDampVert_3L     ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie2_PrimDampVert_3L     ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie2_PrimDampVert_3L     ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie2_PrimDampVert_3L     ) = $M_Bogie2_PS_3l_damping ! [-] Marker i
prim.par (                3 ,       $P_Bogie2_PrimDampVert_3L     ) = $M_box3l_damping        ! [-] Marker j
prim.par (                6 ,       $P_Bogie2_PrimDampVert_3L     ) = 2.9999999329000000E-02  ! [m] Radius of x-section
prim.par (               13 ,       $P_Bogie2_PrimDampVert_3L     ) = 5.0000000000000000E+01  ! [-] Number of planes

prim.type (                         $P_Bogie2_PrimDampVert_4R     ) = 19                      ! Type
prim.ref (                          $P_Bogie2_PrimDampVert_4R     ) = $M_Bogie2               ! Reference Marker
prim.color.r (            1 ,       $P_Bogie2_PrimDampVert_4R     ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie2_PrimDampVert_4R     ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie2_PrimDampVert_4R     ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie2_PrimDampVert_4R     ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie2_PrimDampVert_4R     ) = $M_Bogie2_PS_4r_damping ! [-] Marker i
prim.par (                3 ,       $P_Bogie2_PrimDampVert_4R     ) = $M_box4r_damping        ! [-] Marker j
prim.par (                6 ,       $P_Bogie2_PrimDampVert_4R     ) = 2.9999999329000000E-02  ! [m] Radius of x-section
prim.par (               13 ,       $P_Bogie2_PrimDampVert_4R     ) = 5.0000000000000000E+01  ! [-] Number of planes

prim.type (                         $P_Bogie2_PrimDampVert_4L     ) = 19                      ! Type
prim.ref (                          $P_Bogie2_PrimDampVert_4L     ) = $M_Bogie2               ! Reference Marker
prim.color.r (            1 ,       $P_Bogie2_PrimDampVert_4L     ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie2_PrimDampVert_4L     ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie2_PrimDampVert_4L     ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie2_PrimDampVert_4L     ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie2_PrimDampVert_4L     ) = $M_Bogie2_PS_4l_damping ! [-] Marker i
prim.par (                3 ,       $P_Bogie2_PrimDampVert_4L     ) = $M_box4l_damping        ! [-] Marker j
prim.par (                6 ,       $P_Bogie2_PrimDampVert_4L     ) = 2.9999999329000000E-02  ! [m] Radius of x-section
prim.par (               13 ,       $P_Bogie2_PrimDampVert_4L     ) = 5.0000000000000000E+01  ! [-] Number of planes

prim.type (                         $P_Bogie2_SecDamp_Lat_R       ) = 19                      ! Type
prim.ref (                          $P_Bogie2_SecDamp_Lat_R       ) = $M_Bogie2               ! Reference Marker
prim.color.r (            1 ,       $P_Bogie2_SecDamp_Lat_R       ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie2_SecDamp_Lat_R       ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie2_SecDamp_Lat_R       ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie2_SecDamp_Lat_R       ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie2_SecDamp_Lat_R       ) = $M_Carbody_HX_3         ! [-] Marker i
prim.par (                3 ,       $P_Bogie2_SecDamp_Lat_R       ) = $M_Bogie2_SS_HX_3       ! [-] Marker j
prim.par (                6 ,       $P_Bogie2_SecDamp_Lat_R       ) = 3.5000000149000003E-02  ! [m] Radius of x-section
prim.par (               13 ,       $P_Bogie2_SecDamp_Lat_R       ) = 3.5000000000000000E+01  ! [-] Number of planes

prim.type (                         $P_Bogie2_SecDamp_Lat_L       ) = 19                      ! Type
prim.ref (                          $P_Bogie2_SecDamp_Lat_L       ) = $M_Bogie2               ! Reference Marker
prim.color.r (            1 ,       $P_Bogie2_SecDamp_Lat_L       ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie2_SecDamp_Lat_L       ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie2_SecDamp_Lat_L       ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie2_SecDamp_Lat_L       ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie2_SecDamp_Lat_L       ) = $M_Carbody_HX_4         ! [-] Marker i
prim.par (                3 ,       $P_Bogie2_SecDamp_Lat_L       ) = $M_Bogie2_SS_HX_4       ! [-] Marker j
prim.par (                6 ,       $P_Bogie2_SecDamp_Lat_L       ) = 3.5000000149000003E-02  ! [m] Radius of x-section
prim.par (               13 ,       $P_Bogie2_SecDamp_Lat_L       ) = 3.5000000000000000E+01  ! [-] Number of planes

prim.type (                         $P_Bogie2_ksx_r               ) = 19                      ! Type
prim.ref (                          $P_Bogie2_ksx_r               ) = $M_Bogie2               ! Reference Marker
prim.color.r (            1 ,       $P_Bogie2_ksx_r               ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie2_ksx_r               ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie2_ksx_r               ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie2_ksx_r               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie2_ksx_r               ) = $M_Carbody_KSX_2r       ! [-] Marker i
prim.par (                3 ,       $P_Bogie2_ksx_r               ) = $M_Bogie2_SS_KSX_2r     ! [-] Marker j
prim.par (                6 ,       $P_Bogie2_ksx_r               ) = 3.5000000149000003E-02  ! [m] Radius of x-section
prim.par (               13 ,       $P_Bogie2_ksx_r               ) = 3.5000000000000000E+01  ! [-] Number of planes

prim.type (                         $P_Bogie2_ksx_l               ) = 19                      ! Type
prim.ref (                          $P_Bogie2_ksx_l               ) = $M_Bogie2               ! Reference Marker
prim.color.r (            1 ,       $P_Bogie2_ksx_l               ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie2_ksx_l               ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie2_ksx_l               ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie2_ksx_l               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie2_ksx_l               ) = $M_Carbody_KSX_2l       ! [-] Marker i
prim.par (                3 ,       $P_Bogie2_ksx_l               ) = $M_Bogie2_SS_KSX_2l     ! [-] Marker j
prim.par (                6 ,       $P_Bogie2_ksx_l               ) = 3.5000000149000003E-02  ! [m] Radius of x-section
prim.par (               13 ,       $P_Bogie2_ksx_l               ) = 3.5000000000000000E+01  ! [-] Number of planes

prim.type (                         $P_Bogie2_SecSpring_R         ) = 5                       ! Type
prim.ref (                          $P_Bogie2_SecSpring_R         ) = $M_Bogie2               ! Reference Marker
prim.pos (                2 ,       $P_Bogie2_SecSpring_R         ) = 1.0750000476999999E+00  ! Position
prim.pos (                3 ,       $P_Bogie2_SecSpring_R         ) = -5.5000001192000003E-01 ! Position
prim.vtx (                1 ,   1 , $P_Bogie2_SecSpring_R         ) = -3.0000001191999998E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_Bogie2_SecSpring_R         ) = 3.0000001191999998E-01  ! Vertices
prim.vtx (                1 ,   3 , $P_Bogie2_SecSpring_R         ) = 1.0000000149000000E-01  ! Vertices
prim.vtx (                1 ,   4 , $P_Bogie2_SecSpring_R         ) = -1.0000000149000000E-01 ! Vertices
prim.vtx (                2 ,   3 , $P_Bogie2_SecSpring_R         ) = 3.0000001191999998E-01  ! Vertices
prim.vtx (                2 ,   4 , $P_Bogie2_SecSpring_R         ) = 3.0000001191999998E-01  ! Vertices
prim.vtx (                3 ,   4 , $P_Bogie2_SecSpring_R         ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_Bogie2_SecSpring_R         ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie2_SecSpring_R         ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie2_SecSpring_R         ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie2_SecSpring_R         ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie2_SecSpring_R         ) = 0.0000000000000000E+00  ! [-] Contour by
prim.par (                4 ,       $P_Bogie2_SecSpring_R         ) = 1.0000000000000000E+00  ! [-] Contour
prim.par (                6 ,       $P_Bogie2_SecSpring_R         ) = 0.0000000000000000E+00  ! [-] Curve fitting type
prim.par (                9 ,       $P_Bogie2_SecSpring_R         ) = 0.0000000000000000E+00  ! [-] Material side
prim.par (               10 ,       $P_Bogie2_SecSpring_R         ) = 1.0000000149000000E-01  ! [m] Depth
prim.par (               12 ,       $P_Bogie2_SecSpring_R         ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               13 ,       $P_Bogie2_SecSpring_R         ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_Bogie2_SecSpring_L         ) = 5                       ! Type
prim.ref (                          $P_Bogie2_SecSpring_L         ) = $M_Bogie2               ! Reference Marker
prim.pos (                2 ,       $P_Bogie2_SecSpring_L         ) = -1.0750000476999999E+00 ! Position
prim.pos (                3 ,       $P_Bogie2_SecSpring_L         ) = -5.5000001192000003E-01 ! Position
prim.ang (                1 ,       $P_Bogie2_SecSpring_L         ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_Bogie2_SecSpring_L         ) = { 0 deg }               ! Angles
prim.ang (                3 ,       $P_Bogie2_SecSpring_L         ) = { -180 deg }            ! Angles
prim.vtx (                1 ,   1 , $P_Bogie2_SecSpring_L         ) = -3.0000001191999998E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_Bogie2_SecSpring_L         ) = 3.0000001191999998E-01  ! Vertices
prim.vtx (                1 ,   3 , $P_Bogie2_SecSpring_L         ) = 1.0000000149000000E-01  ! Vertices
prim.vtx (                1 ,   4 , $P_Bogie2_SecSpring_L         ) = -1.0000000149000000E-01 ! Vertices
prim.vtx (                2 ,   3 , $P_Bogie2_SecSpring_L         ) = 3.0000001191999998E-01  ! Vertices
prim.vtx (                2 ,   4 , $P_Bogie2_SecSpring_L         ) = 3.0000001191999998E-01  ! Vertices
prim.vtx (                3 ,   4 , $P_Bogie2_SecSpring_L         ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_Bogie2_SecSpring_L         ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie2_SecSpring_L         ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie2_SecSpring_L         ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie2_SecSpring_L         ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie2_SecSpring_L         ) = 0.0000000000000000E+00  ! [-] Contour by
prim.par (                4 ,       $P_Bogie2_SecSpring_L         ) = 1.0000000000000000E+00  ! [-] Contour
prim.par (                6 ,       $P_Bogie2_SecSpring_L         ) = 0.0000000000000000E+00  ! [-] Curve fitting type
prim.par (                9 ,       $P_Bogie2_SecSpring_L         ) = 0.0000000000000000E+00  ! [-] Material side
prim.par (               10 ,       $P_Bogie2_SecSpring_L         ) = 1.0000000149000000E-01  ! [m] Depth
prim.par (               12 ,       $P_Bogie2_SecSpring_L         ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               13 ,       $P_Bogie2_SecSpring_L         ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_Bogie2_Bumpstop_R          ) = 15                      ! Type
prim.ref (                          $P_Bogie2_Bumpstop_R          ) = $M_Bogie2               ! Reference Marker
prim.pos (                2 ,       $P_Bogie2_Bumpstop_R          ) = 1.8999999762000000E-01  ! Position
prim.pos (                3 ,       $P_Bogie2_Bumpstop_R          ) = -6.8000000714999997E-01 ! Position
prim.color.r (            1 ,       $P_Bogie2_Bumpstop_R          ) = 0.0000000000000000E+00  ! Colors (red component)
prim.color.r (            2 ,       $P_Bogie2_Bumpstop_R          ) = 0.0000000000000000E+00  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie2_Bumpstop_R          ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_Bogie2_Bumpstop_R          ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie2_Bumpstop_R          ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_Bogie2_Bumpstop_R          ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie2_Bumpstop_R          ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_Bogie2_Bumpstop_R          ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie2_Bumpstop_R          ) = 5.9999998658999999E-02  ! [m] Radius
prim.par (                3 ,       $P_Bogie2_Bumpstop_R          ) = { 180 deg }             ! [rad] Start angle
prim.par (                4 ,       $P_Bogie2_Bumpstop_R          ) = { 180 deg }             ! [rad] Delta angle
prim.par (                5 ,       $P_Bogie2_Bumpstop_R          ) = 1.2000000000000000E+01  ! [-] Number of meridians

prim.type (                         $P_Bogie2_Bumpstop_l          ) = 15                      ! Type
prim.ref (                          $P_Bogie2_Bumpstop_l          ) = $M_Bogie2               ! Reference Marker
prim.pos (                2 ,       $P_Bogie2_Bumpstop_l          ) = -1.8999999762000000E-01 ! Position
prim.pos (                3 ,       $P_Bogie2_Bumpstop_l          ) = -6.8000000714999997E-01 ! Position
prim.color.r (            1 ,       $P_Bogie2_Bumpstop_l          ) = 0.0000000000000000E+00  ! Colors (red component)
prim.color.r (            2 ,       $P_Bogie2_Bumpstop_l          ) = 0.0000000000000000E+00  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie2_Bumpstop_l          ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_Bogie2_Bumpstop_l          ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie2_Bumpstop_l          ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_Bogie2_Bumpstop_l          ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie2_Bumpstop_l          ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_Bogie2_Bumpstop_l          ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie2_Bumpstop_l          ) = 5.9999998658999999E-02  ! [m] Radius
prim.par (                3 ,       $P_Bogie2_Bumpstop_l          ) = { 0 deg }               ! [rad] Start angle
prim.par (                4 ,       $P_Bogie2_Bumpstop_l          ) = { 180 deg }             ! [rad] Delta angle
prim.par (                5 ,       $P_Bogie2_Bumpstop_l          ) = 1.2000000000000000E+01  ! [-] Number of meridians

prim.type (                         $P_PS_Spring_4l__3d_          ) = 13                      ! Type
prim.ref (                          $P_PS_Spring_4l__3d_          ) = $M_Bogie2_PS_4l_spring  ! Reference Marker
prim.pos (                3 ,       $P_PS_Spring_4l__3d_          ) = -9.0000003576000007E-02 ! Position
prim.ang (                1 ,       $P_PS_Spring_4l__3d_          ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_PS_Spring_4l__3d_          ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_PS_Spring_4l__3d_          ) = { 0 deg }               ! Angles
prim.color.r (            1 ,       $P_PS_Spring_4l__3d_          ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Spring_4l__3d_          ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Spring_4l__3d_          ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Spring_4l__3d_          ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_PS_Spring_4l__3d_          ) = 2.5999999046000000E-01  ! [m] Length
prim.par (                3 ,       $P_PS_Spring_4l__3d_          ) = 1.5999999642000001E-01  ! [m] Diameter
prim.par (                4 ,       $P_PS_Spring_4l__3d_          ) = 1.8000000000000000E+01  ! [-] Number of windings

prim.type (                         $P_PS_Damping_4l__3d_         ) = 7                       ! Type
prim.ref (                          $P_PS_Damping_4l__3d_         ) = $M_Bogie2_PS_4l_damping ! Reference Marker
prim.ang (                1 ,       $P_PS_Damping_4l__3d_         ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_PS_Damping_4l__3d_         ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_PS_Damping_4l__3d_         ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   1 , $P_PS_Damping_4l__3d_         ) = -1.1999999732000000E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_PS_Damping_4l__3d_         ) = 2.0000000298000001E-01  ! Vertices
prim.vtx (                2 ,   1 , $P_PS_Damping_4l__3d_         ) = 3.9999999106000002E-02  ! Vertices
prim.vtx (                2 ,   2 , $P_PS_Damping_4l__3d_         ) = 3.9999999106000002E-02  ! Vertices
prim.vtx (                3 ,   2 , $P_PS_Damping_4l__3d_         ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_PS_Damping_4l__3d_         ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.r (            2 ,       $P_PS_Damping_4l__3d_         ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Damping_4l__3d_         ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_PS_Damping_4l__3d_         ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Damping_4l__3d_         ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_PS_Damping_4l__3d_         ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Damping_4l__3d_         ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_PS_Damping_4l__3d_         ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (               11 ,       $P_PS_Damping_4l__3d_         ) = { 0 deg }               ! [rad] Start angle
prim.par (               12 ,       $P_PS_Damping_4l__3d_         ) = { 0 deg }               ! [rad] Delta angle
prim.par (               13 ,       $P_PS_Damping_4l__3d_         ) = 5.0000000000000000E+01  ! [-] Number of planes
prim.par (               15 ,       $P_PS_Damping_4l__3d_         ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               16 ,       $P_PS_Damping_4l__3d_         ) = 1.0000000000000000E+00  ! [-] Show top cap
prim.par (               17 ,       $P_PS_Damping_4l__3d_         ) = 1.0000000000000000E+00  ! [-] Show start cross section Cap
prim.par (               18 ,       $P_PS_Damping_4l__3d_         ) = 1.0000000000000000E+00  ! [-] Show end cross Section Cap

prim.type (                         $P_PS_Spring_4r__3d_          ) = 13                      ! Type
prim.ref (                          $P_PS_Spring_4r__3d_          ) = $M_Bogie2_PS_4r_spring  ! Reference Marker
prim.pos (                3 ,       $P_PS_Spring_4r__3d_          ) = -9.0000003576000007E-02 ! Position
prim.ang (                1 ,       $P_PS_Spring_4r__3d_          ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_PS_Spring_4r__3d_          ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_PS_Spring_4r__3d_          ) = { 0 deg }               ! Angles
prim.color.r (            1 ,       $P_PS_Spring_4r__3d_          ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Spring_4r__3d_          ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Spring_4r__3d_          ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Spring_4r__3d_          ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_PS_Spring_4r__3d_          ) = 2.5999999046000000E-01  ! [m] Length
prim.par (                3 ,       $P_PS_Spring_4r__3d_          ) = 1.5999999642000001E-01  ! [m] Diameter
prim.par (                4 ,       $P_PS_Spring_4r__3d_          ) = 1.8000000000000000E+01  ! [-] Number of windings

prim.type (                         $P_PS_Spring_3l__3d_          ) = 13                      ! Type
prim.ref (                          $P_PS_Spring_3l__3d_          ) = $M_Bogie2_PS_3l_Spring  ! Reference Marker
prim.pos (                3 ,       $P_PS_Spring_3l__3d_          ) = -9.0000003576000007E-02 ! Position
prim.ang (                1 ,       $P_PS_Spring_3l__3d_          ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_PS_Spring_3l__3d_          ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_PS_Spring_3l__3d_          ) = { 0 deg }               ! Angles
prim.color.r (            1 ,       $P_PS_Spring_3l__3d_          ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Spring_3l__3d_          ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Spring_3l__3d_          ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Spring_3l__3d_          ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_PS_Spring_3l__3d_          ) = 2.5999999046000000E-01  ! [m] Length
prim.par (                3 ,       $P_PS_Spring_3l__3d_          ) = 1.5999999642000001E-01  ! [m] Diameter
prim.par (                4 ,       $P_PS_Spring_3l__3d_          ) = 1.8000000000000000E+01  ! [-] Number of windings

prim.type (                         $P_PS_Spring_3r__3d_          ) = 13                      ! Type
prim.ref (                          $P_PS_Spring_3r__3d_          ) = $M_Bogie2_PS_3r_Spring  ! Reference Marker
prim.pos (                3 ,       $P_PS_Spring_3r__3d_          ) = -9.0000003576000007E-02 ! Position
prim.ang (                1 ,       $P_PS_Spring_3r__3d_          ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_PS_Spring_3r__3d_          ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_PS_Spring_3r__3d_          ) = { 0 deg }               ! Angles
prim.color.r (            1 ,       $P_PS_Spring_3r__3d_          ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Spring_3r__3d_          ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Spring_3r__3d_          ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Spring_3r__3d_          ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_PS_Spring_3r__3d_          ) = 2.5999999046000000E-01  ! [m] Length
prim.par (                3 ,       $P_PS_Spring_3r__3d_          ) = 1.5999999642000001E-01  ! [m] Diameter
prim.par (                4 ,       $P_PS_Spring_3r__3d_          ) = 1.8000000000000000E+01  ! [-] Number of windings

prim.type (                         $P_PS_Joint_4l__3d_           ) = 15                      ! Type
prim.ref (                          $P_PS_Joint_4l__3d_           ) = $M_Bogie2_PS_4l_Joint   ! Reference Marker
prim.pos (                3 ,       $P_PS_Joint_4l__3d_           ) = -3.9999999106000002E-02 ! Position
prim.color.r (            1 ,       $P_PS_Joint_4l__3d_           ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.r (            2 ,       $P_PS_Joint_4l__3d_           ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Joint_4l__3d_           ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.g (            2 ,       $P_PS_Joint_4l__3d_           ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Joint_4l__3d_           ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.b (            2 ,       $P_PS_Joint_4l__3d_           ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Joint_4l__3d_           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_PS_Joint_4l__3d_           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_PS_Joint_4l__3d_           ) = 7.0000000298000006E-02  ! [m] Radius
prim.par (                3 ,       $P_PS_Joint_4l__3d_           ) = { DIMLESS(0 deg) }      ! [rad] Start angle
prim.par (                4 ,       $P_PS_Joint_4l__3d_           ) = { DIMLESS(0 deg) }      ! [rad] Delta angle
prim.par (                5 ,       $P_PS_Joint_4l__3d_           ) = 1.2000000000000000E+01  ! [-] Number of meridians

prim.type (                         $P_PS_Joint_4r__3d_           ) = 15                      ! Type
prim.ref (                          $P_PS_Joint_4r__3d_           ) = $M_Bogie2_PS_4r_Joint   ! Reference Marker
prim.pos (                3 ,       $P_PS_Joint_4r__3d_           ) = -3.9999999106000002E-02 ! Position
prim.color.r (            1 ,       $P_PS_Joint_4r__3d_           ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.r (            2 ,       $P_PS_Joint_4r__3d_           ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Joint_4r__3d_           ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.g (            2 ,       $P_PS_Joint_4r__3d_           ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Joint_4r__3d_           ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.b (            2 ,       $P_PS_Joint_4r__3d_           ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Joint_4r__3d_           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_PS_Joint_4r__3d_           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_PS_Joint_4r__3d_           ) = 7.0000000298000006E-02  ! [m] Radius
prim.par (                3 ,       $P_PS_Joint_4r__3d_           ) = { 0 deg }               ! [rad] Start angle
prim.par (                4 ,       $P_PS_Joint_4r__3d_           ) = { 0 deg }               ! [rad] Delta angle
prim.par (                5 ,       $P_PS_Joint_4r__3d_           ) = 1.2000000000000000E+01  ! [-] Number of meridians

prim.type (                         $P_PS_Joint_3l__3d_           ) = 15                      ! Type
prim.ref (                          $P_PS_Joint_3l__3d_           ) = $M_Bogie2_PS_3l_Joint   ! Reference Marker
prim.pos (                3 ,       $P_PS_Joint_3l__3d_           ) = -3.9999999106000002E-02 ! Position
prim.color.r (            1 ,       $P_PS_Joint_3l__3d_           ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.r (            2 ,       $P_PS_Joint_3l__3d_           ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Joint_3l__3d_           ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.g (            2 ,       $P_PS_Joint_3l__3d_           ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Joint_3l__3d_           ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.b (            2 ,       $P_PS_Joint_3l__3d_           ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Joint_3l__3d_           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_PS_Joint_3l__3d_           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_PS_Joint_3l__3d_           ) = 7.0000000298000006E-02  ! [m] Radius
prim.par (                3 ,       $P_PS_Joint_3l__3d_           ) = { DIMLESS(0 deg) }      ! [rad] Start angle
prim.par (                4 ,       $P_PS_Joint_3l__3d_           ) = { DIMLESS(0 deg) }      ! [rad] Delta angle
prim.par (                5 ,       $P_PS_Joint_3l__3d_           ) = 1.2000000000000000E+01  ! [-] Number of meridians

prim.type (                         $P_PS_Joint_3r__3d_           ) = 15                      ! Type
prim.ref (                          $P_PS_Joint_3r__3d_           ) = $M_Bogie2_PS_3r_Joint   ! Reference Marker
prim.pos (                3 ,       $P_PS_Joint_3r__3d_           ) = -3.9999999106000002E-02 ! Position
prim.color.r (            1 ,       $P_PS_Joint_3r__3d_           ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.r (            2 ,       $P_PS_Joint_3r__3d_           ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Joint_3r__3d_           ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.g (            2 ,       $P_PS_Joint_3r__3d_           ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Joint_3r__3d_           ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.b (            2 ,       $P_PS_Joint_3r__3d_           ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Joint_3r__3d_           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_PS_Joint_3r__3d_           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_PS_Joint_3r__3d_           ) = 7.0000000298000006E-02  ! [m] Radius
prim.par (                3 ,       $P_PS_Joint_3r__3d_           ) = { DIMLESS(0 deg) }      ! [rad] Start angle
prim.par (                4 ,       $P_PS_Joint_3r__3d_           ) = { DIMLESS(0 deg) }      ! [rad] Delta angle
prim.par (                5 ,       $P_PS_Joint_3r__3d_           ) = 1.2000000000000000E+01  ! [-] Number of meridians


body.m (                            $B_box4l                      ) = 4.8200000762999998E+01  ! Mass of the Body
body.cg.pos (             1 ,       $B_box4l                      ) = 8.5000000894000005E-02  ! Center of gravity
body.cg.pos (             2 ,       $B_box4l                      ) = -4.9999998882000003E-03 ! Center of gravity
body.cg.pos (             3 ,       $B_box4l                      ) = -9.9999997765000005E-03 ! Center of gravity
body.I.tens (             1 ,   1 , $B_box4l                      ) = 7.0499998331000002E-01  ! Moments of inertia
body.I.tens (             2 ,   2 , $B_box4l                      ) = 2.7599999904999999E+00  ! Moments of inertia
body.I.tens (             3 ,   3 , $B_box4l                      ) = 2.6210000514999998E+00  ! Moments of inertia
body.type (                         $B_box4l                      ) = 0                       ! Body type: 0=rigid; 1=flex modal; 2=SIMBEAM; 4=nonlinear SIMBEAM
body.attr.2d.pos.x (                $B_box4l                      ) = -6.8000000000000000E+02
body.attr.2d.pos.y (                $B_box4l                      ) = -9.0000000000000000E+01
body.attr.2d.width (                $B_box4l                      ) = 5.0000000000000000E+01
body.attr.2d.height (               $B_box4l                      ) = 3.0000000000000000E+01

marker.type (                       $M_box4l                      ) = 1                       ! Type
marker.parent (                     $M_box4l                      ) = $B_box4l                ! Body

marker.type (                       $M_box4l_wheelset             ) = 1                       ! Type
marker.parent (                     $M_box4l_wheelset             ) = $B_box4l                ! Body

marker.type (                       $M_box4l_damping              ) = 1                       ! Type
marker.parent (                     $M_box4l_damping              ) = $B_box4l                ! Body
marker.pos (              1 ,       $M_box4l_damping              ) = $_PS_Damping_Box_B_x    ! Position
marker.pos (              2 ,       $M_box4l_damping              ) = $_PS_Damping_Box_L      ! Position
marker.pos (              3 ,       $M_box4l_damping              ) = $_PS_Damping_Z_low      ! Position

marker.type (                       $M_box4l_spring               ) = 1                       ! Type
marker.parent (                     $M_box4l_spring               ) = $B_box4l                ! Body
marker.pos (              3 ,       $M_box4l_spring               ) = $_PS_Spring_Z_box       ! Position

marker.type (                       $M_box4l_joint                ) = 1                       ! Type
marker.parent (                     $M_box4l_joint                ) = $B_box4l                ! Body
marker.pos (              1 ,       $M_box4l_joint                ) = $_PS_Joint_X_4          ! Position
marker.pos (              3 ,       $M_box4l_joint                ) = $_PS_Joint_Z_box        ! Position

marker.type (                       $M_box4l_BRF                  ) = 1                       ! Type
marker.parent (                     $M_box4l_BRF                  ) = $B_box4l                ! Body
marker.flx.type (                   $M_box4l_BRF                  ) = 4                       ! Flexible type

joint.from (                        $J_box4l                      ) = $M_wheelset4_l          ! From Marker
joint.to (                          $J_box4l                      ) = $M_box4l                ! To Marker
joint.type (                        $J_box4l                      ) = 2                       ! Type
joint.st.pos (            1 ,       $J_box4l                      ) = 0.0000000000000000E+00  ! Position
joint.st.vel (            1 ,       $J_box4l                      ) = 3.2318788745134782E+01  ! Velocity
joint.st.dep (            1 ,       $J_box4l                      ) = 0                       ! Dependency state
joint.attr.2d.pos.x (     1 ,       $J_box4l                      ) = -1510
joint.attr.2d.pos.y (     1 ,       $J_box4l                      ) = -90
joint.attr.2d.ori (       1 ,       $J_box4l                      ) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_box4l           ) = -5190, -5190, -1527
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_box4l           ) = -20, -90, -90
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_box4l             ) = -680, -690, -690, -702.5085525512695, -715.0171051025391, -740.0342102050781, -756.7122802734375, -823.424560546875, -867.8994140625, -927.19921875, -1006.265625, -1111.6875, -1252.25, -1252.25, -1262.25, -1272.25, -1282.25, -1292.25, -1493
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_box4l             ) = -80, -80, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -90, -90, -90, -90, -90, -90

prim.type (                         $P_box4l_Cuboid               ) = 5                       ! Type
prim.ref (                          $P_box4l_Cuboid               ) = $M_box4l                ! Reference Marker
prim.pos (                3 ,       $P_box4l_Cuboid               ) = 1.0000000149000000E-01  ! Position
prim.ang (                1 ,       $P_box4l_Cuboid               ) = { 90 deg }              ! Angles
prim.ang (                2 ,       $P_box4l_Cuboid               ) = { 0 deg }               ! Angles
prim.ang (                3 ,       $P_box4l_Cuboid               ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   1 , $P_box4l_Cuboid               ) = -2.5000000000000000E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_box4l_Cuboid               ) = -2.5000000000000000E-01 ! Vertices
prim.vtx (                1 ,   3 , $P_box4l_Cuboid               ) = -1.8000000715000000E-01 ! Vertices
prim.vtx (                1 ,   4 , $P_box4l_Cuboid               ) = -1.0000000149000000E-01 ! Vertices
prim.vtx (                1 ,   5 , $P_box4l_Cuboid               ) = 1.0000000149000000E-01  ! Vertices
prim.vtx (                1 ,   6 , $P_box4l_Cuboid               ) = 5.0000000000000000E-01  ! Vertices
prim.vtx (                1 ,   7 , $P_box4l_Cuboid               ) = 5.0000000000000000E-01  ! Vertices
prim.vtx (                1 ,   8 , $P_box4l_Cuboid               ) = 0.0000000000000000E+00  ! Vertices
prim.vtx (                2 ,   2 , $P_box4l_Cuboid               ) = -5.0000000745000002E-02 ! Vertices
prim.vtx (                2 ,   3 , $P_box4l_Cuboid               ) = -5.0000000745000002E-02 ! Vertices
prim.vtx (                2 ,   4 , $P_box4l_Cuboid               ) = -2.0000000298000001E-01 ! Vertices
prim.vtx (                2 ,   5 , $P_box4l_Cuboid               ) = -2.0000000298000001E-01 ! Vertices
prim.vtx (                2 ,   6 , $P_box4l_Cuboid               ) = -1.7000000178999999E-01 ! Vertices
prim.vtx (                2 ,   7 , $P_box4l_Cuboid               ) = -1.0000000149000000E-01 ! Vertices
prim.vtx (                2 ,   8 , $P_box4l_Cuboid               ) = 9.9999997765000005E-03  ! Vertices
prim.vtx (                3 ,   8 , $P_box4l_Cuboid               ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_box4l_Cuboid               ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_box4l_Cuboid               ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_box4l_Cuboid               ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_box4l_Cuboid               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_box4l_Cuboid               ) = 0.0000000000000000E+00  ! [-] Contour by
prim.par (                4 ,       $P_box4l_Cuboid               ) = 1.0000000000000000E+00  ! [-] Contour
prim.par (                6 ,       $P_box4l_Cuboid               ) = 0.0000000000000000E+00  ! [-] Curve fitting type
prim.par (                9 ,       $P_box4l_Cuboid               ) = 0.0000000000000000E+00  ! [-] Material side
prim.par (               10 ,       $P_box4l_Cuboid               ) = 2.0000000298000001E-01  ! [m] Depth
prim.par (               12 ,       $P_box4l_Cuboid               ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               13 ,       $P_box4l_Cuboid               ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_box4l_cylinder             ) = 2                       ! Type
prim.ref (                          $P_box4l_cylinder             ) = $M_box4l                ! Reference Marker
prim.ang (                1 ,       $P_box4l_cylinder             ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_box4l_cylinder             ) = { 116 deg }             ! Angles
prim.ang (                3 ,       $P_box4l_cylinder             ) = { 0 deg }               ! Angles
prim.color.r (            1 ,       $P_box4l_cylinder             ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.r (            2 ,       $P_box4l_cylinder             ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_box4l_cylinder             ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.g (            2 ,       $P_box4l_cylinder             ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_box4l_cylinder             ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.b (            2 ,       $P_box4l_cylinder             ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_box4l_cylinder             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_box4l_cylinder             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_box4l_cylinder             ) = 2.1999999881000001E-01  ! [m] Height
prim.par (                3 ,       $P_box4l_cylinder             ) = 2.3000000416999999E-01  ! [m] Outer diameter
prim.par (                5 ,       $P_box4l_cylinder             ) = 8.0000000000000000E+00  ! [-] Number of planes
prim.par (                7 ,       $P_box4l_cylinder             ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (                8 ,       $P_box4l_cylinder             ) = 1.0000000000000000E+00  ! [-] Show top cap


body.m (                            $B_box4r                      ) = 4.8200000762999998E+01  ! Mass of the Body
body.cg.pos (             1 ,       $B_box4r                      ) = 8.5000000894000005E-02  ! Center of gravity
body.cg.pos (             2 ,       $B_box4r                      ) = 4.9999998882000003E-03  ! Center of gravity
body.cg.pos (             3 ,       $B_box4r                      ) = -9.9999997765000005E-03 ! Center of gravity
body.I.tens (             1 ,   1 , $B_box4r                      ) = 7.0499998331000002E-01  ! Moments of inertia
body.I.tens (             2 ,   2 , $B_box4r                      ) = 2.7599999904999999E+00  ! Moments of inertia
body.I.tens (             3 ,   3 , $B_box4r                      ) = 2.6210000514999998E+00  ! Moments of inertia
body.I.kind (                       $B_box4r                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.I.ref (                        $B_box4r                      ) = null                    ! Inertia Reference Marker
body.type (                         $B_box4r                      ) = 0                       ! Body type: 0=rigid; 1=flex modal; 2=SIMBEAM; 4=nonlinear SIMBEAM
body.attr.2d.pos.x (                $B_box4r                      ) = -4.3000000000000000E+02
body.attr.2d.pos.y (                $B_box4r                      ) = 2.0000000000000000E+01
body.attr.2d.width (                $B_box4r                      ) = 5.0000000000000000E+01
body.attr.2d.height (               $B_box4r                      ) = 3.0000000000000000E+01

marker.type (                       $M_box4r                      ) = 1                       ! Type
marker.parent (                     $M_box4r                      ) = $B_box4r                ! Body

marker.type (                       $M_box4r_wheelset             ) = 1                       ! Type
marker.parent (                     $M_box4r_wheelset             ) = $B_box4r                ! Body

marker.type (                       $M_box4r_damping              ) = 1                       ! Type
marker.parent (                     $M_box4r_damping              ) = $B_box4r                ! Body
marker.pos (              1 ,       $M_box4r_damping              ) = $_PS_Damping_Box_B_x    ! Position
marker.pos (              2 ,       $M_box4r_damping              ) = $_PS_Damping_Box_R      ! Position
marker.pos (              3 ,       $M_box4r_damping              ) = $_PS_Damping_Z_low      ! Position

marker.type (                       $M_box4r_spring               ) = 1                       ! Type
marker.parent (                     $M_box4r_spring               ) = $B_box4r                ! Body
marker.pos (              3 ,       $M_box4r_spring               ) = $_PS_Spring_Z_box       ! Position

marker.type (                       $M_box4r_joint                ) = 1                       ! Type
marker.parent (                     $M_box4r_joint                ) = $B_box4r                ! Body
marker.pos (              1 ,       $M_box4r_joint                ) = $_PS_Joint_X_4          ! Position
marker.pos (              3 ,       $M_box4r_joint                ) = $_PS_Joint_Z_box        ! Position

marker.type (                       $M_box4r_BRF                  ) = 1                       ! Type
marker.parent (                     $M_box4r_BRF                  ) = $B_box4r                ! Body
marker.flx.type (                   $M_box4r_BRF                  ) = 4                       ! Flexible type

joint.from (                        $J_box4r                      ) = $M_wheelset4_r          ! From Marker
joint.to (                          $J_box4r                      ) = $M_box4r                ! To Marker
joint.type (                        $J_box4r                      ) = 2                       ! Type
joint.st.pos (            1 ,       $J_box4r                      ) = 0.0000000000000000E+00  ! Position
joint.st.vel (            1 ,       $J_box4r                      ) = 3.2318788745134782E+01  ! Velocity
joint.st.dep (            1 ,       $J_box4r                      ) = 0                       ! Dependency state
joint.attr.2d.pos.x (     1 ,       $J_box4r                      ) = -1480
joint.attr.2d.pos.y (     1 ,       $J_box4r                      ) = 60
joint.attr.2d.ori (       1 ,       $J_box4r                      ) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_box4r           ) = -5180, -5170, -5170, -1497
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_box4r           ) = -10, -10, 60, 60
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_box4r             ) = -420, -420, -1463
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_box4r             ) = 50, 60, 60

prim.type (                         $P_box4r_Cuboid               ) = 5                       ! Type
prim.ref (                          $P_box4r_Cuboid               ) = $M_box4r                ! Reference Marker
prim.pos (                3 ,       $P_box4r_Cuboid               ) = 1.0000000149000000E-01  ! Position
prim.ang (                1 ,       $P_box4r_Cuboid               ) = { 90 deg }              ! Angles
prim.ang (                2 ,       $P_box4r_Cuboid               ) = { 0 deg }               ! Angles
prim.ang (                3 ,       $P_box4r_Cuboid               ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   1 , $P_box4r_Cuboid               ) = -2.5000000000000000E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_box4r_Cuboid               ) = -2.5000000000000000E-01 ! Vertices
prim.vtx (                1 ,   3 , $P_box4r_Cuboid               ) = -1.8000000715000000E-01 ! Vertices
prim.vtx (                1 ,   4 , $P_box4r_Cuboid               ) = -1.0000000149000000E-01 ! Vertices
prim.vtx (                1 ,   5 , $P_box4r_Cuboid               ) = 1.0000000149000000E-01  ! Vertices
prim.vtx (                1 ,   6 , $P_box4r_Cuboid               ) = 5.0000000000000000E-01  ! Vertices
prim.vtx (                1 ,   7 , $P_box4r_Cuboid               ) = 5.0000000000000000E-01  ! Vertices
prim.vtx (                1 ,   8 , $P_box4r_Cuboid               ) = 0.0000000000000000E+00  ! Vertices
prim.vtx (                2 ,   2 , $P_box4r_Cuboid               ) = -5.0000000745000002E-02 ! Vertices
prim.vtx (                2 ,   3 , $P_box4r_Cuboid               ) = -5.0000000745000002E-02 ! Vertices
prim.vtx (                2 ,   4 , $P_box4r_Cuboid               ) = -2.0000000298000001E-01 ! Vertices
prim.vtx (                2 ,   5 , $P_box4r_Cuboid               ) = -2.0000000298000001E-01 ! Vertices
prim.vtx (                2 ,   6 , $P_box4r_Cuboid               ) = -1.7000000178999999E-01 ! Vertices
prim.vtx (                2 ,   7 , $P_box4r_Cuboid               ) = -1.0000000149000000E-01 ! Vertices
prim.vtx (                2 ,   8 , $P_box4r_Cuboid               ) = 9.9999997765000005E-03  ! Vertices
prim.vtx (                3 ,   8 , $P_box4r_Cuboid               ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_box4r_Cuboid               ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_box4r_Cuboid               ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_box4r_Cuboid               ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_box4r_Cuboid               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_box4r_Cuboid               ) = 0.0000000000000000E+00  ! [-] Contour by
prim.par (                4 ,       $P_box4r_Cuboid               ) = 1.0000000000000000E+00  ! [-] Contour
prim.par (                6 ,       $P_box4r_Cuboid               ) = 0.0000000000000000E+00  ! [-] Curve fitting type
prim.par (                9 ,       $P_box4r_Cuboid               ) = 0.0000000000000000E+00  ! [-] Material side
prim.par (               10 ,       $P_box4r_Cuboid               ) = 2.0000000298000001E-01  ! [m] Depth
prim.par (               12 ,       $P_box4r_Cuboid               ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               13 ,       $P_box4r_Cuboid               ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_box4r_cylinder             ) = 2                       ! Type
prim.ref (                          $P_box4r_cylinder             ) = $M_box4r                ! Reference Marker
prim.ang (                1 ,       $P_box4r_cylinder             ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_box4r_cylinder             ) = { 116 deg }             ! Angles
prim.ang (                3 ,       $P_box4r_cylinder             ) = { 0 deg }               ! Angles
prim.color.r (            1 ,       $P_box4r_cylinder             ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.r (            2 ,       $P_box4r_cylinder             ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_box4r_cylinder             ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.g (            2 ,       $P_box4r_cylinder             ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_box4r_cylinder             ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.b (            2 ,       $P_box4r_cylinder             ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_box4r_cylinder             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_box4r_cylinder             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_box4r_cylinder             ) = 2.1999999881000001E-01  ! [m] Height
prim.par (                3 ,       $P_box4r_cylinder             ) = 2.3000000416999999E-01  ! [m] Outer diameter
prim.par (                5 ,       $P_box4r_cylinder             ) = 8.0000000000000000E+00  ! [-] Number of planes
prim.par (                7 ,       $P_box4r_cylinder             ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (                8 ,       $P_box4r_cylinder             ) = 1.0000000000000000E+00  ! [-] Show top cap


body.m (                            $B_box3l                      ) = 4.8200000762999998E+01  ! Mass of the Body
body.cg.pos (             1 ,       $B_box3l                      ) = -8.5000000894000005E-02 ! Center of gravity
body.cg.pos (             2 ,       $B_box3l                      ) = -4.9999998882000003E-03 ! Center of gravity
body.cg.pos (             3 ,       $B_box3l                      ) = -9.9999997765000005E-03 ! Center of gravity
body.I.tens (             1 ,   1 , $B_box3l                      ) = 7.0499998331000002E-01  ! Moments of inertia
body.I.tens (             2 ,   2 , $B_box3l                      ) = 2.7599999904999999E+00  ! Moments of inertia
body.I.tens (             3 ,   3 , $B_box3l                      ) = 2.6210000514999998E+00  ! Moments of inertia
body.I.kind (                       $B_box3l                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.I.ref (                        $B_box3l                      ) = null                    ! Inertia Reference Marker
body.type (                         $B_box3l                      ) = 0                       ! Body type: 0=rigid; 1=flex modal; 2=SIMBEAM; 4=nonlinear SIMBEAM
body.attr.2d.pos.x (                $B_box3l                      ) = -5.2000000000000000E+02
body.attr.2d.pos.y (                $B_box3l                      ) = -9.0000000000000000E+01
body.attr.2d.width (                $B_box3l                      ) = 5.0000000000000000E+01
body.attr.2d.height (               $B_box3l                      ) = 3.0000000000000000E+01

marker.type (                       $M_box3l                      ) = 1                       ! Type
marker.parent (                     $M_box3l                      ) = $B_box3l                ! Body

marker.type (                       $M_box3l_wheelset             ) = 1                       ! Type
marker.parent (                     $M_box3l_wheelset             ) = $B_box3l                ! Body

marker.type (                       $M_box3l_damping              ) = 1                       ! Type
marker.parent (                     $M_box3l_damping              ) = $B_box3l                ! Body
marker.pos (              1 ,       $M_box3l_damping              ) = $_PS_Damping_Box_F_x    ! Position
marker.pos (              2 ,       $M_box3l_damping              ) = $_PS_Damping_Box_L      ! Position
marker.pos (              3 ,       $M_box3l_damping              ) = $_PS_Damping_Z_low      ! Position

marker.type (                       $M_box3l_spring               ) = 1                       ! Type
marker.parent (                     $M_box3l_spring               ) = $B_box3l                ! Body
marker.pos (              3 ,       $M_box3l_spring               ) = $_PS_Spring_Z_box       ! Position

marker.type (                       $M_box3l_joint                ) = 1                       ! Type
marker.parent (                     $M_box3l_joint                ) = $B_box3l                ! Body
marker.pos (              1 ,       $M_box3l_joint                ) = $_PS_Joint_X_3          ! Position
marker.pos (              3 ,       $M_box3l_joint                ) = $_PS_Joint_Z_box        ! Position

marker.type (                       $M_box3l_BRF                  ) = 1                       ! Type
marker.parent (                     $M_box3l_BRF                  ) = $B_box3l                ! Body
marker.flx.type (                   $M_box3l_BRF                  ) = 4                       ! Flexible type

joint.from (                        $J_box3l                      ) = $M_wheelset3_l          ! From Marker
joint.to (                          $J_box3l                      ) = $M_box3l                ! To Marker
joint.type (                        $J_box3l                      ) = 2                       ! Type
joint.st.pos (            1 ,       $J_box3l                      ) = 0.0000000000000000E+00  ! Position
joint.st.vel (            1 ,       $J_box3l                      ) = 3.2318788745134796E+01  ! Velocity
joint.st.dep (            1 ,       $J_box3l                      ) = 0                       ! Dependency state
joint.attr.2d.pos.x (     1 ,       $J_box3l                      ) = -1440
joint.attr.2d.pos.y (     1 ,       $J_box3l                      ) = -110
joint.attr.2d.ori (       1 ,       $J_box3l                      ) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_box3l           ) = -5090, -5090, -1457
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_box3l           ) = -20, -110, -110
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_box3l             ) = -520, -530, -530, -1423
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_box3l             ) = -80, -80, -110, -110

prim.type (                         $P_box3l_Cuboid               ) = 5                       ! Type
prim.ref (                          $P_box3l_Cuboid               ) = $M_box3l                ! Reference Marker
prim.pos (                3 ,       $P_box3l_Cuboid               ) = 1.0000000149000000E-01  ! Position
prim.ang (                1 ,       $P_box3l_Cuboid               ) = { 90 deg }              ! Angles
prim.ang (                2 ,       $P_box3l_Cuboid               ) = { 180 deg }             ! Angles
prim.ang (                3 ,       $P_box3l_Cuboid               ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   1 , $P_box3l_Cuboid               ) = -2.5000000000000000E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_box3l_Cuboid               ) = -2.5000000000000000E-01 ! Vertices
prim.vtx (                1 ,   3 , $P_box3l_Cuboid               ) = -1.8000000715000000E-01 ! Vertices
prim.vtx (                1 ,   4 , $P_box3l_Cuboid               ) = -1.0000000149000000E-01 ! Vertices
prim.vtx (                1 ,   5 , $P_box3l_Cuboid               ) = 1.0000000149000000E-01  ! Vertices
prim.vtx (                1 ,   6 , $P_box3l_Cuboid               ) = 5.0000000000000000E-01  ! Vertices
prim.vtx (                1 ,   7 , $P_box3l_Cuboid               ) = 5.0000000000000000E-01  ! Vertices
prim.vtx (                1 ,   8 , $P_box3l_Cuboid               ) = 0.0000000000000000E+00  ! Vertices
prim.vtx (                2 ,   2 , $P_box3l_Cuboid               ) = -5.0000000745000002E-02 ! Vertices
prim.vtx (                2 ,   3 , $P_box3l_Cuboid               ) = -5.0000000745000002E-02 ! Vertices
prim.vtx (                2 ,   4 , $P_box3l_Cuboid               ) = -2.0000000298000001E-01 ! Vertices
prim.vtx (                2 ,   5 , $P_box3l_Cuboid               ) = -2.0000000298000001E-01 ! Vertices
prim.vtx (                2 ,   6 , $P_box3l_Cuboid               ) = -1.7000000178999999E-01 ! Vertices
prim.vtx (                2 ,   7 , $P_box3l_Cuboid               ) = -1.0000000149000000E-01 ! Vertices
prim.vtx (                2 ,   8 , $P_box3l_Cuboid               ) = 9.9999997765000005E-03  ! Vertices
prim.vtx (                3 ,   8 , $P_box3l_Cuboid               ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_box3l_Cuboid               ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_box3l_Cuboid               ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_box3l_Cuboid               ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_box3l_Cuboid               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_box3l_Cuboid               ) = 0.0000000000000000E+00  ! [-] Contour by
prim.par (                4 ,       $P_box3l_Cuboid               ) = 1.0000000000000000E+00  ! [-] Contour
prim.par (                6 ,       $P_box3l_Cuboid               ) = 0.0000000000000000E+00  ! [-] Curve fitting type
prim.par (                9 ,       $P_box3l_Cuboid               ) = 0.0000000000000000E+00  ! [-] Material side
prim.par (               10 ,       $P_box3l_Cuboid               ) = 2.0000000298000001E-01  ! [m] Depth
prim.par (               12 ,       $P_box3l_Cuboid               ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               13 ,       $P_box3l_Cuboid               ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_box3l_cylinder             ) = 2                       ! Type
prim.ref (                          $P_box3l_cylinder             ) = $M_box3l                ! Reference Marker
prim.ang (                1 ,       $P_box3l_cylinder             ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_box3l_cylinder             ) = { 116 deg }             ! Angles
prim.ang (                3 ,       $P_box3l_cylinder             ) = { 0 deg }               ! Angles
prim.color.r (            1 ,       $P_box3l_cylinder             ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.r (            2 ,       $P_box3l_cylinder             ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_box3l_cylinder             ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.g (            2 ,       $P_box3l_cylinder             ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_box3l_cylinder             ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.b (            2 ,       $P_box3l_cylinder             ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_box3l_cylinder             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_box3l_cylinder             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_box3l_cylinder             ) = 2.1999999881000001E-01  ! [m] Height
prim.par (                3 ,       $P_box3l_cylinder             ) = 2.3000000416999999E-01  ! [m] Outer diameter
prim.par (                5 ,       $P_box3l_cylinder             ) = 8.0000000000000000E+00  ! [-] Number of planes
prim.par (                7 ,       $P_box3l_cylinder             ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (                8 ,       $P_box3l_cylinder             ) = 1.0000000000000000E+00  ! [-] Show top cap


body.m (                            $B_box3r                      ) = 4.8200000762999998E+01  ! Mass of the Body
body.cg.pos (             1 ,       $B_box3r                      ) = -8.5000000894000005E-02 ! Center of gravity
body.cg.pos (             2 ,       $B_box3r                      ) = 4.9999998882000003E-03  ! Center of gravity
body.cg.pos (             3 ,       $B_box3r                      ) = -9.9999997765000005E-03 ! Center of gravity
body.I.tens (             1 ,   1 , $B_box3r                      ) = 7.0499998331000002E-01  ! Moments of inertia
body.I.tens (             2 ,   2 , $B_box3r                      ) = 2.7599999904999999E+00  ! Moments of inertia
body.I.tens (             3 ,   3 , $B_box3r                      ) = 2.6210000514999998E+00  ! Moments of inertia
body.I.kind (                       $B_box3r                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.I.ref (                        $B_box3r                      ) = null                    ! Inertia Reference Marker
body.type (                         $B_box3r                      ) = 0                       ! Body type: 0=rigid; 1=flex modal; 2=SIMBEAM; 4=nonlinear SIMBEAM
body.attr.2d.pos.x (                $B_box3r                      ) = -3.2000000000000000E+02
body.attr.2d.pos.y (                $B_box3r                      ) = 2.0000000000000000E+01
body.attr.2d.width (                $B_box3r                      ) = 5.0000000000000000E+01
body.attr.2d.height (               $B_box3r                      ) = 3.0000000000000000E+01

marker.type (                       $M_box3r                      ) = 1                       ! Type
marker.parent (                     $M_box3r                      ) = $B_box3r                ! Body

marker.type (                       $M_box3r_wheelset             ) = 1                       ! Type
marker.parent (                     $M_box3r_wheelset             ) = $B_box3r                ! Body

marker.type (                       $M_box3r_damping              ) = 1                       ! Type
marker.parent (                     $M_box3r_damping              ) = $B_box3r                ! Body
marker.pos (              1 ,       $M_box3r_damping              ) = $_PS_Damping_Box_F_x    ! Position
marker.pos (              2 ,       $M_box3r_damping              ) = $_PS_Damping_Box_R      ! Position
marker.pos (              3 ,       $M_box3r_damping              ) = $_PS_Damping_Z_low      ! Position

marker.type (                       $M_box3r_spring               ) = 1                       ! Type
marker.parent (                     $M_box3r_spring               ) = $B_box3r                ! Body
marker.pos (              3 ,       $M_box3r_spring               ) = $_PS_Spring_Z_box       ! Position

marker.type (                       $M_box3r_joint                ) = 1                       ! Type
marker.parent (                     $M_box3r_joint                ) = $B_box3r                ! Body
marker.pos (              1 ,       $M_box3r_joint                ) = $_PS_Joint_X_3          ! Position
marker.pos (              3 ,       $M_box3r_joint                ) = $_PS_Joint_Z_box        ! Position

marker.type (                       $M_box3r_BRF                  ) = 1                       ! Type
marker.parent (                     $M_box3r_BRF                  ) = $B_box3r                ! Body
marker.flx.type (                   $M_box3r_BRF                  ) = 4                       ! Flexible type

joint.from (                        $J_box3r                      ) = $M_wheelset3_r          ! From Marker
joint.to (                          $J_box3r                      ) = $M_box3r                ! To Marker
joint.type (                        $J_box3r                      ) = 2                       ! Type
joint.st.pos (            1 ,       $J_box3r                      ) = 0.0000000000000000E+00  ! Position
joint.st.vel (            1 ,       $J_box3r                      ) = 3.2318788745134796E+01  ! Velocity
joint.st.dep (            1 ,       $J_box3r                      ) = 0                       ! Dependency state
joint.attr.2d.pos.x (     1 ,       $J_box3r                      ) = -1410
joint.attr.2d.pos.y (     1 ,       $J_box3r                      ) = 80
joint.attr.2d.ori (       1 ,       $J_box3r                      ) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_box3r           ) = -5080, -5070, -5070, -1427
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_box3r           ) = -10, -10, 80, 80
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_box3r             ) = -310, -310, -1393
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_box3r             ) = 50, 80, 80

prim.type (                         $P_box3r_Cuboid               ) = 5                       ! Type
prim.ref (                          $P_box3r_Cuboid               ) = $M_box3r                ! Reference Marker
prim.pos (                3 ,       $P_box3r_Cuboid               ) = 1.0000000149000000E-01  ! Position
prim.ang (                1 ,       $P_box3r_Cuboid               ) = { 90 deg }              ! Angles
prim.ang (                2 ,       $P_box3r_Cuboid               ) = { 180 deg }             ! Angles
prim.ang (                3 ,       $P_box3r_Cuboid               ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   1 , $P_box3r_Cuboid               ) = -2.5000000000000000E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_box3r_Cuboid               ) = -2.5000000000000000E-01 ! Vertices
prim.vtx (                1 ,   3 , $P_box3r_Cuboid               ) = -1.8000000715000000E-01 ! Vertices
prim.vtx (                1 ,   4 , $P_box3r_Cuboid               ) = -1.0000000149000000E-01 ! Vertices
prim.vtx (                1 ,   5 , $P_box3r_Cuboid               ) = 1.0000000149000000E-01  ! Vertices
prim.vtx (                1 ,   6 , $P_box3r_Cuboid               ) = 5.0000000000000000E-01  ! Vertices
prim.vtx (                1 ,   7 , $P_box3r_Cuboid               ) = 5.0000000000000000E-01  ! Vertices
prim.vtx (                1 ,   8 , $P_box3r_Cuboid               ) = 0.0000000000000000E+00  ! Vertices
prim.vtx (                2 ,   2 , $P_box3r_Cuboid               ) = -5.0000000745000002E-02 ! Vertices
prim.vtx (                2 ,   3 , $P_box3r_Cuboid               ) = -5.0000000745000002E-02 ! Vertices
prim.vtx (                2 ,   4 , $P_box3r_Cuboid               ) = -2.0000000298000001E-01 ! Vertices
prim.vtx (                2 ,   5 , $P_box3r_Cuboid               ) = -2.0000000298000001E-01 ! Vertices
prim.vtx (                2 ,   6 , $P_box3r_Cuboid               ) = -1.7000000178999999E-01 ! Vertices
prim.vtx (                2 ,   7 , $P_box3r_Cuboid               ) = -1.0000000149000000E-01 ! Vertices
prim.vtx (                2 ,   8 , $P_box3r_Cuboid               ) = 9.9999997765000005E-03  ! Vertices
prim.vtx (                3 ,   8 , $P_box3r_Cuboid               ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_box3r_Cuboid               ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_box3r_Cuboid               ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_box3r_Cuboid               ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_box3r_Cuboid               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_box3r_Cuboid               ) = 0.0000000000000000E+00  ! [-] Contour by
prim.par (                4 ,       $P_box3r_Cuboid               ) = 1.0000000000000000E+00  ! [-] Contour
prim.par (                6 ,       $P_box3r_Cuboid               ) = 0.0000000000000000E+00  ! [-] Curve fitting type
prim.par (                9 ,       $P_box3r_Cuboid               ) = 0.0000000000000000E+00  ! [-] Material side
prim.par (               10 ,       $P_box3r_Cuboid               ) = 2.0000000298000001E-01  ! [m] Depth
prim.par (               12 ,       $P_box3r_Cuboid               ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               13 ,       $P_box3r_Cuboid               ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_box3r_cylinder             ) = 2                       ! Type
prim.ref (                          $P_box3r_cylinder             ) = $M_box3r                ! Reference Marker
prim.ang (                1 ,       $P_box3r_cylinder             ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_box3r_cylinder             ) = { 116 deg }             ! Angles
prim.ang (                3 ,       $P_box3r_cylinder             ) = { 0 deg }               ! Angles
prim.color.r (            1 ,       $P_box3r_cylinder             ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.r (            2 ,       $P_box3r_cylinder             ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_box3r_cylinder             ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.g (            2 ,       $P_box3r_cylinder             ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_box3r_cylinder             ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.b (            2 ,       $P_box3r_cylinder             ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_box3r_cylinder             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_box3r_cylinder             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_box3r_cylinder             ) = 2.1999999881000001E-01  ! [m] Height
prim.par (                3 ,       $P_box3r_cylinder             ) = 2.3000000416999999E-01  ! [m] Outer diameter
prim.par (                5 ,       $P_box3r_cylinder             ) = 8.0000000000000000E+00  ! [-] Number of planes
prim.par (                7 ,       $P_box3r_cylinder             ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (                8 ,       $P_box3r_cylinder             ) = 1.0000000000000000E+00  ! [-] Show top cap


body.m (                            $B_wheelset2                  ) = 1.9018000488000000E+03  ! Mass of the Body
body.I.tens (             1 ,   1 , $B_wheelset2                  ) = 6.8500000000000000E+02  ! Moments of inertia
body.I.tens (             2 ,   2 , $B_wheelset2                  ) = 7.6000000000000000E+01  ! Moments of inertia
body.I.tens (             3 ,   3 , $B_wheelset2                  ) = 6.8500000000000000E+02  ! Moments of inertia
body.I.kind (                       $B_wheelset2                  ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.I.ref (                        $B_wheelset2                  ) = null                    ! Inertia Reference Marker
body.type (                         $B_wheelset2                  ) = 0                       ! Body type: 0=rigid; 1=flex modal; 2=SIMBEAM; 4=nonlinear SIMBEAM
body.attr.2d.pos.x (                $B_wheelset2                  ) = 1.4900000000000000E+03
body.attr.2d.pos.y (                $B_wheelset2                  ) = -2.0000000000000000E+01
body.attr.2d.width (                $B_wheelset2                  ) = 5.0000000000000000E+01
body.attr.2d.height (               $B_wheelset2                  ) = 3.0000000000000000E+01

marker.type (                       $M_wheelset2                  ) = 1                       ! Type
marker.parent (                     $M_wheelset2                  ) = $B_wheelset2            ! Body

marker.type (                       $M_wheelset2_l                ) = 1                       ! Type
marker.parent (                     $M_wheelset2_l                ) = $B_wheelset2            ! Body
marker.pos (              2 ,       $M_wheelset2_l                ) = -1.0000000000000000E+00 ! Position

marker.type (                       $M_wheelset2_r                ) = 1                       ! Type
marker.parent (                     $M_wheelset2_r                ) = $B_wheelset2            ! Body
marker.pos (              2 ,       $M_wheelset2_r                ) = 1.0000000000000000E+00  ! Position

marker.type (                       $M_wheelset2_BRF              ) = 1                       ! Type
marker.parent (                     $M_wheelset2_BRF              ) = $B_wheelset2            ! Body
marker.flx.type (                   $M_wheelset2_BRF              ) = 4                       ! Flexible type

marker.type (                       $M_B_wheelset2_ProfRef_RWP_WR2) = -78                     ! Type
marker.parent (                     $M_B_wheelset2_ProfRef_RWP_WR2) = $B_wheelset2            ! Body
marker.par (              1 ,       $M_B_wheelset2_ProfRef_RWP_WR2) = $RWP_WR2                ! [-] Rail-Wheel Pair

marker.type (                       $M_B_wheelset2_ProfRef_RWP_WL2) = -78                     ! Type
marker.parent (                     $M_B_wheelset2_ProfRef_RWP_WL2) = $B_wheelset2            ! Body
marker.par (              1 ,       $M_B_wheelset2_ProfRef_RWP_WL2) = $RWP_WL2                ! [-] Rail-Wheel Pair

joint.from (                        $J_wheelset2                  ) = $M_Isys                 ! From Marker
joint.to (                          $J_wheelset2                  ) = $M_wheelset2            ! To Marker
joint.type (                        $J_wheelset2                  ) = 7                       ! Type
joint.st.pos (            1 ,       $J_wheelset2                  ) = $_L                     ! Position
joint.st.pos (            2 ,       $J_wheelset2                  ) = 0.0000000000000000E+00  ! Position
joint.st.pos (            3 ,       $J_wheelset2                  ) = -4.2977271891000002E-01 ! Position
joint.st.pos (            4 ,       $J_wheelset2                  ) = -4.0311279590999997E-15 ! Position
joint.st.pos (            5 ,       $J_wheelset2                  ) = 0.0000000000000000E+00  ! Position
joint.st.pos (            6 ,       $J_wheelset2                  ) = 0.0000000000000000E+00  ! Position
joint.st.vel (            1 ,       $J_wheelset2                  ) = 1.3888888888888889E+01  ! Velocity
joint.st.vel (            2 ,       $J_wheelset2                  ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            3 ,       $J_wheelset2                  ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            4 ,       $J_wheelset2                  ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            5 ,       $J_wheelset2                  ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            6 ,       $J_wheelset2                  ) = -3.2318788745134796E+01 ! Velocity
joint.st.dep (            1 ,       $J_wheelset2                  ) = 0                       ! Dependency state
joint.st.dep (            2 ,       $J_wheelset2                  ) = 0                       ! Dependency state
joint.st.dep (            3 ,       $J_wheelset2                  ) = 1                       ! Dependency state
joint.st.dep (            4 ,       $J_wheelset2                  ) = 1                       ! Dependency state
joint.st.dep (            5 ,       $J_wheelset2                  ) = 0                       ! Dependency state
joint.st.dep (            6 ,       $J_wheelset2                  ) = 0                       ! Dependency state
joint.st.equi (           6 ,       $J_wheelset2                  ) = 2                       ! Equilibrium
joint.par (               3 ,       $J_wheelset2                  ) = 0.0000000000000000E+00  ! [-] Degrees of freedom
joint.attr.2d.pos.x (     1 ,       $J_wheelset2                  ) = -2800
joint.attr.2d.pos.y (     1 ,       $J_wheelset2                  ) = -20
joint.attr.2d.ori (       1 ,       $J_wheelset2                  ) = 90
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_wheelset2       ) = -2800, -2800
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_wheelset2       ) = -160, -37
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_wheelset2         ) = 1490, 1480, 1480, 1475.866431593895, 1463.46572637558, 1446.93145275116, 1435.908603668213, 1421.211471557617, 1401.615295410156, 1323.230590820313, 1270.97412109375, 1201.298828125, 1108.3984375, 736.796875, 489.0625, 489.0625, 489.0625, 489.0625, 479.0625, 469.0625, 469.0625, 459.0625, 449.0625, 439.0625, 429.0625, 419.0625, 409.0625, 399.0625, 389.0625, 379.0625, 369.0625, 359.0625, 349.0625, 339.0625, 329.0625, 319.0625, 309.0625, 299.0625, 289.0625, 279.0625, -121.25, -121.25, -121.25, -121.25, -121.25, -121.25, -121.25, -121.25, -121.25, -131.25, -141.25, -151.25, -161.25, -171.25, -181.25, -191.25, -201.25, -211.25, -221.25, -231.25, -241.25, -251.25, -261.25, -271.25, -281.25, -291.25, -301.25, -311.25, -321.25, -331.25, -341.25, -955, -955, -955, -955, -965, -975, -985, -995, -1005, -1015, -1025, -1035, -1045, -1055, -1065, -1075, -1085, -1095, -1105, -1115, -1125, -1135, -1145, -1155, -1165, -1175, -1185, -1195, -1205, -1215, -1225, -1235, -1245, -1255, -1265, -1275, -1285, -1295, -1305, -2240, -2240, -2240, -2250, -2260, -2270, -2280, -2290, -2300, -2310, -2320, -2330, -2340, -2350, -2360, -2370, -2380, -2390, -2400, -2410, -2420, -2430, -2440, -2450, -2460, -2470, -2480, -2490, -2500, -2510, -2520, -2530, -2540, -2550, -2560, -2570, -2580, -2590, -2600, -2610, -2620, -2630, -2640, -2650, -2660, -2670, -2680, -2690, -2700, -2710, -2720, -2730, -2740, -2750, -2760, -2770, -2780, -2790, -2800, -2800
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_wheelset2         ) = -10, -10, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -30, -20, -10, -10, -10, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -50, -30, -20, -10, 0, 10, 20, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 40, 30, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3

prim.type (                         $P_wheelset2_Cuboid           ) = 2                       ! Type
prim.ref (                          $P_wheelset2_Cuboid           ) = $M_wheelset2            ! Reference Marker
prim.color.r (            1 ,       $P_wheelset2_Cuboid           ) = 0.0000000000000000E+00  ! Colors (red component)
prim.color.r (            2 ,       $P_wheelset2_Cuboid           ) = 0.0000000000000000E+00  ! Colors (red component)
prim.color.g (            1 ,       $P_wheelset2_Cuboid           ) = 4.6000000000000000E+01  ! Colors (green component)
prim.color.g (            2 ,       $P_wheelset2_Cuboid           ) = 4.6000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_wheelset2_Cuboid           ) = 9.2000000000000000E+01  ! Colors (blue component)
prim.color.b (            2 ,       $P_wheelset2_Cuboid           ) = 9.2000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_wheelset2_Cuboid           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_wheelset2_Cuboid           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_wheelset2_Cuboid           ) = 2.0000000000000000E+00  ! [m] Height
prim.par (                3 ,       $P_wheelset2_Cuboid           ) = 2.0000000298000001E-01  ! [m] Outer diameter
prim.par (                5 ,       $P_wheelset2_Cuboid           ) = 1.6000000000000000E+01  ! [-] Number of planes
prim.par (                7 ,       $P_wheelset2_Cuboid           ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (                8 ,       $P_wheelset2_Cuboid           ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_B_wheelset2_ProfRef_RWP_WR2) = 78                      ! Type
prim.ref (                          $P_B_wheelset2_ProfRef_RWP_WR2) = $M_B_wheelset2_ProfRef_RWP_WR2 ! Reference Marker
prim.color.r (            1 ,       $P_B_wheelset2_ProfRef_RWP_WR2) = 5.8000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_B_wheelset2_ProfRef_RWP_WR2) = 9.8000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_B_wheelset2_ProfRef_RWP_WR2) = 2.0500000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_B_wheelset2_ProfRef_RWP_WR2) = 5.0000000000000000E-01  ! Colors (transparency component)
prim.par (                1 ,       $P_B_wheelset2_ProfRef_RWP_WR2) = $RWP_WR2                ! [-] Rail-wheel pair

prim.type (                         $P_B_wheelset2_ProfRef_RWP_WL2) = 78                      ! Type
prim.ref (                          $P_B_wheelset2_ProfRef_RWP_WL2) = $M_B_wheelset2_ProfRef_RWP_WL2 ! Reference Marker
prim.color.r (            1 ,       $P_B_wheelset2_ProfRef_RWP_WL2) = 5.8000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_B_wheelset2_ProfRef_RWP_WL2) = 9.8000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_B_wheelset2_ProfRef_RWP_WL2) = 2.0500000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_B_wheelset2_ProfRef_RWP_WL2) = 5.0000000000000000E-01  ! Colors (transparency component)
prim.par (                1 ,       $P_B_wheelset2_ProfRef_RWP_WL2) = $RWP_WL2                ! [-] Rail-wheel pair


body.m (                            $B_Bogie                      ) = 2.2800000000000000E+03  ! Mass of the Body
body.cg.pos (             3 ,       $B_Bogie                      ) = -5.0999999046000000E-01 ! Center of gravity
body.I.tens (             1 ,   1 , $B_Bogie                      ) = 1.8470000000000000E+03  ! Moments of inertia
body.I.tens (             2 ,   2 , $B_Bogie                      ) = 1.2490000000000000E+03  ! Moments of inertia
body.I.tens (             3 ,   3 , $B_Bogie                      ) = 2.2800000000000000E+03  ! Moments of inertia
body.I.kind (                       $B_Bogie                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.I.ref (                        $B_Bogie                      ) = null                    ! Inertia Reference Marker
body.type (                         $B_Bogie                      ) = 0                       ! Body type: 0=rigid; 1=flex modal; 2=SIMBEAM; 4=nonlinear SIMBEAM
body.attr.2d.pos.x (                $B_Bogie                      ) = 1.0400000000000000E+03
body.attr.2d.pos.y (                $B_Bogie                      ) = -2.0000000000000000E+01
body.attr.2d.width (                $B_Bogie                      ) = 5.0000000000000000E+01
body.attr.2d.height (               $B_Bogie                      ) = 3.0000000000000000E+01

marker.type (                       $M_Bogie                      ) = 1                       ! Type
marker.parent (                     $M_Bogie                      ) = $B_Bogie                ! Body

marker.type (                       $M_Bogie_PS_2l_damping        ) = 1                       ! Type
marker.parent (                     $M_Bogie_PS_2l_damping        ) = $B_Bogie                ! Body
marker.pos (              1 ,       $M_Bogie_PS_2l_damping        ) = $_PS_Damping_Bogie_B_x  ! Position
marker.pos (              2 ,       $M_Bogie_PS_2l_damping        ) = $_PS_Damping_Bogie_L    ! Position
marker.pos (              3 ,       $M_Bogie_PS_2l_damping        ) = $_PS_Damping_Z_high     ! Position

marker.type (                       $M_Bogie_PS_2r_damping        ) = 1                       ! Type
marker.parent (                     $M_Bogie_PS_2r_damping        ) = $B_Bogie                ! Body
marker.pos (              1 ,       $M_Bogie_PS_2r_damping        ) = $_PS_Damping_Bogie_B_x  ! Position
marker.pos (              2 ,       $M_Bogie_PS_2r_damping        ) = $_PS_Damping_Bogie_R    ! Position
marker.pos (              3 ,       $M_Bogie_PS_2r_damping        ) = $_PS_Damping_Z_high     ! Position

marker.type (                       $M_Bogie_PS_1l_damping        ) = 1                       ! Type
marker.parent (                     $M_Bogie_PS_1l_damping        ) = $B_Bogie                ! Body
marker.pos (              1 ,       $M_Bogie_PS_1l_damping        ) = $_PS_Damping_Bogie_F_x  ! Position
marker.pos (              2 ,       $M_Bogie_PS_1l_damping        ) = $_PS_Damping_Bogie_L    ! Position
marker.pos (              3 ,       $M_Bogie_PS_1l_damping        ) = $_PS_Damping_Z_high     ! Position

marker.type (                       $M_Bogie_PS_1r_damping        ) = 1                       ! Type
marker.parent (                     $M_Bogie_PS_1r_damping        ) = $B_Bogie                ! Body
marker.pos (              1 ,       $M_Bogie_PS_1r_damping        ) = $_PS_Damping_Bogie_F_x  ! Position
marker.pos (              2 ,       $M_Bogie_PS_1r_damping        ) = $_PS_Damping_Bogie_R    ! Position
marker.pos (              3 ,       $M_Bogie_PS_1r_damping        ) = $_PS_Damping_Z_high     ! Position

marker.type (                       $M_Bogie_PS_2l_spring         ) = 1                       ! Type
marker.parent (                     $M_Bogie_PS_2l_spring         ) = $B_Bogie                ! Body
marker.pos (              1 ,       $M_Bogie_PS_2l_spring         ) = $_Bogie_PS_Spring_4     ! Position
marker.pos (              2 ,       $M_Bogie_PS_2l_spring         ) = -1.0000000000000000E+00 ! Position
marker.pos (              3 ,       $M_Bogie_PS_2l_spring         ) = $_PS_Spring_Z           ! Position

marker.type (                       $M_Bogie_PS_2r_spring         ) = 1                       ! Type
marker.parent (                     $M_Bogie_PS_2r_spring         ) = $B_Bogie                ! Body
marker.pos (              1 ,       $M_Bogie_PS_2r_spring         ) = $_Bogie_PS_Spring_4     ! Position
marker.pos (              2 ,       $M_Bogie_PS_2r_spring         ) = 1.0000000000000000E+00  ! Position
marker.pos (              3 ,       $M_Bogie_PS_2r_spring         ) = $_PS_Spring_Z           ! Position

marker.type (                       $M_Bogie_PS_1l_Spring         ) = 1                       ! Type
marker.parent (                     $M_Bogie_PS_1l_Spring         ) = $B_Bogie                ! Body
marker.pos (              1 ,       $M_Bogie_PS_1l_Spring         ) = $_Lb                    ! Position
marker.pos (              2 ,       $M_Bogie_PS_1l_Spring         ) = -1.0000000000000000E+00 ! Position
marker.pos (              3 ,       $M_Bogie_PS_1l_Spring         ) = $_PS_Spring_Z           ! Position

marker.type (                       $M_Bogie_PS_1r_Spring         ) = 1                       ! Type
marker.parent (                     $M_Bogie_PS_1r_Spring         ) = $B_Bogie                ! Body
marker.pos (              1 ,       $M_Bogie_PS_1r_Spring         ) = $_Lb                    ! Position
marker.pos (              2 ,       $M_Bogie_PS_1r_Spring         ) = 1.0000000000000000E+00  ! Position
marker.pos (              3 ,       $M_Bogie_PS_1r_Spring         ) = $_PS_Spring_Z           ! Position

marker.type (                       $M_Bogie_PS_2l_Joint          ) = 1                       ! Type
marker.parent (                     $M_Bogie_PS_2l_Joint          ) = $B_Bogie                ! Body
marker.pos (              1 ,       $M_Bogie_PS_2l_Joint          ) = $_Bogie_PS_Joint_X      ! Position
marker.pos (              2 ,       $M_Bogie_PS_2l_Joint          ) = -1.0000000000000000E+00 ! Position
marker.pos (              3 ,       $M_Bogie_PS_2l_Joint          ) = $_PS_Joint_Z            ! Position

marker.type (                       $M_Bogie_PS_2r_Joint          ) = 1                       ! Type
marker.parent (                     $M_Bogie_PS_2r_Joint          ) = $B_Bogie                ! Body
marker.pos (              1 ,       $M_Bogie_PS_2r_Joint          ) = $_Bogie_PS_Joint_X      ! Position
marker.pos (              2 ,       $M_Bogie_PS_2r_Joint          ) = 1.0000000000000000E+00  ! Position
marker.pos (              3 ,       $M_Bogie_PS_2r_Joint          ) = $_PS_Joint_Z            ! Position

marker.type (                       $M_Bogie_PS_1l_Joint          ) = 1                       ! Type
marker.parent (                     $M_Bogie_PS_1l_Joint          ) = $B_Bogie                ! Body
marker.pos (              1 ,       $M_Bogie_PS_1l_Joint          ) = $_PS_Joint_X            ! Position
marker.pos (              2 ,       $M_Bogie_PS_1l_Joint          ) = -1.0000000000000000E+00 ! Position
marker.pos (              3 ,       $M_Bogie_PS_1l_Joint          ) = $_PS_Joint_Z            ! Position

marker.type (                       $M_Bogie_PS_1r_Joint          ) = 1                       ! Type
marker.parent (                     $M_Bogie_PS_1r_Joint          ) = $B_Bogie                ! Body
marker.pos (              1 ,       $M_Bogie_PS_1r_Joint          ) = $_PS_Joint_X            ! Position
marker.pos (              2 ,       $M_Bogie_PS_1r_Joint          ) = 1.0000000000000000E+00  ! Position
marker.pos (              3 ,       $M_Bogie_PS_1r_Joint          ) = $_PS_Joint_Z            ! Position

marker.type (                       $M_Bogie_SS_Airspring_1l      ) = 1                       ! Type
marker.parent (                     $M_Bogie_SS_Airspring_1l      ) = $B_Bogie                ! Body
marker.pos (              2 ,       $M_Bogie_SS_Airspring_1l      ) = $_SS_Airspring_FY       ! Position
marker.pos (              3 ,       $M_Bogie_SS_Airspring_1l      ) = $_SS_Airspring_Z        ! Position

marker.type (                       $M_Bogie_SS_Airspring_1r      ) = 1                       ! Type
marker.parent (                     $M_Bogie_SS_Airspring_1r      ) = $B_Bogie                ! Body
marker.pos (              2 ,       $M_Bogie_SS_Airspring_1r      ) = $_SS_Airspring_Y        ! Position
marker.pos (              3 ,       $M_Bogie_SS_Airspring_1r      ) = $_SS_Airspring_Z        ! Position

marker.type (                       $M_Bogie_SS_KSX_1l            ) = 1                       ! Type
marker.parent (                     $M_Bogie_SS_KSX_1l            ) = $B_Bogie                ! Body
marker.pos (              1 ,       $M_Bogie_SS_KSX_1l            ) = $_SS_KSX_bg_fx          ! Position
marker.pos (              2 ,       $M_Bogie_SS_KSX_1l            ) = $_SS_KSX_Bogie_L        ! Position
marker.pos (              3 ,       $M_Bogie_SS_KSX_1l            ) = $_SS_KSX_Bogie_z        ! Position

marker.type (                       $M_Bogie_SS_KSX_1r            ) = 1                       ! Type
marker.parent (                     $M_Bogie_SS_KSX_1r            ) = $B_Bogie                ! Body
marker.pos (              1 ,       $M_Bogie_SS_KSX_1r            ) = $_SS_KSX_bg_fx          ! Position
marker.pos (              2 ,       $M_Bogie_SS_KSX_1r            ) = $_SS_KSX_Bogie_R        ! Position
marker.pos (              3 ,       $M_Bogie_SS_KSX_1r            ) = $_SS_KSX_Bogie_z        ! Position

marker.type (                       $M_Bogie_SS_HX_1              ) = 1                       ! Type
marker.parent (                     $M_Bogie_SS_HX_1              ) = $B_Bogie                ! Body
marker.pos (              1 ,       $M_Bogie_SS_HX_1              ) = $_SS_HX_bg_x1           ! Position
marker.pos (              2 ,       $M_Bogie_SS_HX_1              ) = $_SS_HX_Y2              ! Position
marker.pos (              3 ,       $M_Bogie_SS_HX_1              ) = $_SS_HX_Bogie_z         ! Position

marker.type (                       $M_Bogie_SS_HX_2              ) = 1                       ! Type
marker.parent (                     $M_Bogie_SS_HX_2              ) = $B_Bogie                ! Body
marker.pos (              1 ,       $M_Bogie_SS_HX_2              ) = $_SS_HX_bg_x2           ! Position
marker.pos (              2 ,       $M_Bogie_SS_HX_2              ) = $_SS_HX_Y3              ! Position
marker.pos (              3 ,       $M_Bogie_SS_HX_2              ) = $_SS_HX_Bogie_z         ! Position

marker.type (                       $M_Bogie_QY                   ) = 1                       ! Type
marker.parent (                     $M_Bogie_QY                   ) = $B_Bogie                ! Body
marker.pos (              3 ,       $M_Bogie_QY                   ) = $_QY_Car_Z              ! Position

marker.type (                       $M_Bogie_ZD_l                 ) = 1                       ! Type
marker.parent (                     $M_Bogie_ZD_l                 ) = $B_Bogie                ! Body
marker.pos (              2 ,       $M_Bogie_ZD_l                 ) = -1.8999999762000000E-01 ! Position
marker.pos (              3 ,       $M_Bogie_ZD_l                 ) = -6.8000000714999997E-01 ! Position

marker.type (                       $M_Bogie_ZD_r                 ) = 1                       ! Type
marker.parent (                     $M_Bogie_ZD_r                 ) = $B_Bogie                ! Body
marker.pos (              2 ,       $M_Bogie_ZD_r                 ) = 1.8999999762000000E-01  ! Position
marker.pos (              3 ,       $M_Bogie_ZD_r                 ) = -6.8000000714999997E-01 ! Position

marker.type (                       $M_Bogie_NG                   ) = 1                       ! Type
marker.parent (                     $M_Bogie_NG                   ) = $B_Bogie                ! Body
marker.pos (              3 ,       $M_Bogie_NG                   ) = -4.3000000714999997E-01 ! Position

marker.type (                       $M_Bogie_ZD                   ) = 1                       ! Type
marker.parent (                     $M_Bogie_ZD                   ) = $B_Bogie                ! Body
marker.pos (              3 ,       $M_Bogie_ZD                   ) = -6.8000000714999997E-01 ! Position

marker.type (                       $M_Bogie_BRF                  ) = 1                       ! Type
marker.parent (                     $M_Bogie_BRF                  ) = $B_Bogie                ! Body
marker.flx.type (                   $M_Bogie_BRF                  ) = 4                       ! Flexible type

joint.from (                        $J_Bogie                      ) = $M_Isys                 ! From Marker
joint.to (                          $J_Bogie                      ) = $M_Bogie                ! To Marker
joint.type (                        $J_Bogie                      ) = 7                       ! Type
joint.st.pos (            1 ,       $J_Bogie                      ) = 1.8750000000000000E+01  ! Position
joint.st.pos (            2 ,       $J_Bogie                      ) = 0.0000000000000000E+00  ! Position
joint.st.pos (            3 ,       $J_Bogie                      ) = 0.0000000000000000E+00  ! Position
joint.st.pos (            4 ,       $J_Bogie                      ) = 0.0000000000000000E+00  ! Position
joint.st.pos (            5 ,       $J_Bogie                      ) = 0.0000000000000000E+00  ! Position
joint.st.pos (            6 ,       $J_Bogie                      ) = 0.0000000000000000E+00  ! Position
joint.st.vel (            1 ,       $J_Bogie                      ) = 1.3888888888888889E+01  ! Velocity
joint.st.vel (            2 ,       $J_Bogie                      ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            3 ,       $J_Bogie                      ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            4 ,       $J_Bogie                      ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            5 ,       $J_Bogie                      ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            6 ,       $J_Bogie                      ) = 0.0000000000000000E+00  ! Velocity
joint.st.dep (            1 ,       $J_Bogie                      ) = 0                       ! Dependency state
joint.st.dep (            2 ,       $J_Bogie                      ) = 0                       ! Dependency state
joint.st.dep (            3 ,       $J_Bogie                      ) = 0                       ! Dependency state
joint.st.dep (            4 ,       $J_Bogie                      ) = 0                       ! Dependency state
joint.st.dep (            5 ,       $J_Bogie                      ) = 0                       ! Dependency state
joint.st.dep (            6 ,       $J_Bogie                      ) = 0                       ! Dependency state
joint.par (               3 ,       $J_Bogie                      ) = 0.0000000000000000E+00  ! [-] Degrees of freedom
joint.attr.2d.pos.x (     1 ,       $J_Bogie                      ) = -2690
joint.attr.2d.pos.y (     1 ,       $J_Bogie                      ) = -20
joint.attr.2d.ori (       1 ,       $J_Bogie                      ) = 90
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_Bogie           ) = -2690, -2690
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_Bogie           ) = -160, -37
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_Bogie             ) = 1070, 1070, 1060, 1050, -118.125, -118.125, -128.125, -138.125, -148.125, -158.125, -168.125, -178.125, -188.125, -198.125, -208.125, -218.125, -228.125, -238.125, -248.125, -258.125, -268.125, -278.125, -288.125, -298.125, -308.125, -318.125, -328.125, -338.125, -348.125, -358.125, -368.125, -378.125, -388.125, -398.125, -408.125, -418.125, -428.125, -438.125, -448.125, -947.5, -947.5, -947.5, -947.5, -957.5, -967.5, -977.5, -987.5, -997.5, -1007.5, -1017.5, -1027.5, -1037.5, -1047.5, -1057.5, -1067.5, -1077.5, -1087.5, -1097.5, -1107.5, -1117.5, -1127.5, -1137.5, -1147.5, -1157.5, -1167.5, -1177.5, -1187.5, -1197.5, -1207.5, -1217.5, -1227.5, -1237.5, -1247.5, -1257.5, -1267.5, -1277.5, -1287.5, -1297.5, -1307.5, -1317.5, -1327.5, -1337.5, -1347.5, -1357.5, -1367.5, -1377.5, -1387.5, -1397.5, -1407.5, -1417.5, -2240, -2240, -2240, -2250, -2260, -2270, -2280, -2290, -2300, -2310, -2320, -2330, -2340, -2350, -2360, -2370, -2380, -2390, -2400, -2410, -2420, -2430, -2440, -2450, -2460, -2470, -2480, -2490, -2500, -2510, -2520, -2530, -2540, -2550, -2560, -2570, -2580, -2590, -2600, -2610, -2620, -2630, -2640, -2650, -2660, -2670, -2680, -2690, -2690
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_Bogie             ) = 10, 80, 80, 80, 80, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 40, 30, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3

prim.type (                         $P_Bogie_Cuboid               ) = 22                      ! Type
prim.ref (                          $P_Bogie_Cuboid               ) = $M_Bogie                ! Reference Marker
prim.pos (                3 ,       $P_Bogie_Cuboid               ) = -5.0999999046000000E-01 ! Position
prim.color.r (            1 ,       $P_Bogie_Cuboid               ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie_Cuboid               ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie_Cuboid               ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie_Cuboid               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie_Cuboid               ) = 3.0000000000000000E+00  ! [m] Length L1
prim.par (                3 ,       $P_Bogie_Cuboid               ) = 1.5000000000000000E+00  ! [m] Length L2
prim.par (                4 ,       $P_Bogie_Cuboid               ) = 3.0000001191999998E-01  ! [m] Height H1
prim.par (                5 ,       $P_Bogie_Cuboid               ) = 1.5000000595999999E-01  ! [m] Height H2
prim.par (                6 ,       $P_Bogie_Cuboid               ) = 1.5000000595999999E-01  ! [m] Width B1
prim.par (                7 ,       $P_Bogie_Cuboid               ) = 2.0000000000000000E+00  ! [m] Distance right left

prim.type (                         $P_Bogie_frame3               ) = 1                       ! Type
prim.ref (                          $P_Bogie_frame3               ) = $M_Bogie                ! Reference Marker
prim.pos (                1 ,       $P_Bogie_frame3               ) = 4.0000000596000002E-01  ! Position
prim.pos (                3 ,       $P_Bogie_frame3               ) = -5.8499997853999997E-01 ! Position
prim.color.r (            1 ,       $P_Bogie_frame3               ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie_frame3               ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie_frame3               ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie_frame3               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie_frame3               ) = 1.5000000595999999E-01  ! [m] Length in X
prim.par (                3 ,       $P_Bogie_frame3               ) = 2.0000000000000000E+00  ! [m] Length in Y
prim.par (                4 ,       $P_Bogie_frame3               ) = 1.5000000595999999E-01  ! [m] Length in Z

prim.type (                         $P_Bogie_frame4               ) = 1                       ! Type
prim.ref (                          $P_Bogie_frame4               ) = $M_Bogie                ! Reference Marker
prim.pos (                1 ,       $P_Bogie_frame4               ) = -4.0000000596000002E-01 ! Position
prim.pos (                3 ,       $P_Bogie_frame4               ) = -5.8499997853999997E-01 ! Position
prim.color.r (            1 ,       $P_Bogie_frame4               ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie_frame4               ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie_frame4               ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie_frame4               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie_frame4               ) = 1.5000000595999999E-01  ! [m] Length in X
prim.par (                3 ,       $P_Bogie_frame4               ) = 2.0000000000000000E+00  ! [m] Length in Y
prim.par (                4 ,       $P_Bogie_frame4               ) = 1.5000000595999999E-01  ! [m] Length in Z

prim.type (                         $P_Bogie_Lat_Damp_R           ) = 5                       ! Type
prim.ref (                          $P_Bogie_Lat_Damp_R           ) = $M_Bogie                ! Reference Marker
prim.pos (                1 ,       $P_Bogie_Lat_Damp_R           ) = 2.0000000298000001E-01  ! Position
prim.pos (                2 ,       $P_Bogie_Lat_Damp_R           ) = 3.1499999762000003E-01  ! Position
prim.pos (                3 ,       $P_Bogie_Lat_Damp_R           ) = -6.6000002622999998E-01 ! Position
prim.ang (                1 ,       $P_Bogie_Lat_Damp_R           ) = { -90 deg }             ! Angles
prim.ang (                2 ,       $P_Bogie_Lat_Damp_R           ) = { 0 deg }               ! Angles
prim.ang (                3 ,       $P_Bogie_Lat_Damp_R           ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   1 , $P_Bogie_Lat_Damp_R           ) = -4.0000000596000002E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_Bogie_Lat_Damp_R           ) = 4.0000000596000002E-01  ! Vertices
prim.vtx (                1 ,   3 , $P_Bogie_Lat_Damp_R           ) = 1.5000000595999999E-01  ! Vertices
prim.vtx (                1 ,   4 , $P_Bogie_Lat_Damp_R           ) = -1.5000000595999999E-01 ! Vertices
prim.vtx (                2 ,   3 , $P_Bogie_Lat_Damp_R           ) = 3.0000001191999998E-01  ! Vertices
prim.vtx (                2 ,   4 , $P_Bogie_Lat_Damp_R           ) = 3.0000001191999998E-01  ! Vertices
prim.vtx (                3 ,   4 , $P_Bogie_Lat_Damp_R           ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_Bogie_Lat_Damp_R           ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie_Lat_Damp_R           ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie_Lat_Damp_R           ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie_Lat_Damp_R           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie_Lat_Damp_R           ) = 0.0000000000000000E+00  ! [-] Contour by
prim.par (                4 ,       $P_Bogie_Lat_Damp_R           ) = 1.0000000000000000E+00  ! [-] Contour
prim.par (                6 ,       $P_Bogie_Lat_Damp_R           ) = 0.0000000000000000E+00  ! [-] Curve fitting type
prim.par (                9 ,       $P_Bogie_Lat_Damp_R           ) = 0.0000000000000000E+00  ! [-] Material side
prim.par (               10 ,       $P_Bogie_Lat_Damp_R           ) = 1.0000000149000000E-01  ! [m] Depth
prim.par (               12 ,       $P_Bogie_Lat_Damp_R           ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               13 ,       $P_Bogie_Lat_Damp_R           ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_Bogie_Lat_Damp_L           ) = 5                       ! Type
prim.ref (                          $P_Bogie_Lat_Damp_L           ) = $M_Bogie                ! Reference Marker
prim.pos (                1 ,       $P_Bogie_Lat_Damp_L           ) = -2.0000000298000001E-01 ! Position
prim.pos (                2 ,       $P_Bogie_Lat_Damp_L           ) = -3.1499999762000003E-01 ! Position
prim.pos (                3 ,       $P_Bogie_Lat_Damp_L           ) = -6.6000002622999998E-01 ! Position
prim.ang (                1 ,       $P_Bogie_Lat_Damp_L           ) = { -90 deg }             ! Angles
prim.ang (                2 ,       $P_Bogie_Lat_Damp_L           ) = { 0 deg }               ! Angles
prim.ang (                3 ,       $P_Bogie_Lat_Damp_L           ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   1 , $P_Bogie_Lat_Damp_L           ) = -4.0000000596000002E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_Bogie_Lat_Damp_L           ) = 4.0000000596000002E-01  ! Vertices
prim.vtx (                1 ,   3 , $P_Bogie_Lat_Damp_L           ) = 1.5000000595999999E-01  ! Vertices
prim.vtx (                1 ,   4 , $P_Bogie_Lat_Damp_L           ) = -1.5000000595999999E-01 ! Vertices
prim.vtx (                2 ,   3 , $P_Bogie_Lat_Damp_L           ) = 3.0000001191999998E-01  ! Vertices
prim.vtx (                2 ,   4 , $P_Bogie_Lat_Damp_L           ) = 3.0000001191999998E-01  ! Vertices
prim.vtx (                3 ,   4 , $P_Bogie_Lat_Damp_L           ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_Bogie_Lat_Damp_L           ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie_Lat_Damp_L           ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie_Lat_Damp_L           ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie_Lat_Damp_L           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie_Lat_Damp_L           ) = 0.0000000000000000E+00  ! [-] Contour by
prim.par (                4 ,       $P_Bogie_Lat_Damp_L           ) = 1.0000000000000000E+00  ! [-] Contour
prim.par (                6 ,       $P_Bogie_Lat_Damp_L           ) = 0.0000000000000000E+00  ! [-] Curve fitting type
prim.par (                9 ,       $P_Bogie_Lat_Damp_L           ) = 0.0000000000000000E+00  ! [-] Material side
prim.par (               10 ,       $P_Bogie_Lat_Damp_L           ) = 1.0000000149000000E-01  ! [m] Depth
prim.par (               12 ,       $P_Bogie_Lat_Damp_L           ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               13 ,       $P_Bogie_Lat_Damp_L           ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_Bogie_PrimDampVert_2R      ) = 19                      ! Type
prim.ref (                          $P_Bogie_PrimDampVert_2R      ) = $M_Bogie                ! Reference Marker
prim.color.r (            1 ,       $P_Bogie_PrimDampVert_2R      ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie_PrimDampVert_2R      ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie_PrimDampVert_2R      ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie_PrimDampVert_2R      ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie_PrimDampVert_2R      ) = $M_Bogie_PS_2r_damping  ! [-] Marker i
prim.par (                3 ,       $P_Bogie_PrimDampVert_2R      ) = $M_box2r_damping        ! [-] Marker j
prim.par (                6 ,       $P_Bogie_PrimDampVert_2R      ) = 2.9999999329000000E-02  ! [m] Radius of x-section
prim.par (               13 ,       $P_Bogie_PrimDampVert_2R      ) = 5.0000000000000000E+01  ! [-] Number of planes

prim.type (                         $P_Bogie_PrimDampVert_2L      ) = 19                      ! Type
prim.ref (                          $P_Bogie_PrimDampVert_2L      ) = $M_Bogie                ! Reference Marker
prim.color.r (            1 ,       $P_Bogie_PrimDampVert_2L      ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie_PrimDampVert_2L      ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie_PrimDampVert_2L      ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie_PrimDampVert_2L      ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie_PrimDampVert_2L      ) = $M_Bogie_PS_2l_damping  ! [-] Marker i
prim.par (                3 ,       $P_Bogie_PrimDampVert_2L      ) = $M_box2l_damping        ! [-] Marker j
prim.par (                6 ,       $P_Bogie_PrimDampVert_2L      ) = 2.9999999329000000E-02  ! [m] Radius of x-section
prim.par (               13 ,       $P_Bogie_PrimDampVert_2L      ) = 5.0000000000000000E+01  ! [-] Number of planes

prim.type (                         $P_Bogie_PrimDampVert_1R      ) = 19                      ! Type
prim.ref (                          $P_Bogie_PrimDampVert_1R      ) = $M_Bogie                ! Reference Marker
prim.color.r (            1 ,       $P_Bogie_PrimDampVert_1R      ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie_PrimDampVert_1R      ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie_PrimDampVert_1R      ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie_PrimDampVert_1R      ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie_PrimDampVert_1R      ) = $M_Bogie_PS_1r_damping  ! [-] Marker i
prim.par (                3 ,       $P_Bogie_PrimDampVert_1R      ) = $M_box1r_damping        ! [-] Marker j
prim.par (                6 ,       $P_Bogie_PrimDampVert_1R      ) = 2.9999999329000000E-02  ! [m] Radius of x-section
prim.par (               13 ,       $P_Bogie_PrimDampVert_1R      ) = 5.0000000000000000E+01  ! [-] Number of planes

prim.type (                         $P_Bogie_PrimDampVert_1L      ) = 19                      ! Type
prim.ref (                          $P_Bogie_PrimDampVert_1L      ) = $M_Bogie                ! Reference Marker
prim.color.r (            1 ,       $P_Bogie_PrimDampVert_1L      ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie_PrimDampVert_1L      ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie_PrimDampVert_1L      ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie_PrimDampVert_1L      ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie_PrimDampVert_1L      ) = $M_Bogie_PS_1l_damping  ! [-] Marker i
prim.par (                3 ,       $P_Bogie_PrimDampVert_1L      ) = $M_box1l_damping        ! [-] Marker j
prim.par (                6 ,       $P_Bogie_PrimDampVert_1L      ) = 2.9999999329000000E-02  ! [m] Radius of x-section
prim.par (               13 ,       $P_Bogie_PrimDampVert_1L      ) = 5.0000000000000000E+01  ! [-] Number of planes

prim.type (                         $P_Bogie_SecDamp_Lat_R        ) = 19                      ! Type
prim.ref (                          $P_Bogie_SecDamp_Lat_R        ) = $M_Bogie                ! Reference Marker
prim.color.r (            1 ,       $P_Bogie_SecDamp_Lat_R        ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie_SecDamp_Lat_R        ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie_SecDamp_Lat_R        ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie_SecDamp_Lat_R        ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie_SecDamp_Lat_R        ) = $M_Carbody_HX_1         ! [-] Marker i
prim.par (                3 ,       $P_Bogie_SecDamp_Lat_R        ) = $M_Bogie_SS_HX_1        ! [-] Marker j
prim.par (                6 ,       $P_Bogie_SecDamp_Lat_R        ) = 3.5000000149000003E-02  ! [m] Radius of x-section
prim.par (               13 ,       $P_Bogie_SecDamp_Lat_R        ) = 3.5000000000000000E+01  ! [-] Number of planes

prim.type (                         $P_Bogie_SecDamp_Lat_L        ) = 19                      ! Type
prim.ref (                          $P_Bogie_SecDamp_Lat_L        ) = $M_Bogie                ! Reference Marker
prim.color.r (            1 ,       $P_Bogie_SecDamp_Lat_L        ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie_SecDamp_Lat_L        ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie_SecDamp_Lat_L        ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie_SecDamp_Lat_L        ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie_SecDamp_Lat_L        ) = $M_Carbody_HX_2         ! [-] Marker i
prim.par (                3 ,       $P_Bogie_SecDamp_Lat_L        ) = $M_Bogie_SS_HX_2        ! [-] Marker j
prim.par (                6 ,       $P_Bogie_SecDamp_Lat_L        ) = 3.5000000149000003E-02  ! [m] Radius of x-section
prim.par (               13 ,       $P_Bogie_SecDamp_Lat_L        ) = 3.5000000000000000E+01  ! [-] Number of planes

prim.type (                         $P_Bogie_ksx_r                ) = 19                      ! Type
prim.ref (                          $P_Bogie_ksx_r                ) = $M_Bogie                ! Reference Marker
prim.color.r (            1 ,       $P_Bogie_ksx_r                ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie_ksx_r                ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie_ksx_r                ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie_ksx_r                ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie_ksx_r                ) = $M_Carbody_KSX_1r       ! [-] Marker i
prim.par (                3 ,       $P_Bogie_ksx_r                ) = $M_Bogie_SS_KSX_1r      ! [-] Marker j
prim.par (                6 ,       $P_Bogie_ksx_r                ) = 3.5000000149000003E-02  ! [m] Radius of x-section
prim.par (               13 ,       $P_Bogie_ksx_r                ) = 3.5000000000000000E+01  ! [-] Number of planes

prim.type (                         $P_Bogie_ksx_l                ) = 19                      ! Type
prim.ref (                          $P_Bogie_ksx_l                ) = $M_Bogie                ! Reference Marker
prim.color.r (            1 ,       $P_Bogie_ksx_l                ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie_ksx_l                ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie_ksx_l                ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie_ksx_l                ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie_ksx_l                ) = $M_Carbody_KSX_1l       ! [-] Marker i
prim.par (                3 ,       $P_Bogie_ksx_l                ) = $M_Bogie_SS_KSX_1l      ! [-] Marker j
prim.par (                6 ,       $P_Bogie_ksx_l                ) = 3.5000000149000003E-02  ! [m] Radius of x-section
prim.par (               13 ,       $P_Bogie_ksx_l                ) = 3.5000000000000000E+01  ! [-] Number of planes

prim.type (                         $P_Bogie_SecSpring_R          ) = 5                       ! Type
prim.ref (                          $P_Bogie_SecSpring_R          ) = $M_Bogie                ! Reference Marker
prim.pos (                2 ,       $P_Bogie_SecSpring_R          ) = 1.0750000476999999E+00  ! Position
prim.pos (                3 ,       $P_Bogie_SecSpring_R          ) = -5.5000001192000003E-01 ! Position
prim.vtx (                1 ,   1 , $P_Bogie_SecSpring_R          ) = -3.0000001191999998E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_Bogie_SecSpring_R          ) = 3.0000001191999998E-01  ! Vertices
prim.vtx (                1 ,   3 , $P_Bogie_SecSpring_R          ) = 1.0000000149000000E-01  ! Vertices
prim.vtx (                1 ,   4 , $P_Bogie_SecSpring_R          ) = -1.0000000149000000E-01 ! Vertices
prim.vtx (                2 ,   3 , $P_Bogie_SecSpring_R          ) = 3.0000001191999998E-01  ! Vertices
prim.vtx (                2 ,   4 , $P_Bogie_SecSpring_R          ) = 3.0000001191999998E-01  ! Vertices
prim.vtx (                3 ,   4 , $P_Bogie_SecSpring_R          ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_Bogie_SecSpring_R          ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie_SecSpring_R          ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie_SecSpring_R          ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie_SecSpring_R          ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie_SecSpring_R          ) = 0.0000000000000000E+00  ! [-] Contour by
prim.par (                4 ,       $P_Bogie_SecSpring_R          ) = 1.0000000000000000E+00  ! [-] Contour
prim.par (                6 ,       $P_Bogie_SecSpring_R          ) = 0.0000000000000000E+00  ! [-] Curve fitting type
prim.par (                9 ,       $P_Bogie_SecSpring_R          ) = 0.0000000000000000E+00  ! [-] Material side
prim.par (               10 ,       $P_Bogie_SecSpring_R          ) = 1.0000000149000000E-01  ! [m] Depth
prim.par (               12 ,       $P_Bogie_SecSpring_R          ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               13 ,       $P_Bogie_SecSpring_R          ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_Bogie_SecSpring_l          ) = 5                       ! Type
prim.ref (                          $P_Bogie_SecSpring_l          ) = $M_Bogie                ! Reference Marker
prim.pos (                2 ,       $P_Bogie_SecSpring_l          ) = -1.0750000476999999E+00 ! Position
prim.pos (                3 ,       $P_Bogie_SecSpring_l          ) = -5.5000001192000003E-01 ! Position
prim.ang (                1 ,       $P_Bogie_SecSpring_l          ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_Bogie_SecSpring_l          ) = { 0 deg }               ! Angles
prim.ang (                3 ,       $P_Bogie_SecSpring_l          ) = { -180 deg }            ! Angles
prim.vtx (                1 ,   1 , $P_Bogie_SecSpring_l          ) = -3.0000001191999998E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_Bogie_SecSpring_l          ) = 3.0000001191999998E-01  ! Vertices
prim.vtx (                1 ,   3 , $P_Bogie_SecSpring_l          ) = 1.0000000149000000E-01  ! Vertices
prim.vtx (                1 ,   4 , $P_Bogie_SecSpring_l          ) = -1.0000000149000000E-01 ! Vertices
prim.vtx (                2 ,   3 , $P_Bogie_SecSpring_l          ) = 3.0000001191999998E-01  ! Vertices
prim.vtx (                2 ,   4 , $P_Bogie_SecSpring_l          ) = 3.0000001191999998E-01  ! Vertices
prim.vtx (                3 ,   4 , $P_Bogie_SecSpring_l          ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_Bogie_SecSpring_l          ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie_SecSpring_l          ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie_SecSpring_l          ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie_SecSpring_l          ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie_SecSpring_l          ) = 0.0000000000000000E+00  ! [-] Contour by
prim.par (                4 ,       $P_Bogie_SecSpring_l          ) = 1.0000000000000000E+00  ! [-] Contour
prim.par (                6 ,       $P_Bogie_SecSpring_l          ) = 0.0000000000000000E+00  ! [-] Curve fitting type
prim.par (                9 ,       $P_Bogie_SecSpring_l          ) = 0.0000000000000000E+00  ! [-] Material side
prim.par (               10 ,       $P_Bogie_SecSpring_l          ) = 1.0000000149000000E-01  ! [m] Depth
prim.par (               12 ,       $P_Bogie_SecSpring_l          ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               13 ,       $P_Bogie_SecSpring_l          ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_Bogie_Bumpstop_R           ) = 15                      ! Type
prim.ref (                          $P_Bogie_Bumpstop_R           ) = $M_Bogie                ! Reference Marker
prim.pos (                2 ,       $P_Bogie_Bumpstop_R           ) = 1.8999999762000000E-01  ! Position
prim.pos (                3 ,       $P_Bogie_Bumpstop_R           ) = -6.8000000714999997E-01 ! Position
prim.color.r (            1 ,       $P_Bogie_Bumpstop_R           ) = 0.0000000000000000E+00  ! Colors (red component)
prim.color.r (            2 ,       $P_Bogie_Bumpstop_R           ) = 0.0000000000000000E+00  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie_Bumpstop_R           ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_Bogie_Bumpstop_R           ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie_Bumpstop_R           ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_Bogie_Bumpstop_R           ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie_Bumpstop_R           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_Bogie_Bumpstop_R           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie_Bumpstop_R           ) = 5.9999998658999999E-02  ! [m] Radius
prim.par (                3 ,       $P_Bogie_Bumpstop_R           ) = { DIMLESS(180 deg) }    ! [rad] Start angle
prim.par (                4 ,       $P_Bogie_Bumpstop_R           ) = { DIMLESS(180 deg) }    ! [rad] Delta angle
prim.par (                5 ,       $P_Bogie_Bumpstop_R           ) = 1.2000000000000000E+01  ! [-] Number of meridians

prim.type (                         $P_Bogie_Bumpstop_L           ) = 15                      ! Type
prim.ref (                          $P_Bogie_Bumpstop_L           ) = $M_Bogie                ! Reference Marker
prim.pos (                2 ,       $P_Bogie_Bumpstop_L           ) = -1.8999999762000000E-01 ! Position
prim.pos (                3 ,       $P_Bogie_Bumpstop_L           ) = -6.8000000714999997E-01 ! Position
prim.color.r (            1 ,       $P_Bogie_Bumpstop_L           ) = 0.0000000000000000E+00  ! Colors (red component)
prim.color.r (            2 ,       $P_Bogie_Bumpstop_L           ) = 0.0000000000000000E+00  ! Colors (red component)
prim.color.g (            1 ,       $P_Bogie_Bumpstop_L           ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_Bogie_Bumpstop_L           ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Bogie_Bumpstop_L           ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_Bogie_Bumpstop_L           ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bogie_Bumpstop_L           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_Bogie_Bumpstop_L           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_Bogie_Bumpstop_L           ) = 5.9999998658999999E-02  ! [m] Radius
prim.par (                3 ,       $P_Bogie_Bumpstop_L           ) = { DIMLESS(0 deg) }      ! [rad] Start angle
prim.par (                4 ,       $P_Bogie_Bumpstop_L           ) = { DIMLESS(180 deg) }    ! [rad] Delta angle
prim.par (                5 ,       $P_Bogie_Bumpstop_L           ) = 1.2000000000000000E+01  ! [-] Number of meridians

prim.type (                         $P_PS_Spring_2l__3d_          ) = 13                      ! Type
prim.ref (                          $P_PS_Spring_2l__3d_          ) = $M_Bogie_PS_2l_spring   ! Reference Marker
prim.pos (                3 ,       $P_PS_Spring_2l__3d_          ) = -9.0000003576000007E-02 ! Position
prim.ang (                1 ,       $P_PS_Spring_2l__3d_          ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_PS_Spring_2l__3d_          ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_PS_Spring_2l__3d_          ) = { 0 deg }               ! Angles
prim.color.r (            1 ,       $P_PS_Spring_2l__3d_          ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Spring_2l__3d_          ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Spring_2l__3d_          ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Spring_2l__3d_          ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_PS_Spring_2l__3d_          ) = 2.5999999046000000E-01  ! [m] Length
prim.par (                3 ,       $P_PS_Spring_2l__3d_          ) = 1.5999999642000001E-01  ! [m] Diameter
prim.par (                4 ,       $P_PS_Spring_2l__3d_          ) = 1.8000000000000000E+01  ! [-] Number of windings

prim.type (                         $P_PS_Spring_2r__3d_          ) = 13                      ! Type
prim.ref (                          $P_PS_Spring_2r__3d_          ) = $M_Bogie_PS_2r_spring   ! Reference Marker
prim.pos (                3 ,       $P_PS_Spring_2r__3d_          ) = -9.0000003576000007E-02 ! Position
prim.ang (                1 ,       $P_PS_Spring_2r__3d_          ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_PS_Spring_2r__3d_          ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_PS_Spring_2r__3d_          ) = { 0 deg }               ! Angles
prim.color.r (            1 ,       $P_PS_Spring_2r__3d_          ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Spring_2r__3d_          ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Spring_2r__3d_          ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Spring_2r__3d_          ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_PS_Spring_2r__3d_          ) = 2.5999999046000000E-01  ! [m] Length
prim.par (                3 ,       $P_PS_Spring_2r__3d_          ) = 1.5999999642000001E-01  ! [m] Diameter
prim.par (                4 ,       $P_PS_Spring_2r__3d_          ) = 1.8000000000000000E+01  ! [-] Number of windings

prim.type (                         $P_PS_Spring_1l__3d_          ) = 13                      ! Type
prim.ref (                          $P_PS_Spring_1l__3d_          ) = $M_Bogie_PS_1l_Spring   ! Reference Marker
prim.pos (                3 ,       $P_PS_Spring_1l__3d_          ) = -9.0000003576000007E-02 ! Position
prim.ang (                1 ,       $P_PS_Spring_1l__3d_          ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_PS_Spring_1l__3d_          ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_PS_Spring_1l__3d_          ) = { 0 deg }               ! Angles
prim.color.r (            1 ,       $P_PS_Spring_1l__3d_          ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Spring_1l__3d_          ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Spring_1l__3d_          ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Spring_1l__3d_          ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_PS_Spring_1l__3d_          ) = 2.5999999046000000E-01  ! [m] Length
prim.par (                3 ,       $P_PS_Spring_1l__3d_          ) = 1.5999999642000001E-01  ! [m] Diameter
prim.par (                4 ,       $P_PS_Spring_1l__3d_          ) = 1.8000000000000000E+01  ! [-] Number of windings

prim.type (                         $P_PS_Spring_1r__3d_          ) = 13                      ! Type
prim.ref (                          $P_PS_Spring_1r__3d_          ) = $M_Bogie_PS_1r_Spring   ! Reference Marker
prim.pos (                3 ,       $P_PS_Spring_1r__3d_          ) = -9.0000003576000007E-02 ! Position
prim.ang (                1 ,       $P_PS_Spring_1r__3d_          ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_PS_Spring_1r__3d_          ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_PS_Spring_1r__3d_          ) = { 0 deg }               ! Angles
prim.color.r (            1 ,       $P_PS_Spring_1r__3d_          ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Spring_1r__3d_          ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Spring_1r__3d_          ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Spring_1r__3d_          ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_PS_Spring_1r__3d_          ) = 2.5999999046000000E-01  ! [m] Length
prim.par (                3 ,       $P_PS_Spring_1r__3d_          ) = 1.5999999642000001E-01  ! [m] Diameter
prim.par (                4 ,       $P_PS_Spring_1r__3d_          ) = 1.8000000000000000E+01  ! [-] Number of windings

prim.type (                         $P_PS_Joint_2l__3d_           ) = 15                      ! Type
prim.ref (                          $P_PS_Joint_2l__3d_           ) = $M_Bogie_PS_2l_Joint    ! Reference Marker
prim.pos (                3 ,       $P_PS_Joint_2l__3d_           ) = -3.9999999106000002E-02 ! Position
prim.color.r (            1 ,       $P_PS_Joint_2l__3d_           ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.r (            2 ,       $P_PS_Joint_2l__3d_           ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Joint_2l__3d_           ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.g (            2 ,       $P_PS_Joint_2l__3d_           ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Joint_2l__3d_           ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.b (            2 ,       $P_PS_Joint_2l__3d_           ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Joint_2l__3d_           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_PS_Joint_2l__3d_           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_PS_Joint_2l__3d_           ) = 7.0000000298000006E-02  ! [m] Radius
prim.par (                3 ,       $P_PS_Joint_2l__3d_           ) = { DIMLESS(0 deg) }      ! [rad] Start angle
prim.par (                4 ,       $P_PS_Joint_2l__3d_           ) = { DIMLESS(0 deg) }      ! [rad] Delta angle
prim.par (                5 ,       $P_PS_Joint_2l__3d_           ) = 1.2000000000000000E+01  ! [-] Number of meridians

prim.type (                         $P_PS_Joint_2r__3d_           ) = 15                      ! Type
prim.ref (                          $P_PS_Joint_2r__3d_           ) = $M_Bogie_PS_2r_Joint    ! Reference Marker
prim.pos (                3 ,       $P_PS_Joint_2r__3d_           ) = -3.9999999106000002E-02 ! Position
prim.color.r (            1 ,       $P_PS_Joint_2r__3d_           ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.r (            2 ,       $P_PS_Joint_2r__3d_           ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Joint_2r__3d_           ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.g (            2 ,       $P_PS_Joint_2r__3d_           ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Joint_2r__3d_           ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.b (            2 ,       $P_PS_Joint_2r__3d_           ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Joint_2r__3d_           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_PS_Joint_2r__3d_           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_PS_Joint_2r__3d_           ) = 7.0000000298000006E-02  ! [m] Radius
prim.par (                3 ,       $P_PS_Joint_2r__3d_           ) = { DIMLESS(0 deg) }      ! [rad] Start angle
prim.par (                4 ,       $P_PS_Joint_2r__3d_           ) = { DIMLESS(0 deg) }      ! [rad] Delta angle
prim.par (                5 ,       $P_PS_Joint_2r__3d_           ) = 1.2000000000000000E+01  ! [-] Number of meridians

prim.type (                         $P_PS_Joint_1l__3d_           ) = 15                      ! Type
prim.ref (                          $P_PS_Joint_1l__3d_           ) = $M_Bogie_PS_1l_Joint    ! Reference Marker
prim.pos (                3 ,       $P_PS_Joint_1l__3d_           ) = -3.9999999106000002E-02 ! Position
prim.color.r (            1 ,       $P_PS_Joint_1l__3d_           ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.r (            2 ,       $P_PS_Joint_1l__3d_           ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Joint_1l__3d_           ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.g (            2 ,       $P_PS_Joint_1l__3d_           ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Joint_1l__3d_           ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.b (            2 ,       $P_PS_Joint_1l__3d_           ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Joint_1l__3d_           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_PS_Joint_1l__3d_           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_PS_Joint_1l__3d_           ) = 7.0000000298000006E-02  ! [m] Radius
prim.par (                3 ,       $P_PS_Joint_1l__3d_           ) = { DIMLESS(0 deg) }      ! [rad] Start angle
prim.par (                4 ,       $P_PS_Joint_1l__3d_           ) = { DIMLESS(0 deg) }      ! [rad] Delta angle
prim.par (                5 ,       $P_PS_Joint_1l__3d_           ) = 1.2000000000000000E+01  ! [-] Number of meridians

prim.type (                         $P_PS_Joint_1r__3d_           ) = 15                      ! Type
prim.ref (                          $P_PS_Joint_1r__3d_           ) = $M_Bogie_PS_1r_Joint    ! Reference Marker
prim.pos (                3 ,       $P_PS_Joint_1r__3d_           ) = -3.9999999106000002E-02 ! Position
prim.color.r (            1 ,       $P_PS_Joint_1r__3d_           ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.r (            2 ,       $P_PS_Joint_1r__3d_           ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_PS_Joint_1r__3d_           ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.g (            2 ,       $P_PS_Joint_1r__3d_           ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_PS_Joint_1r__3d_           ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.b (            2 ,       $P_PS_Joint_1r__3d_           ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_PS_Joint_1r__3d_           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_PS_Joint_1r__3d_           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_PS_Joint_1r__3d_           ) = 7.0000000298000006E-02  ! [m] Radius
prim.par (                3 ,       $P_PS_Joint_1r__3d_           ) = { DIMLESS(0 deg) }      ! [rad] Start angle
prim.par (                4 ,       $P_PS_Joint_1r__3d_           ) = { DIMLESS(0 deg) }      ! [rad] Delta angle
prim.par (                5 ,       $P_PS_Joint_1r__3d_           ) = 1.2000000000000000E+01  ! [-] Number of meridians


body.m (                            $B_wheelset1                  ) = 1.9018000488000000E+03  ! Mass of the Body
body.I.tens (             1 ,   1 , $B_wheelset1                  ) = 6.8500000000000000E+02  ! Moments of inertia
body.I.tens (             2 ,   2 , $B_wheelset1                  ) = 7.6000000000000000E+01  ! Moments of inertia
body.I.tens (             3 ,   3 , $B_wheelset1                  ) = 6.8500000000000000E+02  ! Moments of inertia
body.I.kind (                       $B_wheelset1                  ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.I.ref (                        $B_wheelset1                  ) = null                    ! Inertia Reference Marker
body.type (                         $B_wheelset1                  ) = 0                       ! Body type: 0=rigid; 1=flex modal; 2=SIMBEAM; 4=nonlinear SIMBEAM
body.attr.2d.pos.x (                $B_wheelset1                  ) = 1.3900000000000000E+03
body.attr.2d.pos.y (                $B_wheelset1                  ) = -2.0000000000000000E+01
body.attr.2d.width (                $B_wheelset1                  ) = 5.0000000000000000E+01
body.attr.2d.height (               $B_wheelset1                  ) = 3.0000000000000000E+01

marker.type (                       $M_wheelset1                  ) = 1                       ! Type
marker.parent (                     $M_wheelset1                  ) = $B_wheelset1            ! Body

marker.type (                       $M_wheelset1_l                ) = 1                       ! Type
marker.parent (                     $M_wheelset1_l                ) = $B_wheelset1            ! Body
marker.pos (              2 ,       $M_wheelset1_l                ) = -1.0000000000000000E+00 ! Position

marker.type (                       $M_wheelset1_r                ) = 1                       ! Type
marker.parent (                     $M_wheelset1_r                ) = $B_wheelset1            ! Body
marker.pos (              2 ,       $M_wheelset1_r                ) = 1.0000000000000000E+00  ! Position

marker.type (                       $M_wheelset1_BRF              ) = 1                       ! Type
marker.parent (                     $M_wheelset1_BRF              ) = $B_wheelset1            ! Body
marker.flx.type (                   $M_wheelset1_BRF              ) = 4                       ! Flexible type

marker.type (                       $M_B_wheelset1_ProfRef_RWP_WR1) = -78                     ! Type
marker.parent (                     $M_B_wheelset1_ProfRef_RWP_WR1) = $B_wheelset1            ! Body
marker.par (              1 ,       $M_B_wheelset1_ProfRef_RWP_WR1) = $RWP_WR1                ! [-] Rail-Wheel Pair

marker.type (                       $M_B_wheelset1_ProfRef_RWP_WL1) = -78                     ! Type
marker.parent (                     $M_B_wheelset1_ProfRef_RWP_WL1) = $B_wheelset1            ! Body
marker.par (              1 ,       $M_B_wheelset1_ProfRef_RWP_WL1) = $RWP_WL1                ! [-] Rail-Wheel Pair

joint.from (                        $J_wheelset1                  ) = $M_Isys                 ! From Marker
joint.to (                          $J_wheelset1                  ) = $M_wheelset1            ! To Marker
joint.type (                        $J_wheelset1                  ) = 7                       ! Type
joint.st.pos (            1 ,       $J_wheelset1                  ) = 2.0000000000000000E+01  ! Position
joint.st.pos (            2 ,       $J_wheelset1                  ) = 0.0000000000000000E+00  ! Position
joint.st.pos (            3 ,       $J_wheelset1                  ) = -4.2977271891000002E-01 ! Position
joint.st.pos (            4 ,       $J_wheelset1                  ) = -4.1762814214000000E-15 ! Position
joint.st.pos (            5 ,       $J_wheelset1                  ) = 0.0000000000000000E+00  ! Position
joint.st.pos (            6 ,       $J_wheelset1                  ) = 0.0000000000000000E+00  ! Position
joint.st.vel (            1 ,       $J_wheelset1                  ) = 1.3888888888888889E+01  ! Velocity
joint.st.vel (            2 ,       $J_wheelset1                  ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            3 ,       $J_wheelset1                  ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            4 ,       $J_wheelset1                  ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            5 ,       $J_wheelset1                  ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            6 ,       $J_wheelset1                  ) = -3.2318788745134796E+01 ! Velocity
joint.st.dep (            1 ,       $J_wheelset1                  ) = 0                       ! Dependency state
joint.st.dep (            2 ,       $J_wheelset1                  ) = 0                       ! Dependency state
joint.st.dep (            3 ,       $J_wheelset1                  ) = 1                       ! Dependency state
joint.st.dep (            4 ,       $J_wheelset1                  ) = 1                       ! Dependency state
joint.st.dep (            5 ,       $J_wheelset1                  ) = 0                       ! Dependency state
joint.st.dep (            6 ,       $J_wheelset1                  ) = 0                       ! Dependency state
joint.st.equi (           6 ,       $J_wheelset1                  ) = 2                       ! Equilibrium
joint.par (               3 ,       $J_wheelset1                  ) = 0.0000000000000000E+00  ! [-] Degrees of freedom
joint.attr.2d.pos.x (     1 ,       $J_wheelset1                  ) = 1290
joint.attr.2d.pos.y (     1 ,       $J_wheelset1                  ) = -20
joint.attr.2d.ori (       1 ,       $J_wheelset1                  ) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_wheelset1       ) = -260, -260.228040933609, -260.228040933609, -230.912163734436, -217.8828849792481, -200.5105133056641, -177.3473510742188, -146.463134765625, -105.2841796875, -50.37890625, 22.828125, 120.4375, 120.4375, 120.4375, 130.4375, 140.4375, 150.4375, 160.4375, 170.4375, 180.4375, 190.4375, 200.4375, 210.4375, 220.4375, 230.4375, 397.25, 397.25, 397.25, 397.25, 397.25, 407.25, 417.25, 427.25, 437.25, 447.25, 457.25, 467.25, 477.25, 487.25, 487.25, 487.25, 487.25, 497.25, 507.25, 517.25, 527.25, 537.25, 547.25, 557.25, 567.25, 577.25, 587.25, 873, 873, 873, 873, 883, 893, 903, 913, 923, 933, 943, 953, 963, 973, 983, 993, 1003, 1013, 1023, 1033, 1043, 1053, 1063, 1073, 1083, 1093, 1103, 1103, 1103, 1113, 1123, 1133, 1143, 1153, 1163, 1173, 1183, 1193, 1203, 1213, 1223, 1233, 1243, 1243, 1243, 1253, 1263, 1273
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_wheelset1       ) = 70, 70, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 70, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 50, 40, 30, 29.99999999999997, 29.99999999999997, 29.99999999999997, 29.99999999999997, 29.99999999999997, 29.99999999999997, 29.99999999999997, 29.99999999999997, 29.99999999999997, 29.99999999999997, 39.99999999999997, 49.99999999999997, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 40, 30, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, -20, -20, -20, -20
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_wheelset1         ) = 1390, 1375.4375, 1375.4375, 1361.75, 1307
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_wheelset1         ) = -10, -10, -20, -20, -20

prim.type (                         $P_wheelset1_Cuboid           ) = 2                       ! Type
prim.ref (                          $P_wheelset1_Cuboid           ) = $M_wheelset1            ! Reference Marker
prim.color.r (            1 ,       $P_wheelset1_Cuboid           ) = 0.0000000000000000E+00  ! Colors (red component)
prim.color.r (            2 ,       $P_wheelset1_Cuboid           ) = 0.0000000000000000E+00  ! Colors (red component)
prim.color.g (            1 ,       $P_wheelset1_Cuboid           ) = 4.6000000000000000E+01  ! Colors (green component)
prim.color.g (            2 ,       $P_wheelset1_Cuboid           ) = 4.6000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_wheelset1_Cuboid           ) = 9.2000000000000000E+01  ! Colors (blue component)
prim.color.b (            2 ,       $P_wheelset1_Cuboid           ) = 9.2000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_wheelset1_Cuboid           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_wheelset1_Cuboid           ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_wheelset1_Cuboid           ) = 2.0000000000000000E+00  ! [m] Height
prim.par (                3 ,       $P_wheelset1_Cuboid           ) = 2.0000000298000001E-01  ! [m] Outer diameter
prim.par (                5 ,       $P_wheelset1_Cuboid           ) = 1.6000000000000000E+01  ! [-] Number of planes
prim.par (                7 ,       $P_wheelset1_Cuboid           ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (                8 ,       $P_wheelset1_Cuboid           ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_B_wheelset1_ProfRef_RWP_WR1) = 78                      ! Type
prim.ref (                          $P_B_wheelset1_ProfRef_RWP_WR1) = $M_B_wheelset1_ProfRef_RWP_WR1 ! Reference Marker
prim.color.r (            1 ,       $P_B_wheelset1_ProfRef_RWP_WR1) = 5.8000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_B_wheelset1_ProfRef_RWP_WR1) = 9.8000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_B_wheelset1_ProfRef_RWP_WR1) = 2.0500000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_B_wheelset1_ProfRef_RWP_WR1) = 5.0000000000000000E-01  ! Colors (transparency component)
prim.par (                1 ,       $P_B_wheelset1_ProfRef_RWP_WR1) = $RWP_WR1                ! [-] Rail-wheel pair

prim.type (                         $P_B_wheelset1_ProfRef_RWP_WL1) = 78                      ! Type
prim.ref (                          $P_B_wheelset1_ProfRef_RWP_WL1) = $M_B_wheelset1_ProfRef_RWP_WL1 ! Reference Marker
prim.color.r (            1 ,       $P_B_wheelset1_ProfRef_RWP_WL1) = 5.8000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_B_wheelset1_ProfRef_RWP_WL1) = 9.8000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_B_wheelset1_ProfRef_RWP_WL1) = 2.0500000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_B_wheelset1_ProfRef_RWP_WL1) = 5.0000000000000000E-01  ! Colors (transparency component)
prim.par (                1 ,       $P_B_wheelset1_ProfRef_RWP_WL1) = $RWP_WL1                ! [-] Rail-wheel pair


body.m (                            $B_box2l                      ) = 4.8200000762999998E+01  ! Mass of the Body
body.cg.pos (             1 ,       $B_box2l                      ) = 8.5000000894000005E-02  ! Center of gravity
body.cg.pos (             2 ,       $B_box2l                      ) = -4.9999998882000003E-03 ! Center of gravity
body.cg.pos (             3 ,       $B_box2l                      ) = -9.9999997765000005E-03 ! Center of gravity
body.I.tens (             1 ,   1 , $B_box2l                      ) = 7.0499998331000002E-01  ! Moments of inertia
body.I.tens (             2 ,   2 , $B_box2l                      ) = 2.7599999904999999E+00  ! Moments of inertia
body.I.tens (             3 ,   3 , $B_box2l                      ) = 2.6210000514999998E+00  ! Moments of inertia
body.type (                         $B_box2l                      ) = 0                       ! Body type: 0=rigid; 1=flex modal; 2=SIMBEAM; 4=nonlinear SIMBEAM
body.attr.2d.pos.x (                $B_box2l                      ) = 4.8000000000000000E+02
body.attr.2d.pos.y (                $B_box2l                      ) = -9.0000000000000000E+01
body.attr.2d.width (                $B_box2l                      ) = 5.0000000000000000E+01
body.attr.2d.height (               $B_box2l                      ) = 3.0000000000000000E+01

marker.type (                       $M_box2l                      ) = 1                       ! Type
marker.parent (                     $M_box2l                      ) = $B_box2l                ! Body

marker.type (                       $M_box2l_wheelset             ) = 1                       ! Type
marker.parent (                     $M_box2l_wheelset             ) = $B_box2l                ! Body

marker.type (                       $M_box2l_damping              ) = 1                       ! Type
marker.parent (                     $M_box2l_damping              ) = $B_box2l                ! Body
marker.pos (              1 ,       $M_box2l_damping              ) = $_PS_Damping_Box_B_x    ! Position
marker.pos (              2 ,       $M_box2l_damping              ) = $_PS_Damping_Box_L      ! Position
marker.pos (              3 ,       $M_box2l_damping              ) = $_PS_Damping_Z_low      ! Position

marker.type (                       $M_box2l_spring               ) = 1                       ! Type
marker.parent (                     $M_box2l_spring               ) = $B_box2l                ! Body
marker.pos (              3 ,       $M_box2l_spring               ) = $_PS_Spring_Z_box       ! Position

marker.type (                       $M_box2l_joint                ) = 1                       ! Type
marker.parent (                     $M_box2l_joint                ) = $B_box2l                ! Body
marker.pos (              1 ,       $M_box2l_joint                ) = $_PS_Joint_X_4          ! Position
marker.pos (              3 ,       $M_box2l_joint                ) = $_PS_Joint_Z_box        ! Position

marker.type (                       $M_box2l_BRF                  ) = 1                       ! Type
marker.parent (                     $M_box2l_BRF                  ) = $B_box2l                ! Body
marker.flx.type (                   $M_box2l_BRF                  ) = 4                       ! Flexible type

joint.from (                        $J_box2l                      ) = $M_wheelset2_l          ! From Marker
joint.to (                          $J_box2l                      ) = $M_box2l                ! To Marker
joint.type (                        $J_box2l                      ) = 2                       ! Type
joint.st.pos (            1 ,       $J_box2l                      ) = 0.0000000000000000E+00  ! Position
joint.st.vel (            1 ,       $J_box2l                      ) = 3.2318788745134796E+01  ! Velocity
joint.st.dep (            1 ,       $J_box2l                      ) = 0                       ! Dependency state
joint.attr.2d.pos.x (     1 ,       $J_box2l                      ) = 1430
joint.attr.2d.pos.y (     1 ,       $J_box2l                      ) = -110
joint.attr.2d.ori (       1 ,       $J_box2l                      ) = 270
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_box2l           ) = 1490, 1480, 1480, 1475.3125, 1461.25, 1442.5, 1430, 1430
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_box2l           ) = 0, 0, -69.75, -69.75, -69.75, -69.75, -69.75, -93
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_box2l             ) = 520, 520, 1430, 1430
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_box2l             ) = -90, -154, -154, -127

prim.type (                         $P_box2l_Cuboid               ) = 5                       ! Type
prim.ref (                          $P_box2l_Cuboid               ) = $M_box2l                ! Reference Marker
prim.pos (                3 ,       $P_box2l_Cuboid               ) = 1.0000000149000000E-01  ! Position
prim.ang (                1 ,       $P_box2l_Cuboid               ) = { 90 deg }              ! Angles
prim.ang (                2 ,       $P_box2l_Cuboid               ) = { 0 deg }               ! Angles
prim.ang (                3 ,       $P_box2l_Cuboid               ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   1 , $P_box2l_Cuboid               ) = -2.5000000000000000E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_box2l_Cuboid               ) = -2.5000000000000000E-01 ! Vertices
prim.vtx (                1 ,   3 , $P_box2l_Cuboid               ) = -1.8000000715000000E-01 ! Vertices
prim.vtx (                1 ,   4 , $P_box2l_Cuboid               ) = -1.0000000149000000E-01 ! Vertices
prim.vtx (                1 ,   5 , $P_box2l_Cuboid               ) = 1.0000000149000000E-01  ! Vertices
prim.vtx (                1 ,   6 , $P_box2l_Cuboid               ) = 5.0000000000000000E-01  ! Vertices
prim.vtx (                1 ,   7 , $P_box2l_Cuboid               ) = 5.0000000000000000E-01  ! Vertices
prim.vtx (                1 ,   8 , $P_box2l_Cuboid               ) = 0.0000000000000000E+00  ! Vertices
prim.vtx (                2 ,   2 , $P_box2l_Cuboid               ) = -5.0000000745000002E-02 ! Vertices
prim.vtx (                2 ,   3 , $P_box2l_Cuboid               ) = -5.0000000745000002E-02 ! Vertices
prim.vtx (                2 ,   4 , $P_box2l_Cuboid               ) = -2.0000000298000001E-01 ! Vertices
prim.vtx (                2 ,   5 , $P_box2l_Cuboid               ) = -2.0000000298000001E-01 ! Vertices
prim.vtx (                2 ,   6 , $P_box2l_Cuboid               ) = -1.7000000178999999E-01 ! Vertices
prim.vtx (                2 ,   7 , $P_box2l_Cuboid               ) = -1.0000000149000000E-01 ! Vertices
prim.vtx (                2 ,   8 , $P_box2l_Cuboid               ) = 9.9999997765000005E-03  ! Vertices
prim.vtx (                3 ,   8 , $P_box2l_Cuboid               ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_box2l_Cuboid               ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_box2l_Cuboid               ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_box2l_Cuboid               ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_box2l_Cuboid               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_box2l_Cuboid               ) = 0.0000000000000000E+00  ! [-] Contour by
prim.par (                4 ,       $P_box2l_Cuboid               ) = 1.0000000000000000E+00  ! [-] Contour
prim.par (                6 ,       $P_box2l_Cuboid               ) = 0.0000000000000000E+00  ! [-] Curve fitting type
prim.par (                9 ,       $P_box2l_Cuboid               ) = 0.0000000000000000E+00  ! [-] Material side
prim.par (               10 ,       $P_box2l_Cuboid               ) = 2.0000000298000001E-01  ! [m] Depth
prim.par (               12 ,       $P_box2l_Cuboid               ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               13 ,       $P_box2l_Cuboid               ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_box2l_cylinder             ) = 2                       ! Type
prim.ref (                          $P_box2l_cylinder             ) = $M_box2l                ! Reference Marker
prim.ang (                1 ,       $P_box2l_cylinder             ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_box2l_cylinder             ) = { 116 deg }             ! Angles
prim.ang (                3 ,       $P_box2l_cylinder             ) = { 0 deg }               ! Angles
prim.color.r (            1 ,       $P_box2l_cylinder             ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.r (            2 ,       $P_box2l_cylinder             ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_box2l_cylinder             ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.g (            2 ,       $P_box2l_cylinder             ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_box2l_cylinder             ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.b (            2 ,       $P_box2l_cylinder             ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_box2l_cylinder             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_box2l_cylinder             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_box2l_cylinder             ) = 2.1999999881000001E-01  ! [m] Height
prim.par (                3 ,       $P_box2l_cylinder             ) = 2.3000000416999999E-01  ! [m] Outer diameter
prim.par (                5 ,       $P_box2l_cylinder             ) = 8.0000000000000000E+00  ! [-] Number of planes
prim.par (                7 ,       $P_box2l_cylinder             ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (                8 ,       $P_box2l_cylinder             ) = 1.0000000000000000E+00  ! [-] Show top cap


body.m (                            $B_box2r                      ) = 4.8200000762999998E+01  ! Mass of the Body
body.cg.pos (             1 ,       $B_box2r                      ) = 8.5000000894000005E-02  ! Center of gravity
body.cg.pos (             2 ,       $B_box2r                      ) = 4.9999998882000003E-03  ! Center of gravity
body.cg.pos (             3 ,       $B_box2r                      ) = -9.9999997765000005E-03 ! Center of gravity
body.I.tens (             1 ,   1 , $B_box2r                      ) = 7.0499998331000002E-01  ! Moments of inertia
body.I.tens (             2 ,   2 , $B_box2r                      ) = 2.7599999904999999E+00  ! Moments of inertia
body.I.tens (             3 ,   3 , $B_box2r                      ) = 2.6210000514999998E+00  ! Moments of inertia
body.I.kind (                       $B_box2r                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.I.ref (                        $B_box2r                      ) = null                    ! Inertia Reference Marker
body.type (                         $B_box2r                      ) = 0                       ! Body type: 0=rigid; 1=flex modal; 2=SIMBEAM; 4=nonlinear SIMBEAM
body.attr.2d.pos.x (                $B_box2r                      ) = 4.3000000000000000E+02
body.attr.2d.pos.y (                $B_box2r                      ) = 4.0000000000000000E+01
body.attr.2d.width (                $B_box2r                      ) = 5.0000000000000000E+01
body.attr.2d.height (               $B_box2r                      ) = 3.0000000000000000E+01

marker.type (                       $M_box2r                      ) = 1                       ! Type
marker.parent (                     $M_box2r                      ) = $B_box2r                ! Body

marker.type (                       $M_box2r_wheelset             ) = 1                       ! Type
marker.parent (                     $M_box2r_wheelset             ) = $B_box2r                ! Body

marker.type (                       $M_box2r_damping              ) = 1                       ! Type
marker.parent (                     $M_box2r_damping              ) = $B_box2r                ! Body
marker.pos (              1 ,       $M_box2r_damping              ) = $_PS_Damping_Box_B_x    ! Position
marker.pos (              2 ,       $M_box2r_damping              ) = $_PS_Damping_Box_R      ! Position
marker.pos (              3 ,       $M_box2r_damping              ) = $_PS_Damping_Z_low      ! Position

marker.type (                       $M_box2r_spring               ) = 1                       ! Type
marker.parent (                     $M_box2r_spring               ) = $B_box2r                ! Body
marker.pos (              3 ,       $M_box2r_spring               ) = $_PS_Spring_Z_box       ! Position

marker.type (                       $M_box2r_joint                ) = 1                       ! Type
marker.parent (                     $M_box2r_joint                ) = $B_box2r                ! Body
marker.pos (              1 ,       $M_box2r_joint                ) = $_PS_Joint_X_4          ! Position
marker.pos (              3 ,       $M_box2r_joint                ) = $_PS_Joint_Z_box        ! Position

marker.type (                       $M_box2r_BRF                  ) = 1                       ! Type
marker.parent (                     $M_box2r_BRF                  ) = $B_box2r                ! Body
marker.flx.type (                   $M_box2r_BRF                  ) = 4                       ! Flexible type

joint.from (                        $J_box2r                      ) = $M_wheelset2_r          ! From Marker
joint.to (                          $J_box2r                      ) = $M_box2r                ! To Marker
joint.type (                        $J_box2r                      ) = 2                       ! Type
joint.st.pos (            1 ,       $J_box2r                      ) = 0.0000000000000000E+00  ! Position
joint.st.vel (            1 ,       $J_box2r                      ) = 3.2318788745134796E+01  ! Velocity
joint.st.dep (            1 ,       $J_box2r                      ) = 0                       ! Dependency state
joint.attr.2d.pos.x (     1 ,       $J_box2r                      ) = 1360
joint.attr.2d.pos.y (     1 ,       $J_box2r                      ) = 70
joint.attr.2d.ori (       1 ,       $J_box2r                      ) = 180
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_box2r           ) = 1500, 1500, 1377
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_box2r           ) = 10, 70, 70
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_box2r             ) = 480, 490, 490, 1343
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_box2r             ) = 60, 60, 70, 70

prim.type (                         $P_box2r_Cuboid               ) = 5                       ! Type
prim.ref (                          $P_box2r_Cuboid               ) = $M_box2r                ! Reference Marker
prim.pos (                3 ,       $P_box2r_Cuboid               ) = 1.0000000149000000E-01  ! Position
prim.ang (                1 ,       $P_box2r_Cuboid               ) = { 90 deg }              ! Angles
prim.ang (                2 ,       $P_box2r_Cuboid               ) = { 0 deg }               ! Angles
prim.ang (                3 ,       $P_box2r_Cuboid               ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   1 , $P_box2r_Cuboid               ) = -2.5000000000000000E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_box2r_Cuboid               ) = -2.5000000000000000E-01 ! Vertices
prim.vtx (                1 ,   3 , $P_box2r_Cuboid               ) = -1.8000000715000000E-01 ! Vertices
prim.vtx (                1 ,   4 , $P_box2r_Cuboid               ) = -1.0000000149000000E-01 ! Vertices
prim.vtx (                1 ,   5 , $P_box2r_Cuboid               ) = 1.0000000149000000E-01  ! Vertices
prim.vtx (                1 ,   6 , $P_box2r_Cuboid               ) = 5.0000000000000000E-01  ! Vertices
prim.vtx (                1 ,   7 , $P_box2r_Cuboid               ) = 5.0000000000000000E-01  ! Vertices
prim.vtx (                1 ,   8 , $P_box2r_Cuboid               ) = 0.0000000000000000E+00  ! Vertices
prim.vtx (                2 ,   2 , $P_box2r_Cuboid               ) = -5.0000000745000002E-02 ! Vertices
prim.vtx (                2 ,   3 , $P_box2r_Cuboid               ) = -5.0000000745000002E-02 ! Vertices
prim.vtx (                2 ,   4 , $P_box2r_Cuboid               ) = -2.0000000298000001E-01 ! Vertices
prim.vtx (                2 ,   5 , $P_box2r_Cuboid               ) = -2.0000000298000001E-01 ! Vertices
prim.vtx (                2 ,   6 , $P_box2r_Cuboid               ) = -1.7000000178999999E-01 ! Vertices
prim.vtx (                2 ,   7 , $P_box2r_Cuboid               ) = -1.0000000149000000E-01 ! Vertices
prim.vtx (                2 ,   8 , $P_box2r_Cuboid               ) = 9.9999997765000005E-03  ! Vertices
prim.vtx (                3 ,   8 , $P_box2r_Cuboid               ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_box2r_Cuboid               ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_box2r_Cuboid               ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_box2r_Cuboid               ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_box2r_Cuboid               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_box2r_Cuboid               ) = 0.0000000000000000E+00  ! [-] Contour by
prim.par (                4 ,       $P_box2r_Cuboid               ) = 1.0000000000000000E+00  ! [-] Contour
prim.par (                6 ,       $P_box2r_Cuboid               ) = 0.0000000000000000E+00  ! [-] Curve fitting type
prim.par (                9 ,       $P_box2r_Cuboid               ) = 0.0000000000000000E+00  ! [-] Material side
prim.par (               10 ,       $P_box2r_Cuboid               ) = 2.0000000298000001E-01  ! [m] Depth
prim.par (               12 ,       $P_box2r_Cuboid               ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               13 ,       $P_box2r_Cuboid               ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_box2r_cylinder             ) = 2                       ! Type
prim.ref (                          $P_box2r_cylinder             ) = $M_box2r                ! Reference Marker
prim.ang (                1 ,       $P_box2r_cylinder             ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_box2r_cylinder             ) = { 116 deg }             ! Angles
prim.ang (                3 ,       $P_box2r_cylinder             ) = { 0 deg }               ! Angles
prim.color.r (            1 ,       $P_box2r_cylinder             ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.r (            2 ,       $P_box2r_cylinder             ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_box2r_cylinder             ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.g (            2 ,       $P_box2r_cylinder             ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_box2r_cylinder             ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.b (            2 ,       $P_box2r_cylinder             ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_box2r_cylinder             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_box2r_cylinder             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_box2r_cylinder             ) = 2.1999999881000001E-01  ! [m] Height
prim.par (                3 ,       $P_box2r_cylinder             ) = 2.3000000416999999E-01  ! [m] Outer diameter
prim.par (                5 ,       $P_box2r_cylinder             ) = 8.0000000000000000E+00  ! [-] Number of planes
prim.par (                7 ,       $P_box2r_cylinder             ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (                8 ,       $P_box2r_cylinder             ) = 1.0000000000000000E+00  ! [-] Show top cap


body.m (                            $B_box1l                      ) = 4.8200000762999998E+01  ! Mass of the Body
body.cg.pos (             1 ,       $B_box1l                      ) = -8.5000000894000005E-02 ! Center of gravity
body.cg.pos (             2 ,       $B_box1l                      ) = -4.9999998882000003E-03 ! Center of gravity
body.cg.pos (             3 ,       $B_box1l                      ) = -9.9999997765000005E-03 ! Center of gravity
body.I.tens (             1 ,   1 , $B_box1l                      ) = 7.0499998331000002E-01  ! Moments of inertia
body.I.tens (             2 ,   2 , $B_box1l                      ) = 2.7599999904999999E+00  ! Moments of inertia
body.I.tens (             3 ,   3 , $B_box1l                      ) = 2.6210000514999998E+00  ! Moments of inertia
body.I.kind (                       $B_box1l                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.I.ref (                        $B_box1l                      ) = null                    ! Inertia Reference Marker
body.type (                         $B_box1l                      ) = 0                       ! Body type: 0=rigid; 1=flex modal; 2=SIMBEAM; 4=nonlinear SIMBEAM
body.attr.2d.pos.x (                $B_box1l                      ) = 6.4000000000000000E+02
body.attr.2d.pos.y (                $B_box1l                      ) = -9.0000000000000000E+01
body.attr.2d.width (                $B_box1l                      ) = 5.0000000000000000E+01
body.attr.2d.height (               $B_box1l                      ) = 3.0000000000000000E+01

marker.type (                       $M_box1l                      ) = 1                       ! Type
marker.parent (                     $M_box1l                      ) = $B_box1l                ! Body

marker.type (                       $M_box1l_wheelset             ) = 1                       ! Type
marker.parent (                     $M_box1l_wheelset             ) = $B_box1l                ! Body

marker.type (                       $M_box1l_damping              ) = 1                       ! Type
marker.parent (                     $M_box1l_damping              ) = $B_box1l                ! Body
marker.pos (              1 ,       $M_box1l_damping              ) = $_PS_Damping_Box_F_x    ! Position
marker.pos (              2 ,       $M_box1l_damping              ) = $_PS_Damping_Box_L      ! Position
marker.pos (              3 ,       $M_box1l_damping              ) = $_PS_Damping_Z_low      ! Position

marker.type (                       $M_box1l_spring               ) = 1                       ! Type
marker.parent (                     $M_box1l_spring               ) = $B_box1l                ! Body
marker.pos (              3 ,       $M_box1l_spring               ) = $_PS_Spring_Z_box       ! Position

marker.type (                       $M_box1l_joint                ) = 1                       ! Type
marker.parent (                     $M_box1l_joint                ) = $B_box1l                ! Body
marker.pos (              1 ,       $M_box1l_joint                ) = $_PS_Joint_X_3          ! Position
marker.pos (              3 ,       $M_box1l_joint                ) = $_PS_Joint_Z_box        ! Position

marker.type (                       $M_box1l_BRF                  ) = 1                       ! Type
marker.parent (                     $M_box1l_BRF                  ) = $B_box1l                ! Body
marker.flx.type (                   $M_box1l_BRF                  ) = 4                       ! Flexible type

joint.from (                        $J_box1l                      ) = $M_wheelset1_l          ! From Marker
joint.to (                          $J_box1l                      ) = $M_box1l                ! To Marker
joint.type (                        $J_box1l                      ) = 2                       ! Type
joint.st.pos (            1 ,       $J_box1l                      ) = 0.0000000000000000E+00  ! Position
joint.st.vel (            1 ,       $J_box1l                      ) = 3.2318788745134796E+01  ! Velocity
joint.st.dep (            1 ,       $J_box1l                      ) = 0                       ! Dependency state
joint.attr.2d.pos.x (     1 ,       $J_box1l                      ) = 1360
joint.attr.2d.pos.y (     1 ,       $J_box1l                      ) = -90
joint.attr.2d.ori (       1 ,       $J_box1l                      ) = 270
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_box1l           ) = 1390, 1360, 1360
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_box1l           ) = 0, 0, -73
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_box1l             ) = 680, 680, 1360, 1360
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_box1l             ) = -90, -117, -117, -107

prim.type (                         $P_box1l_Cuboid               ) = 5                       ! Type
prim.ref (                          $P_box1l_Cuboid               ) = $M_box1l                ! Reference Marker
prim.pos (                3 ,       $P_box1l_Cuboid               ) = 1.0000000149000000E-01  ! Position
prim.ang (                1 ,       $P_box1l_Cuboid               ) = { 90 deg }              ! Angles
prim.ang (                2 ,       $P_box1l_Cuboid               ) = { 180 deg }             ! Angles
prim.ang (                3 ,       $P_box1l_Cuboid               ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   1 , $P_box1l_Cuboid               ) = -2.5000000000000000E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_box1l_Cuboid               ) = -2.5000000000000000E-01 ! Vertices
prim.vtx (                1 ,   3 , $P_box1l_Cuboid               ) = -1.8000000715000000E-01 ! Vertices
prim.vtx (                1 ,   4 , $P_box1l_Cuboid               ) = -1.0000000149000000E-01 ! Vertices
prim.vtx (                1 ,   5 , $P_box1l_Cuboid               ) = 1.0000000149000000E-01  ! Vertices
prim.vtx (                1 ,   6 , $P_box1l_Cuboid               ) = 5.0000000000000000E-01  ! Vertices
prim.vtx (                1 ,   7 , $P_box1l_Cuboid               ) = 5.0000000000000000E-01  ! Vertices
prim.vtx (                1 ,   8 , $P_box1l_Cuboid               ) = 0.0000000000000000E+00  ! Vertices
prim.vtx (                2 ,   2 , $P_box1l_Cuboid               ) = -5.0000000745000002E-02 ! Vertices
prim.vtx (                2 ,   3 , $P_box1l_Cuboid               ) = -5.0000000745000002E-02 ! Vertices
prim.vtx (                2 ,   4 , $P_box1l_Cuboid               ) = -2.0000000298000001E-01 ! Vertices
prim.vtx (                2 ,   5 , $P_box1l_Cuboid               ) = -2.0000000298000001E-01 ! Vertices
prim.vtx (                2 ,   6 , $P_box1l_Cuboid               ) = -1.7000000178999999E-01 ! Vertices
prim.vtx (                2 ,   7 , $P_box1l_Cuboid               ) = -1.0000000149000000E-01 ! Vertices
prim.vtx (                2 ,   8 , $P_box1l_Cuboid               ) = 9.9999997765000005E-03  ! Vertices
prim.vtx (                3 ,   8 , $P_box1l_Cuboid               ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_box1l_Cuboid               ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_box1l_Cuboid               ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_box1l_Cuboid               ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_box1l_Cuboid               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_box1l_Cuboid               ) = 0.0000000000000000E+00  ! [-] Contour by
prim.par (                4 ,       $P_box1l_Cuboid               ) = 1.0000000000000000E+00  ! [-] Contour
prim.par (                6 ,       $P_box1l_Cuboid               ) = 0.0000000000000000E+00  ! [-] Curve fitting type
prim.par (                9 ,       $P_box1l_Cuboid               ) = 0.0000000000000000E+00  ! [-] Material side
prim.par (               10 ,       $P_box1l_Cuboid               ) = 2.0000000298000001E-01  ! [m] Depth
prim.par (               12 ,       $P_box1l_Cuboid               ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               13 ,       $P_box1l_Cuboid               ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_box1l_cylinder             ) = 2                       ! Type
prim.ref (                          $P_box1l_cylinder             ) = $M_box1l                ! Reference Marker
prim.ang (                1 ,       $P_box1l_cylinder             ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_box1l_cylinder             ) = { 116 deg }             ! Angles
prim.ang (                3 ,       $P_box1l_cylinder             ) = { 0 deg }               ! Angles
prim.color.r (            1 ,       $P_box1l_cylinder             ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.r (            2 ,       $P_box1l_cylinder             ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_box1l_cylinder             ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.g (            2 ,       $P_box1l_cylinder             ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_box1l_cylinder             ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.b (            2 ,       $P_box1l_cylinder             ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_box1l_cylinder             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_box1l_cylinder             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_box1l_cylinder             ) = 2.1999999881000001E-01  ! [m] Height
prim.par (                3 ,       $P_box1l_cylinder             ) = 2.3000000416999999E-01  ! [m] Outer diameter
prim.par (                5 ,       $P_box1l_cylinder             ) = 8.0000000000000000E+00  ! [-] Number of planes
prim.par (                7 ,       $P_box1l_cylinder             ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (                8 ,       $P_box1l_cylinder             ) = 1.0000000000000000E+00  ! [-] Show top cap


body.m (                            $B_box1r                      ) = 4.8200000762999998E+01  ! Mass of the Body
body.cg.pos (             1 ,       $B_box1r                      ) = -8.5000000894000005E-02 ! Center of gravity
body.cg.pos (             2 ,       $B_box1r                      ) = 4.9999998882000003E-03  ! Center of gravity
body.cg.pos (             3 ,       $B_box1r                      ) = -9.9999997765000005E-03 ! Center of gravity
body.I.tens (             1 ,   1 , $B_box1r                      ) = 7.0499998331000002E-01  ! Moments of inertia
body.I.tens (             2 ,   2 , $B_box1r                      ) = 2.7599999904999999E+00  ! Moments of inertia
body.I.tens (             3 ,   3 , $B_box1r                      ) = 2.6210000514999998E+00  ! Moments of inertia
body.I.kind (                       $B_box1r                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.I.ref (                        $B_box1r                      ) = null                    ! Inertia Reference Marker
body.type (                         $B_box1r                      ) = 0                       ! Body type: 0=rigid; 1=flex modal; 2=SIMBEAM; 4=nonlinear SIMBEAM
body.attr.2d.pos.x (                $B_box1r                      ) = 3.4000000000000000E+02
body.attr.2d.pos.y (                $B_box1r                      ) = 2.0000000000000000E+01
body.attr.2d.width (                $B_box1r                      ) = 5.0000000000000000E+01
body.attr.2d.height (               $B_box1r                      ) = 3.0000000000000000E+01

marker.type (                       $M_box1r                      ) = 1                       ! Type
marker.parent (                     $M_box1r                      ) = $B_box1r                ! Body

marker.type (                       $M_box1r_wheelset             ) = 1                       ! Type
marker.parent (                     $M_box1r_wheelset             ) = $B_box1r                ! Body

marker.type (                       $M_box1r_damping              ) = 1                       ! Type
marker.parent (                     $M_box1r_damping              ) = $B_box1r                ! Body
marker.pos (              1 ,       $M_box1r_damping              ) = $_PS_Damping_Box_F_x    ! Position
marker.pos (              2 ,       $M_box1r_damping              ) = $_PS_Damping_Box_R      ! Position
marker.pos (              3 ,       $M_box1r_damping              ) = $_PS_Damping_Z_low      ! Position

marker.type (                       $M_box1r_spring               ) = 1                       ! Type
marker.parent (                     $M_box1r_spring               ) = $B_box1r                ! Body
marker.pos (              3 ,       $M_box1r_spring               ) = $_PS_Spring_Z_box       ! Position

marker.type (                       $M_box1r_joint                ) = 1                       ! Type
marker.parent (                     $M_box1r_joint                ) = $B_box1r                ! Body
marker.pos (              1 ,       $M_box1r_joint                ) = $_PS_Joint_X_3          ! Position
marker.pos (              3 ,       $M_box1r_joint                ) = $_PS_Joint_Z_box        ! Position

marker.type (                       $M_box1r_BRF                  ) = 1                       ! Type
marker.parent (                     $M_box1r_BRF                  ) = $B_box1r                ! Body
marker.flx.type (                   $M_box1r_BRF                  ) = 4                       ! Flexible type

joint.from (                        $J_box1r                      ) = $M_wheelset1_r          ! From Marker
joint.to (                          $J_box1r                      ) = $M_box1r                ! To Marker
joint.type (                        $J_box1r                      ) = 2                       ! Type
joint.st.pos (            1 ,       $J_box1r                      ) = 0.0000000000000000E+00  ! Position
joint.st.vel (            1 ,       $J_box1r                      ) = 3.2318788745134796E+01  ! Velocity
joint.st.dep (            1 ,       $J_box1r                      ) = 0                       ! Dependency state
joint.attr.2d.pos.x (     1 ,       $J_box1r                      ) = 1290
joint.attr.2d.pos.y (     1 ,       $J_box1r                      ) = 50
joint.attr.2d.ori (       1 ,       $J_box1r                      ) = 180
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_box1r           ) = 1400, 1400, 1307
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_box1r           ) = 10, 50, 50
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_box1r             ) = 390, 404.634033203125, 404.634033203125, 418.5361328125, 437.072265625, 449.4296875, 465.90625, 487.875, 575.75, 751.5, 1103, 1103, 1103, 1113, 1123, 1133, 1143, 1153, 1163, 1173, 1183, 1193, 1203, 1213, 1223, 1233, 1243, 1253, 1263, 1273
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_box1r             ) = 40, 40, 75, 75, 75, 75, 75, 75, 75, 75, 75, 60, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50

prim.type (                         $P_box1r_Cuboid               ) = 5                       ! Type
prim.ref (                          $P_box1r_Cuboid               ) = $M_box1r                ! Reference Marker
prim.pos (                3 ,       $P_box1r_Cuboid               ) = 1.0000000149000000E-01  ! Position
prim.ang (                1 ,       $P_box1r_Cuboid               ) = { 90 deg }              ! Angles
prim.ang (                2 ,       $P_box1r_Cuboid               ) = { 180 deg }             ! Angles
prim.ang (                3 ,       $P_box1r_Cuboid               ) = { 0 deg }               ! Angles
prim.vtx (                1 ,   1 , $P_box1r_Cuboid               ) = -2.5000000000000000E-01 ! Vertices
prim.vtx (                1 ,   2 , $P_box1r_Cuboid               ) = -2.5000000000000000E-01 ! Vertices
prim.vtx (                1 ,   3 , $P_box1r_Cuboid               ) = -1.8000000715000000E-01 ! Vertices
prim.vtx (                1 ,   4 , $P_box1r_Cuboid               ) = -1.0000000149000000E-01 ! Vertices
prim.vtx (                1 ,   5 , $P_box1r_Cuboid               ) = 1.0000000149000000E-01  ! Vertices
prim.vtx (                1 ,   6 , $P_box1r_Cuboid               ) = 5.0000000000000000E-01  ! Vertices
prim.vtx (                1 ,   7 , $P_box1r_Cuboid               ) = 5.0000000000000000E-01  ! Vertices
prim.vtx (                1 ,   8 , $P_box1r_Cuboid               ) = 0.0000000000000000E+00  ! Vertices
prim.vtx (                2 ,   2 , $P_box1r_Cuboid               ) = -5.0000000745000002E-02 ! Vertices
prim.vtx (                2 ,   3 , $P_box1r_Cuboid               ) = -5.0000000745000002E-02 ! Vertices
prim.vtx (                2 ,   4 , $P_box1r_Cuboid               ) = -2.0000000298000001E-01 ! Vertices
prim.vtx (                2 ,   5 , $P_box1r_Cuboid               ) = -2.0000000298000001E-01 ! Vertices
prim.vtx (                2 ,   6 , $P_box1r_Cuboid               ) = -1.7000000178999999E-01 ! Vertices
prim.vtx (                2 ,   7 , $P_box1r_Cuboid               ) = -1.0000000149000000E-01 ! Vertices
prim.vtx (                2 ,   8 , $P_box1r_Cuboid               ) = 9.9999997765000005E-03  ! Vertices
prim.vtx (                3 ,   8 , $P_box1r_Cuboid               ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_box1r_Cuboid               ) = 9.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_box1r_Cuboid               ) = 9.4000000000000000E+01  ! Colors (green component)
prim.color.b (            1 ,       $P_box1r_Cuboid               ) = 9.4000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_box1r_Cuboid               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_box1r_Cuboid               ) = 0.0000000000000000E+00  ! [-] Contour by
prim.par (                4 ,       $P_box1r_Cuboid               ) = 1.0000000000000000E+00  ! [-] Contour
prim.par (                6 ,       $P_box1r_Cuboid               ) = 0.0000000000000000E+00  ! [-] Curve fitting type
prim.par (                9 ,       $P_box1r_Cuboid               ) = 0.0000000000000000E+00  ! [-] Material side
prim.par (               10 ,       $P_box1r_Cuboid               ) = 2.0000000298000001E-01  ! [m] Depth
prim.par (               12 ,       $P_box1r_Cuboid               ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (               13 ,       $P_box1r_Cuboid               ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_box1r_cylinder             ) = 2                       ! Type
prim.ref (                          $P_box1r_cylinder             ) = $M_box1r                ! Reference Marker
prim.ang (                1 ,       $P_box1r_cylinder             ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_box1r_cylinder             ) = { 116 deg }             ! Angles
prim.ang (                3 ,       $P_box1r_cylinder             ) = { 0 deg }               ! Angles
prim.color.r (            1 ,       $P_box1r_cylinder             ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.r (            2 ,       $P_box1r_cylinder             ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_box1r_cylinder             ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.g (            2 ,       $P_box1r_cylinder             ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_box1r_cylinder             ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.b (            2 ,       $P_box1r_cylinder             ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_box1r_cylinder             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_box1r_cylinder             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_box1r_cylinder             ) = 2.1999999881000001E-01  ! [m] Height
prim.par (                3 ,       $P_box1r_cylinder             ) = 2.3000000416999999E-01  ! [m] Outer diameter
prim.par (                5 ,       $P_box1r_cylinder             ) = 8.0000000000000000E+00  ! [-] Number of planes
prim.par (                7 ,       $P_box1r_cylinder             ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (                8 ,       $P_box1r_cylinder             ) = 1.0000000000000000E+00  ! [-] Show top cap


body.m (                            $B_Carbody                    ) = 3.3766000000000000E+04  ! Mass of the Body
body.cg.pos (             3 ,       $B_Carbody                    ) = -1.5199999809000000E+00 ! Center of gravity
body.I.tens (             1 ,   1 , $B_Carbody                    ) = 1.1020000000000000E+05  ! Moments of inertia
body.I.tens (             2 ,   2 , $B_Carbody                    ) = 1.6660000000000000E+06  ! Moments of inertia
body.I.tens (             3 ,   3 , $B_Carbody                    ) = 1.5722000000000000E+06  ! Moments of inertia
body.I.kind (                       $B_Carbody                    ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.I.ref (                        $B_Carbody                    ) = null                    ! Inertia Reference Marker
body.type (                         $B_Carbody                    ) = 0                       ! Body type: 0=rigid; 1=flex modal; 2=SIMBEAM; 4=nonlinear SIMBEAM
body.attr.2d.pos.x (                $B_Carbody                    ) = -1.1000000000000000E+02
body.attr.2d.pos.y (                $B_Carbody                    ) = -8.0000000000000000E+01
body.attr.2d.width (                $B_Carbody                    ) = 2.2000000000000000E+02
body.attr.2d.height (               $B_Carbody                    ) = 1.5000000000000000E+02

marker.type (                       $M_Carbody                    ) = 1                       ! Type
marker.parent (                     $M_Carbody                    ) = $B_Carbody              ! Body

marker.type (                       $M_Carbody_Airspring_1l       ) = 1                       ! Type
marker.parent (                     $M_Carbody_Airspring_1l       ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_Airspring_1l       ) = 8.7500000000000000E+00  ! Position
marker.pos (              2 ,       $M_Carbody_Airspring_1l       ) = $_SS_Airspring_FY       ! Position
marker.pos (              3 ,       $M_Carbody_Airspring_1l       ) = $_SS_Airspring_Z        ! Position

marker.type (                       $M_Carbody_Airspring_1r       ) = 1                       ! Type
marker.parent (                     $M_Carbody_Airspring_1r       ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_Airspring_1r       ) = 8.7500000000000000E+00  ! Position
marker.pos (              2 ,       $M_Carbody_Airspring_1r       ) = $_SS_Airspring_Y        ! Position
marker.pos (              3 ,       $M_Carbody_Airspring_1r       ) = $_SS_Airspring_Z        ! Position

marker.type (                       $M_Carbody_Airspring_2l       ) = 1                       ! Type
marker.parent (                     $M_Carbody_Airspring_2l       ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_Airspring_2l       ) = -8.7500000000000000E+00 ! Position
marker.pos (              2 ,       $M_Carbody_Airspring_2l       ) = $_SS_Airspring_FY       ! Position
marker.pos (              3 ,       $M_Carbody_Airspring_2l       ) = $_SS_Airspring_Z        ! Position

marker.type (                       $M_Carbody_Airspring_2r       ) = 1                       ! Type
marker.parent (                     $M_Carbody_Airspring_2r       ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_Airspring_2r       ) = -8.7500000000000000E+00 ! Position
marker.pos (              2 ,       $M_Carbody_Airspring_2r       ) = $_SS_Airspring_Y        ! Position
marker.pos (              3 ,       $M_Carbody_Airspring_2r       ) = $_SS_Airspring_Z        ! Position

marker.type (                       $M_Carbody_KSX_1l             ) = 1                       ! Type
marker.parent (                     $M_Carbody_KSX_1l             ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_KSX_1l             ) = $_SS_KSX_car_fx         ! Position
marker.pos (              2 ,       $M_Carbody_KSX_1l             ) = $_SS_KSX_Carbody_L      ! Position
marker.pos (              3 ,       $M_Carbody_KSX_1l             ) = $_SS_KSX_Carbody_z      ! Position

marker.type (                       $M_Carbody_KSX_1r             ) = 1                       ! Type
marker.parent (                     $M_Carbody_KSX_1r             ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_KSX_1r             ) = $_SS_KSX_car_fx         ! Position
marker.pos (              2 ,       $M_Carbody_KSX_1r             ) = $_SS_KSX_Carbody_R      ! Position
marker.pos (              3 ,       $M_Carbody_KSX_1r             ) = $_SS_KSX_Carbody_z      ! Position

marker.type (                       $M_Carbody_KSX_2l             ) = 1                       ! Type
marker.parent (                     $M_Carbody_KSX_2l             ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_KSX_2l             ) = $_SS_KSX_car_bx         ! Position
marker.pos (              2 ,       $M_Carbody_KSX_2l             ) = $_SS_KSX_Carbody_L      ! Position
marker.pos (              3 ,       $M_Carbody_KSX_2l             ) = $_SS_KSX_Carbody_z      ! Position

marker.type (                       $M_Carbody_KSX_2r             ) = 1                       ! Type
marker.parent (                     $M_Carbody_KSX_2r             ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_KSX_2r             ) = $_SS_KSX_car_bx         ! Position
marker.pos (              2 ,       $M_Carbody_KSX_2r             ) = $_SS_KSX_Carbody_R      ! Position
marker.pos (              3 ,       $M_Carbody_KSX_2r             ) = $_SS_KSX_Carbody_z      ! Position

marker.type (                       $M_Carbody_HX_1               ) = 1                       ! Type
marker.parent (                     $M_Carbody_HX_1               ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_HX_1               ) = $_SS_HX_car_fx2         ! Position
marker.pos (              2 ,       $M_Carbody_HX_1               ) = $_SS_HX_Y1              ! Position
marker.pos (              3 ,       $M_Carbody_HX_1               ) = $_SS_HX_Carbody_z       ! Position

marker.type (                       $M_Carbody_HX_2               ) = 1                       ! Type
marker.parent (                     $M_Carbody_HX_2               ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_HX_2               ) = $_SS_HX_car_fx          ! Position
marker.pos (              2 ,       $M_Carbody_HX_2               ) = $_SS_HX_Y4              ! Position
marker.pos (              3 ,       $M_Carbody_HX_2               ) = $_SS_HX_Carbody_z       ! Position

marker.type (                       $M_Carbody_HX_3               ) = 1                       ! Type
marker.parent (                     $M_Carbody_HX_3               ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_HX_3               ) = $_SS_HX_car_bx          ! Position
marker.pos (              2 ,       $M_Carbody_HX_3               ) = $_SS_HX_Y1              ! Position
marker.pos (              3 ,       $M_Carbody_HX_3               ) = $_SS_HX_Carbody_z       ! Position

marker.type (                       $M_Carbody_HX_4               ) = 1                       ! Type
marker.parent (                     $M_Carbody_HX_4               ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_HX_4               ) = $_SS_HX_car_bx2         ! Position
marker.pos (              2 ,       $M_Carbody_HX_4               ) = $_SS_HX_Y4              ! Position
marker.pos (              3 ,       $M_Carbody_HX_4               ) = $_SS_HX_Carbody_z       ! Position

marker.type (                       $M_Carbody_QY_1               ) = 1                       ! Type
marker.parent (                     $M_Carbody_QY_1               ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_QY_1               ) = 8.7500000000000000E+00  ! Position
marker.pos (              3 ,       $M_Carbody_QY_1               ) = $_QY_Car_Z              ! Position

marker.type (                       $M_Carbody_QY_2               ) = 1                       ! Type
marker.parent (                     $M_Carbody_QY_2               ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_QY_2               ) = -8.7500000000000000E+00 ! Position
marker.pos (              3 ,       $M_Carbody_QY_2               ) = $_QY_Car_Z              ! Position

marker.type (                       $M_Carbody_ZD_1l              ) = 1                       ! Type
marker.parent (                     $M_Carbody_ZD_1l              ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_ZD_1l              ) = 8.7500000000000000E+00  ! Position
marker.pos (              2 ,       $M_Carbody_ZD_1l              ) = -1.8999999762000000E-01 ! Position
marker.pos (              3 ,       $M_Carbody_ZD_1l              ) = -6.8000000714999997E-01 ! Position

marker.type (                       $M_Carbody_ZD_1r              ) = 1                       ! Type
marker.parent (                     $M_Carbody_ZD_1r              ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_ZD_1r              ) = 8.7500000000000000E+00  ! Position
marker.pos (              2 ,       $M_Carbody_ZD_1r              ) = 1.8999999762000000E-01  ! Position
marker.pos (              3 ,       $M_Carbody_ZD_1r              ) = -6.8000000714999997E-01 ! Position

marker.type (                       $M_Carbody_ZD_2l              ) = 1                       ! Type
marker.parent (                     $M_Carbody_ZD_2l              ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_ZD_2l              ) = -8.7500000000000000E+00 ! Position
marker.pos (              2 ,       $M_Carbody_ZD_2l              ) = -1.8999999762000000E-01 ! Position
marker.pos (              3 ,       $M_Carbody_ZD_2l              ) = -6.8000000714999997E-01 ! Position

marker.type (                       $M_Carbody_ZD_2r              ) = 1                       ! Type
marker.parent (                     $M_Carbody_ZD_2r              ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_ZD_2r              ) = -8.7500000000000000E+00 ! Position
marker.pos (              2 ,       $M_Carbody_ZD_2r              ) = 1.8999999762000000E-01  ! Position
marker.pos (              3 ,       $M_Carbody_ZD_2r              ) = -6.8000000714999997E-01 ! Position

marker.type (                       $M_Carbody_NiuGan_1           ) = 1                       ! Type
marker.parent (                     $M_Carbody_NiuGan_1           ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_NiuGan_1           ) = 8.7500000000000000E+00  ! Position
marker.pos (              3 ,       $M_Carbody_NiuGan_1           ) = -4.3000000714999997E-01 ! Position

marker.type (                       $M_Carbody_NiuGan_2           ) = 1                       ! Type
marker.parent (                     $M_Carbody_NiuGan_2           ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_NiuGan_2           ) = -8.7500000000000000E+00 ! Position
marker.pos (              3 ,       $M_Carbody_NiuGan_2           ) = -4.3000000714999997E-01 ! Position

marker.type (                       $M_Carbody_Floor_1            ) = 1                       ! Type
marker.parent (                     $M_Carbody_Floor_1            ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_Floor_1            ) = 8.7500000000000000E+00  ! Position
marker.pos (              2 ,       $M_Carbody_Floor_1            ) = -1.0000000000000000E+00 ! Position
marker.pos (              3 ,       $M_Carbody_Floor_1            ) = $_CarFloor_Z            ! Position

marker.type (                       $M_Carbody_Floor_2            ) = 1                       ! Type
marker.parent (                     $M_Carbody_Floor_2            ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_Floor_2            ) = -8.7500000000000000E+00 ! Position
marker.pos (              2 ,       $M_Carbody_Floor_2            ) = 1.0000000000000000E+00  ! Position
marker.pos (              3 ,       $M_Carbody_Floor_2            ) = $_CarFloor_Z            ! Position

marker.type (                       $M_Carbody_ZD_1               ) = 1                       ! Type
marker.parent (                     $M_Carbody_ZD_1               ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_ZD_1               ) = 8.7500000000000000E+00  ! Position
marker.pos (              3 ,       $M_Carbody_ZD_1               ) = -6.8000000714999997E-01 ! Position

marker.type (                       $M_Carbody_ZD_2               ) = 1                       ! Type
marker.parent (                     $M_Carbody_ZD_2               ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_ZD_2               ) = -8.7500000000000000E+00 ! Position
marker.pos (              3 ,       $M_Carbody_ZD_2               ) = -6.8000000714999997E-01 ! Position

marker.type (                       $M_Carbody_BRF                ) = 1                       ! Type
marker.parent (                     $M_Carbody_BRF                ) = $B_Carbody              ! Body
marker.flx.type (                   $M_Carbody_BRF                ) = 4                       ! Flexible type

marker.type (                       $M_Carbody_load               ) = 2                       ! Type
marker.parent (                     $M_Carbody_load               ) = $B_Carbody              ! Body
marker.pos (              3 ,       $M_Carbody_load               ) = -2.0000000000000000E+00 ! Position

joint.from (                        $J_Carbody                    ) = $M_Isys                 ! From Marker
joint.to (                          $J_Carbody                    ) = $M_Carbody              ! To Marker
joint.type (                        $J_Carbody                    ) = 7                       ! Type
joint.st.pos (            1 ,       $J_Carbody                    ) = 1.0000000000000000E+01  ! Position
joint.st.pos (            2 ,       $J_Carbody                    ) = 0.0000000000000000E+00  ! Position
joint.st.pos (            3 ,       $J_Carbody                    ) = 0.0000000000000000E+00  ! Position
joint.st.pos (            4 ,       $J_Carbody                    ) = 0.0000000000000000E+00  ! Position
joint.st.pos (            5 ,       $J_Carbody                    ) = 0.0000000000000000E+00  ! Position
joint.st.pos (            6 ,       $J_Carbody                    ) = 0.0000000000000000E+00  ! Position
joint.st.vel (            1 ,       $J_Carbody                    ) = 1.3888888888888889E+01  ! Velocity
joint.st.vel (            2 ,       $J_Carbody                    ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            3 ,       $J_Carbody                    ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            4 ,       $J_Carbody                    ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            5 ,       $J_Carbody                    ) = 0.0000000000000000E+00  ! Velocity
joint.st.vel (            6 ,       $J_Carbody                    ) = 0.0000000000000000E+00  ! Velocity
joint.st.dep (            1 ,       $J_Carbody                    ) = 0                       ! Dependency state
joint.st.dep (            2 ,       $J_Carbody                    ) = 0                       ! Dependency state
joint.st.dep (            3 ,       $J_Carbody                    ) = 0                       ! Dependency state
joint.st.dep (            4 ,       $J_Carbody                    ) = 0                       ! Dependency state
joint.st.dep (            5 ,       $J_Carbody                    ) = 0                       ! Dependency state
joint.st.dep (            6 ,       $J_Carbody                    ) = 0                       ! Dependency state
joint.par (               3 ,       $J_Carbody                    ) = 0.0000000000000000E+00  ! [-] Degrees of freedom
joint.attr.2d.pos.x (     1 ,       $J_Carbody                    ) = -830
joint.attr.2d.pos.y (     1 ,       $J_Carbody                    ) = -20
joint.attr.2d.ori (       1 ,       $J_Carbody                    ) = 180
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_Carbody         ) = -260, -783, -783, -783, -793, -803, -813
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_Carbody         ) = 0, 0, -10, -20, -20, -20, -20
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_Carbody           ) = -110, -1031.25, -1031.25, -1031.25, -847
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_Carbody           ) = 0, 0, -10, -20, -20

prim.type (                         $P_Carbody_Cuboid             ) = 21                      ! Type
prim.ref (                          $P_Carbody_Cuboid             ) = $M_Carbody              ! Reference Marker
prim.ang (                1 ,       $P_Carbody_Cuboid             ) = { 180 deg }             ! Angles
prim.ang (                2 ,       $P_Carbody_Cuboid             ) = { 0 deg }               ! Angles
prim.ang (                3 ,       $P_Carbody_Cuboid             ) = { 0 deg }               ! Angles
prim.color.r (            1 ,       $P_Carbody_Cuboid             ) = 0.0000000000000000E+00  ! Colors (red component)
prim.color.r (            2 ,       $P_Carbody_Cuboid             ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.r (            3 ,       $P_Carbody_Cuboid             ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.r (            4 ,       $P_Carbody_Cuboid             ) = 6.4000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_Carbody_Cuboid             ) = 4.6000000000000000E+01  ! Colors (green component)
prim.color.g (            2 ,       $P_Carbody_Cuboid             ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.g (            3 ,       $P_Carbody_Cuboid             ) = 2.5500000000000000E+02  ! Colors (green component)
prim.color.g (            4 ,       $P_Carbody_Cuboid             ) = 1.3000000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_Carbody_Cuboid             ) = 9.2000000000000000E+01  ! Colors (blue component)
prim.color.b (            2 ,       $P_Carbody_Cuboid             ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.b (            3 ,       $P_Carbody_Cuboid             ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            4 ,       $P_Carbody_Cuboid             ) = 1.1700000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_Carbody_Cuboid             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_Carbody_Cuboid             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            3 ,       $P_Carbody_Cuboid             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            4 ,       $P_Carbody_Cuboid             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.drawstyle (                    $P_Carbody_Cuboid             ) = 2                       ! Draw style
prim.par (                4 ,       $P_Carbody_Cuboid             ) = 1.0000000000000000E+00  ! [-] Hide buffers
prim.par (                5 ,       $P_Carbody_Cuboid             ) = 1.0000000000000000E+00  ! [-] Hide pantograph
prim.par (                6 ,       $P_Carbody_Cuboid             ) = 1.0000000000000000E+00  ! [-] Show middle window
prim.par (                7 ,       $P_Carbody_Cuboid             ) = 5.0000000000000000E-01  ! [m] Height 1 in X
prim.par (                8 ,       $P_Carbody_Cuboid             ) = 3.0000001191999998E-01  ! [m] Height 2 in X
prim.par (                9 ,       $P_Carbody_Cuboid             ) = 1.2000000476999999E+00  ! [m] Height 3 in X
prim.par (               10 ,       $P_Carbody_Cuboid             ) = 1.2999999523000001E+00  ! [m] Height 4 in X
prim.par (               11 ,       $P_Carbody_Cuboid             ) = 2.0000000000000000E+00  ! [m] Height 5 in X
prim.par (               12 ,       $P_Carbody_Cuboid             ) = 3.1600000858000001E+00  ! [m] Height 6 in X
prim.par (               13 ,       $P_Carbody_Cuboid             ) = 4.0500001906999996E+00  ! [m] Height 7 in X
prim.par (               14 ,       $P_Carbody_Cuboid             ) = 2.5000000000000000E+01  ! [m] Length 1 in X
prim.par (               17 ,       $P_Carbody_Cuboid             ) = 2.2000000477000001E+00  ! [m] Length 4 in X
prim.par (               18 ,       $P_Carbody_Cuboid             ) = 2.0000000000000000E+00  ! [m] Length 5 in X
prim.par (               19 ,       $P_Carbody_Cuboid             ) = 5.0000000000000000E-01  ! [m] Length 6 in X
prim.par (               20 ,       $P_Carbody_Cuboid             ) = 1.0000000000000000E+00  ! [m] Length 7 in X
prim.par (               21 ,       $P_Carbody_Cuboid             ) = 2.7999999522999999E+00  ! [m] Width 1 in X
prim.par (               22 ,       $P_Carbody_Cuboid             ) = 3.0000000000000000E+00  ! [m] Width 2 in X
prim.par (               23 ,       $P_Carbody_Cuboid             ) = 3.0000000000000000E+00  ! [m] Width 3 in X
prim.par (               24 ,       $P_Carbody_Cuboid             ) = 2.7999999522999999E+00  ! [m] Width 4 in X
prim.par (               25 ,       $P_Carbody_Cuboid             ) = 1.7999999523000001E+00  ! [m] Width 5 in X
prim.par (               26 ,       $P_Carbody_Cuboid             ) = 1.4500000476999999E+00  ! [m] Width 6 in X
prim.par (               27 ,       $P_Carbody_Cuboid             ) = 3.0000001191999998E-01  ! [m] Width 7 in X
prim.par (               28 ,       $P_Carbody_Cuboid             ) = 2.5000000000000000E+01  ! [m] Layer Length L8 in X
prim.par (               29 ,       $P_Carbody_Cuboid             ) = 1.7500000000000000E+01  ! [m] Layer Length L9 in X
prim.par (               30 ,       $P_Carbody_Cuboid             ) = 4.5000000000000000E+00  ! [m] Layer Length L10 in X
prim.par (               32 ,       $P_Carbody_Cuboid             ) = 3.6000001431000000E-01  ! [m] Window distance rear
prim.par (               33 ,       $P_Carbody_Cuboid             ) = 4.0000000596000002E-01  ! [m] Window distance front
prim.par (               34 ,       $P_Carbody_Cuboid             ) = 4.0000000596000002E-01  ! [m] Window distance bottom
prim.par (               35 ,       $P_Carbody_Cuboid             ) = 1.4000000060000001E-01  ! [m] Window distance top

prim.type (                         $P_SS_AirSpring_1l__3d_       ) = 13                      ! Type
prim.ref (                          $P_SS_AirSpring_1l__3d_       ) = $M_Carbody_Airspring_1l ! Reference Marker
prim.ang (                1 ,       $P_SS_AirSpring_1l__3d_       ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_SS_AirSpring_1l__3d_       ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_SS_AirSpring_1l__3d_       ) = { 0 deg }               ! Angles
prim.color.r (            1 ,       $P_SS_AirSpring_1l__3d_       ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_SS_AirSpring_1l__3d_       ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_SS_AirSpring_1l__3d_       ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_SS_AirSpring_1l__3d_       ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_SS_AirSpring_1l__3d_       ) = 3.0000001191999998E-01  ! [m] Length
prim.par (                3 ,       $P_SS_AirSpring_1l__3d_       ) = 2.5999999046000000E-01  ! [m] Diameter
prim.par (                4 ,       $P_SS_AirSpring_1l__3d_       ) = 1.0000000000000000E+01  ! [-] Number of windings

prim.type (                         $P_SS_AirSpring_1r__3d_       ) = 13                      ! Type
prim.ref (                          $P_SS_AirSpring_1r__3d_       ) = $M_Carbody_Airspring_1r ! Reference Marker
prim.ang (                1 ,       $P_SS_AirSpring_1r__3d_       ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_SS_AirSpring_1r__3d_       ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_SS_AirSpring_1r__3d_       ) = { 0 deg }               ! Angles
prim.color.r (            1 ,       $P_SS_AirSpring_1r__3d_       ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_SS_AirSpring_1r__3d_       ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_SS_AirSpring_1r__3d_       ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_SS_AirSpring_1r__3d_       ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_SS_AirSpring_1r__3d_       ) = 3.0000001191999998E-01  ! [m] Length
prim.par (                3 ,       $P_SS_AirSpring_1r__3d_       ) = 2.5999999046000000E-01  ! [m] Diameter
prim.par (                4 ,       $P_SS_AirSpring_1r__3d_       ) = 1.0000000000000000E+01  ! [-] Number of windings

prim.type (                         $P_SS_AirSpring_2l__3d_       ) = 13                      ! Type
prim.ref (                          $P_SS_AirSpring_2l__3d_       ) = $M_Carbody_Airspring_2l ! Reference Marker
prim.ang (                1 ,       $P_SS_AirSpring_2l__3d_       ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_SS_AirSpring_2l__3d_       ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_SS_AirSpring_2l__3d_       ) = { 0 deg }               ! Angles
prim.color.r (            1 ,       $P_SS_AirSpring_2l__3d_       ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_SS_AirSpring_2l__3d_       ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_SS_AirSpring_2l__3d_       ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_SS_AirSpring_2l__3d_       ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_SS_AirSpring_2l__3d_       ) = 3.0000001191999998E-01  ! [m] Length
prim.par (                3 ,       $P_SS_AirSpring_2l__3d_       ) = 2.5999999046000000E-01  ! [m] Diameter
prim.par (                4 ,       $P_SS_AirSpring_2l__3d_       ) = 1.0000000000000000E+01  ! [-] Number of windings

prim.type (                         $P_SS_AirSpring_2r__3d_       ) = 13                      ! Type
prim.ref (                          $P_SS_AirSpring_2r__3d_       ) = $M_Carbody_Airspring_2r ! Reference Marker
prim.ang (                1 ,       $P_SS_AirSpring_2r__3d_       ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_SS_AirSpring_2r__3d_       ) = { -90 deg }             ! Angles
prim.ang (                3 ,       $P_SS_AirSpring_2r__3d_       ) = { 0 deg }               ! Angles
prim.color.r (            1 ,       $P_SS_AirSpring_2r__3d_       ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_SS_AirSpring_2r__3d_       ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_SS_AirSpring_2r__3d_       ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_SS_AirSpring_2r__3d_       ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_SS_AirSpring_2r__3d_       ) = 3.0000001191999998E-01  ! [m] Length
prim.par (                3 ,       $P_SS_AirSpring_2r__3d_       ) = 2.5999999046000000E-01  ! [m] Diameter
prim.par (                4 ,       $P_SS_AirSpring_2r__3d_       ) = 1.0000000000000000E+01  ! [-] Number of windings

prim.type (                         $P_QY_2__3d_                  ) = 2                       ! Type
prim.ref (                          $P_QY_2__3d_                  ) = $M_Carbody_QY_2         ! Reference Marker
prim.pos (                3 ,       $P_QY_2__3d_                  ) = -2.0000000298000001E-01 ! Position
prim.ang (                1 ,       $P_QY_2__3d_                  ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_QY_2__3d_                  ) = { 0 deg }               ! Angles
prim.ang (                3 ,       $P_QY_2__3d_                  ) = { 90 deg }              ! Angles
prim.vtx (                1 ,   2 , $P_QY_2__3d_                  ) = 1.0000000000000000E+00  ! Vertices
prim.vtx (                2 ,   1 , $P_QY_2__3d_                  ) = 5.0000000745000002E-02  ! Vertices
prim.vtx (                2 ,   2 , $P_QY_2__3d_                  ) = 5.0000000745000002E-02  ! Vertices
prim.vtx (                3 ,   2 , $P_QY_2__3d_                  ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_QY_2__3d_                  ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.r (            2 ,       $P_QY_2__3d_                  ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_QY_2__3d_                  ) = 1.5800000000000000E+02  ! Colors (green component)
prim.color.g (            2 ,       $P_QY_2__3d_                  ) = 1.5800000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_QY_2__3d_                  ) = 2.3000000000000000E+01  ! Colors (blue component)
prim.color.b (            2 ,       $P_QY_2__3d_                  ) = 2.3000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_QY_2__3d_                  ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_QY_2__3d_                  ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_QY_2__3d_                  ) = 5.5000001192000003E-01  ! [m] Height
prim.par (                3 ,       $P_QY_2__3d_                  ) = 1.0000000149000000E-01  ! [m] Outer diameter
prim.par (                5 ,       $P_QY_2__3d_                  ) = 1.6000000000000000E+01  ! [-] Number of planes
prim.par (                7 ,       $P_QY_2__3d_                  ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (                8 ,       $P_QY_2__3d_                  ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_QY_1__3d_                  ) = 2                       ! Type
prim.ref (                          $P_QY_1__3d_                  ) = $M_Carbody_QY_1         ! Reference Marker
prim.pos (                3 ,       $P_QY_1__3d_                  ) = -2.0000000298000001E-01 ! Position
prim.ang (                1 ,       $P_QY_1__3d_                  ) = { 0 deg }               ! Angles
prim.ang (                2 ,       $P_QY_1__3d_                  ) = { 0 deg }               ! Angles
prim.ang (                3 ,       $P_QY_1__3d_                  ) = { 90 deg }              ! Angles
prim.vtx (                1 ,   2 , $P_QY_1__3d_                  ) = 1.0000000000000000E+00  ! Vertices
prim.vtx (                2 ,   1 , $P_QY_1__3d_                  ) = 5.0000000745000002E-02  ! Vertices
prim.vtx (                2 ,   2 , $P_QY_1__3d_                  ) = 5.0000000745000002E-02  ! Vertices
prim.vtx (                3 ,   2 , $P_QY_1__3d_                  ) = 0.0000000000000000E+00  ! Vertices
prim.color.r (            1 ,       $P_QY_1__3d_                  ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.r (            2 ,       $P_QY_1__3d_                  ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_QY_1__3d_                  ) = 1.5800000000000000E+02  ! Colors (green component)
prim.color.g (            2 ,       $P_QY_1__3d_                  ) = 1.5800000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_QY_1__3d_                  ) = 2.3000000000000000E+01  ! Colors (blue component)
prim.color.b (            2 ,       $P_QY_1__3d_                  ) = 2.3000000000000000E+01  ! Colors (blue component)
prim.color.t (            1 ,       $P_QY_1__3d_                  ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_QY_1__3d_                  ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_QY_1__3d_                  ) = 5.5000001192000003E-01  ! [m] Height
prim.par (                3 ,       $P_QY_1__3d_                  ) = 1.0000000149000000E-01  ! [m] Outer diameter
prim.par (                5 ,       $P_QY_1__3d_                  ) = 1.6000000000000000E+01  ! [-] Number of planes
prim.par (                7 ,       $P_QY_1__3d_                  ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (                8 ,       $P_QY_1__3d_                  ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_NG_2__3d_                  ) = 2                       ! Type
prim.ref (                          $P_NG_2__3d_                  ) = $M_Carbody_NiuGan_2     ! Reference Marker
prim.color.r (            1 ,       $P_NG_2__3d_                  ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.r (            2 ,       $P_NG_2__3d_                  ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_NG_2__3d_                  ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_NG_2__3d_                  ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_NG_2__3d_                  ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_NG_2__3d_                  ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_NG_2__3d_                  ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_NG_2__3d_                  ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_NG_2__3d_                  ) = 2.2000000477000001E+00  ! [m] Height
prim.par (                3 ,       $P_NG_2__3d_                  ) = 5.0000000745000002E-02  ! [m] Outer diameter
prim.par (                5 ,       $P_NG_2__3d_                  ) = 8.0000000000000000E+00  ! [-] Number of planes
prim.par (                7 ,       $P_NG_2__3d_                  ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (                8 ,       $P_NG_2__3d_                  ) = 1.0000000000000000E+00  ! [-] Show top cap

prim.type (                         $P_NG_1__3d_                  ) = 2                       ! Type
prim.ref (                          $P_NG_1__3d_                  ) = $M_Carbody_NiuGan_1     ! Reference Marker
prim.color.r (            1 ,       $P_NG_1__3d_                  ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.r (            2 ,       $P_NG_1__3d_                  ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_NG_1__3d_                  ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.g (            2 ,       $P_NG_1__3d_                  ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_NG_1__3d_                  ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_NG_1__3d_                  ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_NG_1__3d_                  ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_NG_1__3d_                  ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                2 ,       $P_NG_1__3d_                  ) = 2.2000000477000001E+00  ! [m] Height
prim.par (                3 ,       $P_NG_1__3d_                  ) = 5.0000000745000002E-02  ! [m] Outer diameter
prim.par (                5 ,       $P_NG_1__3d_                  ) = 8.0000000000000000E+00  ! [-] Number of planes
prim.par (                7 ,       $P_NG_1__3d_                  ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (                8 ,       $P_NG_1__3d_                  ) = 1.0000000000000000E+00  ! [-] Show top cap


!**********************************************************************
! Force Elements
!**********************************************************************
force.type (                        $F_PS_Spring_4l               ) = 5                       ! Type
force.from (                        $F_PS_Spring_4l               ) = $M_Bogie2_PS_4l_spring  ! From Marker
force.to (                          $F_PS_Spring_4l               ) = $M_box4l_spring         ! To Marker
force.st.intern (                   $F_PS_Spring_4l               ) = ''                      ! Internal state
force.preld.calc (        1 ,       $F_PS_Spring_4l               ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_PS_Spring_4l               ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_PS_Spring_4l               ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_PS_Spring_4l               ) = 9.7100171085519505E+03  ! [N] Nominal force in x
force.par (               2 ,       $F_PS_Spring_4l               ) = -1.8103050603162123E-08 ! [N] Nominal force in y
force.par (               3 ,       $F_PS_Spring_4l               ) = -4.1974565592337211E+04 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_Spring_4l               ) = $_PS_Spring_Stiffness_X ! [N/m] Stiffness in x
force.par (               5 ,       $F_PS_Spring_4l               ) = $_PS_Spring_stiffness_Y ! [N/m] Stiffness in y
force.par (               6 ,       $F_PS_Spring_4l               ) = $_PS_Spring_stiffness_Z ! [N/m] Stiffness in z
force.attr.2d.pos.x (     1 ,       $F_PS_Spring_4l               ) = -1170
force.attr.2d.pos.y (     1 ,       $F_PS_Spring_4l               ) = -80
force.attr.2d.ori (       1 ,       $F_PS_Spring_4l               ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Spring_4l    ) = -2190, -2190, -1487.75, -1487.75, -1477.75, -1467.75, -1457.75, -1447.75, -1437.75, -1187
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Spring_4l    ) = -20, -30, -30, -80, -80, -80, -80, -80, -80, -80
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Spring_4l      ) = -680, -724.0133628845215, -724.0133628845215, -735.3511505126953, -750.4682006835938, -770.624267578125, -797.4990234375, -833.33203125, -881.109375, -944.8125, -1029.75, -1143, -1143, -1143, -1153
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Spring_4l      ) = -70, -70, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -90, -80, -80

force.type (                        $F_PS_Spring_4r               ) = 5                       ! Type
force.from (                        $F_PS_Spring_4r               ) = $M_Bogie2_PS_4r_spring  ! From Marker
force.to (                          $F_PS_Spring_4r               ) = $M_box4r_spring         ! To Marker
force.st.intern (                   $F_PS_Spring_4r               ) = ''                      ! Internal state
force.preld.calc (        1 ,       $F_PS_Spring_4r               ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_PS_Spring_4r               ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_PS_Spring_4r               ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_PS_Spring_4r               ) = 9.7100171086053433E+03  ! [N] Nominal force in x
force.par (               2 ,       $F_PS_Spring_4r               ) = -1.7712759521918717E-08 ! [N] Nominal force in y
force.par (               3 ,       $F_PS_Spring_4r               ) = -4.1974565592182138E+04 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_Spring_4r               ) = $_PS_Spring_Stiffness_X ! [N/m] Stiffness in x
force.par (               5 ,       $F_PS_Spring_4r               ) = $_PS_Spring_stiffness_Y ! [N/m] Stiffness in y
force.par (               6 ,       $F_PS_Spring_4r               ) = $_PS_Spring_stiffness_Z ! [N/m] Stiffness in z
force.attr.2d.pos.x (     1 ,       $F_PS_Spring_4r               ) = -1070
force.attr.2d.pos.y (     1 ,       $F_PS_Spring_4r               ) = 40
force.attr.2d.ori (       1 ,       $F_PS_Spring_4r               ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Spring_4r    ) = -2180, -2170, -2170, -1087
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Spring_4r    ) = 0, 0, 40, 40
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Spring_4r      ) = -430, -473.957049369812, -473.957049369812, -485.276065826416, -500.3680877685547, -520.4907836914063, -547.321044921875, -583.0947265625, -630.79296875, -694.390625, -779.1875, -892.25, -1043, -1043, -1043, -1043, -1053
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Spring_4r      ) = 30, 30, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 30, 40, 40

force.type (                        $F_PS_Spring_3l               ) = 5                       ! Type
force.from (                        $F_PS_Spring_3l               ) = $M_Bogie2_PS_3l_Spring  ! From Marker
force.to (                          $F_PS_Spring_3l               ) = $M_box3l_spring         ! To Marker
force.st.intern (                   $F_PS_Spring_3l               ) = ''                      ! Internal state
force.preld.calc (        1 ,       $F_PS_Spring_3l               ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_PS_Spring_3l               ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_PS_Spring_3l               ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_PS_Spring_3l               ) = -9.7100171085174552E+03 ! [N] Nominal force in x
force.par (               2 ,       $F_PS_Spring_3l               ) = 3.7274604769508004E-09  ! [N] Nominal force in y
force.par (               3 ,       $F_PS_Spring_3l               ) = -4.1974565592322178E+04 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_Spring_3l               ) = $_PS_Spring_Stiffness_X ! [N/m] Stiffness in x
force.par (               5 ,       $F_PS_Spring_3l               ) = $_PS_Spring_stiffness_Y ! [N/m] Stiffness in y
force.par (               6 ,       $F_PS_Spring_3l               ) = $_PS_Spring_stiffness_Z ! [N/m] Stiffness in z
force.attr.2d.pos.x (     1 ,       $F_PS_Spring_3l               ) = -1100
force.attr.2d.pos.y (     1 ,       $F_PS_Spring_3l               ) = -80
force.attr.2d.ori (       1 ,       $F_PS_Spring_3l               ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Spring_3l    ) = -2200, -2200, -1147, -1147, -1137, -1127, -1117
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Spring_3l    ) = -20, -30, -30, -80, -80, -80, -80
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Spring_3l      ) = -520, -570.7709846496582, -570.7709846496582, -584.3613128662109, -602.4817504882813, -626.642333984375, -658.8564453125, -701.80859375, -759.078125, -835.4375, -937.25, -1073, -1073, -1073, -1083
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Spring_3l      ) = -70, -70, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -90, -80, -80

force.type (                        $F_PS_Spring_3r               ) = 5                       ! Type
force.from (                        $F_PS_Spring_3r               ) = $M_Bogie2_PS_3r_Spring  ! From Marker
force.to (                          $F_PS_Spring_3r               ) = $M_box3r_spring         ! To Marker
force.st.intern (                   $F_PS_Spring_3r               ) = ''                      ! Internal state
force.preld.calc (        1 ,       $F_PS_Spring_3r               ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_PS_Spring_3r               ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_PS_Spring_3r               ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_PS_Spring_3r               ) = -9.7100171085313068E+03 ! [N] Nominal force in x
force.par (               2 ,       $F_PS_Spring_3r               ) = 2.7948391803224614E-09  ! [N] Nominal force in y
force.par (               3 ,       $F_PS_Spring_3r               ) = -4.1974565592253821E+04 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_Spring_3r               ) = $_PS_Spring_Stiffness_X ! [N/m] Stiffness in x
force.par (               5 ,       $F_PS_Spring_3r               ) = $_PS_Spring_stiffness_Y ! [N/m] Stiffness in y
force.par (               6 ,       $F_PS_Spring_3r               ) = $_PS_Spring_stiffness_Z ! [N/m] Stiffness in z
force.attr.2d.pos.x (     1 ,       $F_PS_Spring_3r               ) = -1000
force.attr.2d.pos.y (     1 ,       $F_PS_Spring_3r               ) = 40
force.attr.2d.ori (       1 ,       $F_PS_Spring_3r               ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Spring_3r    ) = -2180, -1047, -1047, -1037, -1027, -1017
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Spring_3r    ) = -10, -10, 40, 40, 40, 40
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Spring_3r      ) = -320, -366.2095899581909, -366.2095899581909, -378.2794532775879, -394.3726043701172, -415.8301391601563, -444.440185546875, -482.5869140625, -533.44921875, -601.265625, -691.6875, -812.25, -973, -973, -973, -973, -983
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Spring_3r      ) = 30, 30, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 30, 40, 40

force.type (                        $F_PS_Damping_4l              ) = 6                       ! Type
force.from (                        $F_PS_Damping_4l              ) = $M_Bogie2_PS_4l_damping ! From Marker
force.to (                          $F_PS_Damping_4l              ) = $M_box4l_damping        ! To Marker
force.st.dyn (            1 ,       $F_PS_Damping_4l              ) = 0.0000000000000000E+00  ! Dynamic states
force.st.intern (                   $F_PS_Damping_4l              ) = ''                      ! Internal state
force.par (               1 ,       $F_PS_Damping_4l              ) = 3.6999998108999999E-01  ! [m] Nominal length
force.par (               2 ,       $F_PS_Damping_4l              ) = 4.9000000000000000E+06  ! [N/m] Stiffness
force.par (               5 ,       $F_PS_Damping_4l              ) = $I_PS_Damping           ! [-] Input Function F_d(ld)
force.attr.2d.pos.x (     1 ,       $F_PS_Damping_4l              ) = -900
force.attr.2d.pos.y (     1 ,       $F_PS_Damping_4l              ) = -70
force.attr.2d.ori (       1 ,       $F_PS_Damping_4l              ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Damping_4l   ) = -2210, -2210, -947, -947, -937, -927, -917
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Damping_4l   ) = -20, -30, -30, -70, -70, -70, -70
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Damping_4l     ) = -670, -670, -829.75, -829.75, -829.75, -883
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Damping_4l     ) = -90, -95, -95, -80, -70, -70

force.type (                        $F_PS_Damping_4r              ) = 6                       ! Type
force.from (                        $F_PS_Damping_4r              ) = $M_Bogie2_PS_4r_damping ! From Marker
force.to (                          $F_PS_Damping_4r              ) = $M_box4r_damping        ! To Marker
force.st.dyn (            1 ,       $F_PS_Damping_4r              ) = 0.0000000000000000E+00  ! Dynamic states
force.st.intern (                   $F_PS_Damping_4r              ) = ''                      ! Internal state
force.par (               1 ,       $F_PS_Damping_4r              ) = 3.6999998108999999E-01  ! [m] Nominal length
force.par (               2 ,       $F_PS_Damping_4r              ) = 4.9000000000000000E+06  ! [N/m] Stiffness
force.par (               5 ,       $F_PS_Damping_4r              ) = $I_PS_Damping           ! [-] Input Function F_d(ld)
force.attr.2d.pos.x (     1 ,       $F_PS_Damping_4r              ) = -800
force.attr.2d.pos.y (     1 ,       $F_PS_Damping_4r              ) = 30
force.attr.2d.ori (       1 ,       $F_PS_Damping_4r              ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Damping_4r   ) = -2190, -2190, -2122.341796875, -2122.341796875, -2054.68359375, -2009.578125, -1949.4375, -1869.25, -1548.5, -907, -907, -897, -887, -877, -867, -857, -847, -837, -837, -827, -817
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Damping_4r   ) = 10, 20, 20, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20, 20, 30, 30, 30
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Damping_4r     ) = -430, -473.3376007080078, -473.3376007080078, -484.4501342773438, -499.266845703125, -519.0224609375, -545.36328125, -580.484375, -627.3125, -689.75, -773, -773, -773, -783
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Damping_4r     ) = 40, 40, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 30, 30

force.type (                        $F_PS_Damping_3l              ) = 6                       ! Type
force.from (                        $F_PS_Damping_3l              ) = $M_Bogie2_PS_3l_damping ! From Marker
force.to (                          $F_PS_Damping_3l              ) = $M_box3l_damping        ! To Marker
force.st.dyn (            1 ,       $F_PS_Damping_3l              ) = 0.0000000000000000E+00  ! Dynamic states
force.st.intern (                   $F_PS_Damping_3l              ) = ''                      ! Internal state
force.par (               1 ,       $F_PS_Damping_3l              ) = 3.6999998108999999E-01  ! [m] Nominal length
force.par (               2 ,       $F_PS_Damping_3l              ) = 4.9000000000000000E+06  ! [N/m] Stiffness
force.par (               5 ,       $F_PS_Damping_3l              ) = $I_PS_Damping           ! [-] Input Function F_d(ld)
force.attr.2d.pos.x (     1 ,       $F_PS_Damping_3l              ) = -800
force.attr.2d.pos.y (     1 ,       $F_PS_Damping_3l              ) = -70
force.attr.2d.ori (       1 ,       $F_PS_Damping_3l              ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Damping_3l   ) = -2220, -2220, -877, -877, -867, -857, -847, -837, -827, -817
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Damping_3l   ) = -20, -30, -30, -70, -70, -70, -70, -70, -70, -70
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Damping_3l     ) = -510, -510, -694.75, -694.75, -704.75, -714.75, -783
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Damping_3l     ) = -60, -55, -55, -70, -70, -70, -70

force.type (                        $F_PS_Damping_3r              ) = 6                       ! Type
force.from (                        $F_PS_Damping_3r              ) = $M_Bogie2_PS_3r_damping ! From Marker
force.to (                          $F_PS_Damping_3r              ) = $M_box3r_damping        ! To Marker
force.st.dyn (            1 ,       $F_PS_Damping_3r              ) = 0.0000000000000000E+00  ! Dynamic states
force.st.intern (                   $F_PS_Damping_3r              ) = ''                      ! Internal state
force.par (               1 ,       $F_PS_Damping_3r              ) = 3.6999998108999999E-01  ! [m] Nominal length
force.par (               2 ,       $F_PS_Damping_3r              ) = 4.9000000000000000E+06  ! [N/m] Stiffness
force.par (               5 ,       $F_PS_Damping_3r              ) = $I_PS_Damping           ! [-] Input Function F_d(ld)
force.attr.2d.pos.x (     1 ,       $F_PS_Damping_3r              ) = -690
force.attr.2d.pos.y (     1 ,       $F_PS_Damping_3r              ) = 30
force.attr.2d.ori (       1 ,       $F_PS_Damping_3r              ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Damping_3r   ) = -2200, -2200, -2105.026214599609, -2105.026214599609, -2073.368286132813, -2031.15771484375, -1974.876953125, -1899.8359375, -1799.78125, -1666.375, -1488.5, -777, -777, -777, -767, -757, -747, -737, -727, -717, -707
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Damping_3r   ) = 10, 20, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 30, 30, 30, 30, 30, 30, 30, 30
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Damping_3r     ) = -320, -364.3387298583984, -364.3387298583984, -375.7849731445313, -391.046630859375, -411.3955078125, -438.52734375, -474.703125, -522.9375, -587.25, -587.25, -587.25, -673
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Damping_3r     ) = 40, 40, 10, 10, 10, 10, 10, 10, 10, 10, 20, 30, 30

force.type (                        $F_PS_Joint_4l                ) = 5                       ! Type
force.from (                        $F_PS_Joint_4l                ) = $M_Bogie2_PS_4l_Joint   ! From Marker
force.to (                          $F_PS_Joint_4l                ) = $M_box4l_joint          ! To Marker
force.st.intern (                   $F_PS_Joint_4l                ) = ''                      ! Internal state
force.preld.calc (        1 ,       $F_PS_Joint_4l                ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_PS_Joint_4l                ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_PS_Joint_4l                ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_PS_Joint_4l                ) = -9.7100171085616785E+03 ! [N] Nominal force in x
force.par (               2 ,       $F_PS_Joint_4l                ) = 1.9790764240477917E-08  ! [N] Nominal force in y
force.par (               3 ,       $F_PS_Joint_4l                ) = -5.0224122346254508E+03 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_Joint_4l                ) = $_PS_Joing_Stiffness_X  ! [N/m] Stiffness in x
force.par (               5 ,       $F_PS_Joint_4l                ) = $_PS_Joint_stiffness_Y  ! [N/m] Stiffness in y
force.par (               6 ,       $F_PS_Joint_4l                ) = $_PS_Joint_Stiffness_Z  ! [N/m] Stiffness in z
force.attr.2d.pos.x (     1 ,       $F_PS_Joint_4l                ) = -1030
force.attr.2d.pos.y (     1 ,       $F_PS_Joint_4l                ) = -70
force.attr.2d.ori (       1 ,       $F_PS_Joint_4l                ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Joint_4l     ) = -2210, -2210, -1077, -1077, -1077, -1067, -1057, -1047
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Joint_4l     ) = 10, 20, 20, -10, -70, -70, -70, -70
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Joint_4l       ) = -670, -670, -1003, -1003, -1003, -1013
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Joint_4l       ) = -60, -50, -50, -60, -70, -70

force.type (                        $F_PS_Joint_4r                ) = 5                       ! Type
force.from (                        $F_PS_Joint_4r                ) = $M_Bogie2_PS_4r_Joint   ! From Marker
force.to (                          $F_PS_Joint_4r                ) = $M_box4r_joint          ! To Marker
force.st.intern (                   $F_PS_Joint_4r                ) = ''                      ! Internal state
force.preld.calc (        1 ,       $F_PS_Joint_4r                ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_PS_Joint_4r                ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_PS_Joint_4r                ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_PS_Joint_4r                ) = -9.7100171085956135E+03 ! [N] Nominal force in x
force.par (               2 ,       $F_PS_Joint_4r                ) = 1.9684340730218510E-08  ! [N] Nominal force in y
force.par (               3 ,       $F_PS_Joint_4r                ) = -5.0224122345319365E+03 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_Joint_4r                ) = $_PS_Joing_Stiffness_X  ! [N/m] Stiffness in x
force.par (               5 ,       $F_PS_Joint_4r                ) = $_PS_Joint_stiffness_Y  ! [N/m] Stiffness in y
force.par (               6 ,       $F_PS_Joint_4r                ) = $_PS_Joint_Stiffness_Z  ! [N/m] Stiffness in z
force.attr.2d.pos.x (     1 ,       $F_PS_Joint_4r                ) = -930
force.attr.2d.pos.y (     1 ,       $F_PS_Joint_4r                ) = 30
force.attr.2d.ori (       1 ,       $F_PS_Joint_4r                ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Joint_4r     ) = -2220, -2220, -977, -977, -967, -957, -947
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Joint_4r     ) = 10, 20, 20, 30, 30, 30, 30
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Joint_4r       ) = -410, -410, -903, -903, -903, -903, -913
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Joint_4r       ) = 50, 60, 60, 50, 40, 30, 30

force.type (                        $F_PS_Joint_3l                ) = 5                       ! Type
force.from (                        $F_PS_Joint_3l                ) = $M_Bogie2_PS_3l_Joint   ! From Marker
force.to (                          $F_PS_Joint_3l                ) = $M_box3l_joint          ! To Marker
force.st.intern (                   $F_PS_Joint_3l                ) = ''                      ! Internal state
force.preld.calc (        1 ,       $F_PS_Joint_3l                ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_PS_Joint_3l                ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_PS_Joint_3l                ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_PS_Joint_3l                ) = 9.7100171085166003E+03  ! [N] Nominal force in x
force.par (               2 ,       $F_PS_Joint_3l                ) = -1.4932276434914467E-09 ! [N] Nominal force in y
force.par (               3 ,       $F_PS_Joint_3l                ) = -5.0224122346121203E+03 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_Joint_3l                ) = $_PS_Joing_Stiffness_X  ! [N/m] Stiffness in x
force.par (               5 ,       $F_PS_Joint_3l                ) = $_PS_Joint_stiffness_Y  ! [N/m] Stiffness in y
force.par (               6 ,       $F_PS_Joint_3l                ) = $_PS_Joint_Stiffness_Z  ! [N/m] Stiffness in z
force.attr.2d.pos.x (     1 ,       $F_PS_Joint_3l                ) = -970
force.attr.2d.pos.y (     1 ,       $F_PS_Joint_3l                ) = -80
force.attr.2d.ori (       1 ,       $F_PS_Joint_3l                ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Joint_3l     ) = -2230, -2235.18359375, -2235.18359375, -2220.734375, -2162.9375, -2162.9375, -2162.9375, -1931.75, -1007, -1007, -997, -987
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Joint_3l     ) = -10, -10, -30, -30, -30, -20, -10, -10, -10, -80, -80, -80
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Joint_3l       ) = -510, -510, -923, -923, -933, -943, -953
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Joint_3l       ) = -90, -95, -95, -80, -80, -80, -80

force.type (                        $F_PS_Joint_3r                ) = 5                       ! Type
force.from (                        $F_PS_Joint_3r                ) = $M_Bogie2_PS_3r_Joint   ! From Marker
force.to (                          $F_PS_Joint_3r                ) = $M_box3r_joint          ! To Marker
force.st.intern (                   $F_PS_Joint_3r                ) = ''                      ! Internal state
force.preld.calc (        1 ,       $F_PS_Joint_3r                ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_PS_Joint_3r                ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_PS_Joint_3r                ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_PS_Joint_3r                ) = 9.7100171085321617E+03  ! [N] Nominal force in x
force.par (               2 ,       $F_PS_Joint_3r                ) = -1.3697773032918773E-09 ! [N] Nominal force in y
force.par (               3 ,       $F_PS_Joint_3r                ) = -5.0224122344882271E+03 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_Joint_3r                ) = $_PS_Joing_Stiffness_X  ! [N/m] Stiffness in x
force.par (               5 ,       $F_PS_Joint_3r                ) = $_PS_Joint_stiffness_Y  ! [N/m] Stiffness in y
force.par (               6 ,       $F_PS_Joint_3r                ) = $_PS_Joint_Stiffness_Z  ! [N/m] Stiffness in z
force.attr.2d.pos.x (     1 ,       $F_PS_Joint_3r                ) = -860
force.attr.2d.pos.y (     1 ,       $F_PS_Joint_3r                ) = 40
force.attr.2d.ori (       1 ,       $F_PS_Joint_3r                ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Joint_3r     ) = -2180, -907, -907, -897, -887, -877
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Joint_3r     ) = 0, 0, 40, 40, 40, 40
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Joint_3r       ) = -300, -300, -823, -823, -833, -843
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Joint_3r       ) = 50, 55, 55, 40, 40, 40

force.type (                        $F_PS_Spring_2l               ) = 5                       ! Type
force.from (                        $F_PS_Spring_2l               ) = $M_Bogie_PS_2l_spring   ! From Marker
force.to (                          $F_PS_Spring_2l               ) = $M_box2l_spring         ! To Marker
force.st.intern (                   $F_PS_Spring_2l               ) = ''                      ! Internal state
force.preld.calc (        1 ,       $F_PS_Spring_2l               ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_PS_Spring_2l               ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_PS_Spring_2l               ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_PS_Spring_2l               ) = 9.7100171085529473E+03  ! [N] Nominal force in x
force.par (               2 ,       $F_PS_Spring_2l               ) = -1.8841375415675179E-08 ! [N] Nominal force in y
force.par (               3 ,       $F_PS_Spring_2l               ) = -4.1974565592328443E+04 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_Spring_2l               ) = $_PS_Spring_Stiffness_X ! [N/m] Stiffness in x
force.par (               5 ,       $F_PS_Spring_2l               ) = $_PS_Spring_stiffness_Y ! [N/m] Stiffness in y
force.par (               6 ,       $F_PS_Spring_2l               ) = $_PS_Spring_stiffness_Z ! [N/m] Stiffness in z
force.attr.2d.pos.x (     1 ,       $F_PS_Spring_2l               ) = 1150
force.attr.2d.pos.y (     1 ,       $F_PS_Spring_2l               ) = -90
force.attr.2d.ori (       1 ,       $F_PS_Spring_2l               ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Spring_2l    ) = 1070, 1070, 1080, 1109.75, 1109.75, 1119.75, 1133
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Spring_2l    ) = -20, -105, -105, -105, -90, -90, -90
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Spring_2l      ) = 510, 510, 1331.25, 1331.25, 1331.25, 1167
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Spring_2l      ) = -90, -110, -110, -100, -90, -90

force.type (                        $F_PS_Spring_2r               ) = 5                       ! Type
force.from (                        $F_PS_Spring_2r               ) = $M_Bogie_PS_2r_spring   ! From Marker
force.to (                          $F_PS_Spring_2r               ) = $M_box2r_spring         ! To Marker
force.st.intern (                   $F_PS_Spring_2r               ) = ''                      ! Internal state
force.preld.calc (        1 ,       $F_PS_Spring_2r               ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_PS_Spring_2r               ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_PS_Spring_2r               ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_PS_Spring_2r               ) = 9.7100171086040682E+03  ! [N] Nominal force in x
force.par (               2 ,       $F_PS_Spring_2r               ) = -1.9616087773518342E-08 ! [N] Nominal force in y
force.par (               3 ,       $F_PS_Spring_2r               ) = -4.1974565592190665E+04 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_Spring_2r               ) = $_PS_Spring_Stiffness_X ! [N/m] Stiffness in x
force.par (               5 ,       $F_PS_Spring_2r               ) = $_PS_Spring_stiffness_Y ! [N/m] Stiffness in y
force.par (               6 ,       $F_PS_Spring_2r               ) = $_PS_Spring_stiffness_Z ! [N/m] Stiffness in z
force.attr.2d.pos.x (     1 ,       $F_PS_Spring_2r               ) = 1050
force.attr.2d.pos.y (     1 ,       $F_PS_Spring_2r               ) = 50
force.attr.2d.ori (       1 ,       $F_PS_Spring_2r               ) = 90
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Spring_2r    ) = 1050, 1050
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Spring_2r    ) = 10, 33
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Spring_2r      ) = 480, 521.5355682373047, 521.5355682373047, 532.0474243164063, 546.063232421875, 564.7509765625, 589.66796875, 622.890625, 667.1875, 726.25, 805, 910, 1050, 1050
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Spring_2r      ) = 50, 50, 79.75, 79.75, 79.75, 79.75, 79.75, 79.75, 79.75, 79.75, 79.75, 79.75, 79.75, 67

force.type (                        $F_PS_Spring_1l               ) = 5                       ! Type
force.from (                        $F_PS_Spring_1l               ) = $M_Bogie_PS_1l_Spring   ! From Marker
force.to (                          $F_PS_Spring_1l               ) = $M_box1l_spring         ! To Marker
force.st.intern (                   $F_PS_Spring_1l               ) = ''                      ! Internal state
force.preld.calc (        1 ,       $F_PS_Spring_1l               ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_PS_Spring_1l               ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_PS_Spring_1l               ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_PS_Spring_1l               ) = -9.7100171085181173E+03 ! [N] Nominal force in x
force.par (               2 ,       $F_PS_Spring_1l               ) = 1.8235195890561643E-09  ! [N] Nominal force in y
force.par (               3 ,       $F_PS_Spring_1l               ) = -4.1974565592312516E+04 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_Spring_1l               ) = $_PS_Spring_Stiffness_X ! [N/m] Stiffness in x
force.par (               5 ,       $F_PS_Spring_1l               ) = $_PS_Spring_stiffness_Y ! [N/m] Stiffness in y
force.par (               6 ,       $F_PS_Spring_1l               ) = $_PS_Spring_stiffness_Z ! [N/m] Stiffness in z
force.attr.2d.pos.x (     1 ,       $F_PS_Spring_1l               ) = 1090
force.attr.2d.pos.y (     1 ,       $F_PS_Spring_1l               ) = -80
force.attr.2d.ori (       1 ,       $F_PS_Spring_1l               ) = 270
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Spring_1l    ) = 1080, 1080, 1090, 1090
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Spring_1l    ) = -20, -38.25, -38.25, -63
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Spring_1l      ) = 670, 670, 1090, 1090
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Spring_1l      ) = -90, -100, -100, -97

force.type (                        $F_PS_Spring_1r               ) = 5                       ! Type
force.from (                        $F_PS_Spring_1r               ) = $M_Bogie_PS_1r_Spring   ! From Marker
force.to (                          $F_PS_Spring_1r               ) = $M_box1r_spring         ! To Marker
force.st.intern (                   $F_PS_Spring_1r               ) = ''                      ! Internal state
force.preld.calc (        1 ,       $F_PS_Spring_1r               ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_PS_Spring_1r               ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_PS_Spring_1r               ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_PS_Spring_1r               ) = -9.7100171085293514E+03 ! [N] Nominal force in x
force.par (               2 ,       $F_PS_Spring_1r               ) = 2.1455288000567146E-09  ! [N] Nominal force in y
force.par (               3 ,       $F_PS_Spring_1r               ) = -4.1974565592264553E+04 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_Spring_1r               ) = $_PS_Spring_Stiffness_X ! [N/m] Stiffness in x
force.par (               5 ,       $F_PS_Spring_1r               ) = $_PS_Spring_stiffness_Y ! [N/m] Stiffness in y
force.par (               6 ,       $F_PS_Spring_1r               ) = $_PS_Spring_stiffness_Z ! [N/m] Stiffness in z
force.attr.2d.pos.x (     1 ,       $F_PS_Spring_1r               ) = 990
force.attr.2d.pos.y (     1 ,       $F_PS_Spring_1r               ) = 40
force.attr.2d.ori (       1 ,       $F_PS_Spring_1r               ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Spring_1r    ) = 1060, 1060, 1020.25, 1020.25, 1020.25, 1007
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Spring_1r    ) = 10, 20, 20, 30, 40, 40
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Spring_1r      ) = 380, 380, 963, 963, 963, 963, 973
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Spring_1r      ) = 20, 10, 10, 20, 30, 40, 40

force.type (                        $F_PS_Damping_2l              ) = 6                       ! Type
force.from (                        $F_PS_Damping_2l              ) = $M_Bogie_PS_2l_damping  ! From Marker
force.to (                          $F_PS_Damping_2l              ) = $M_box2l_damping        ! To Marker
force.st.dyn (            1 ,       $F_PS_Damping_2l              ) = 0.0000000000000000E+00  ! Dynamic states
force.st.intern (                   $F_PS_Damping_2l              ) = ''                      ! Internal state
force.par (               1 ,       $F_PS_Damping_2l              ) = 3.6999998108999999E-01  ! [m] Nominal length
force.par (               2 ,       $F_PS_Damping_2l              ) = 4.9000000000000000E+06  ! [N/m] Stiffness
force.par (               5 ,       $F_PS_Damping_2l              ) = $I_PS_Damping           ! [-] Input Function F_d(ld)
force.attr.2d.pos.x (     1 ,       $F_PS_Damping_2l              ) = 780
force.attr.2d.pos.y (     1 ,       $F_PS_Damping_2l              ) = -70
force.attr.2d.ori (       1 ,       $F_PS_Damping_2l              ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Damping_2l   ) = 1040, 865.25, 865.25, 855.25, 797
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Damping_2l   ) = -10, -10, -70, -70, -70
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Damping_2l     ) = 530, 579.095947265625, 579.095947265625, 592.1279296875, 609.50390625, 632.671875, 663.5625, 704.75, 704.75, 704.75, 763
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Damping_2l     ) = -70, -70, -50, -50, -50, -50, -50, -50, -60, -70, -70

force.type (                        $F_PS_Damping_2r              ) = 6                       ! Type
force.from (                        $F_PS_Damping_2r              ) = $M_Bogie_PS_2r_damping  ! From Marker
force.to (                          $F_PS_Damping_2r              ) = $M_box2r_damping        ! To Marker
force.st.dyn (            1 ,       $F_PS_Damping_2r              ) = 0.0000000000000000E+00  ! Dynamic states
force.st.intern (                   $F_PS_Damping_2r              ) = ''                      ! Internal state
force.par (               1 ,       $F_PS_Damping_2r              ) = 3.6999998108999999E-01  ! [m] Nominal length
force.par (               2 ,       $F_PS_Damping_2r              ) = 4.9000000000000000E+06  ! [N/m] Stiffness
force.par (               5 ,       $F_PS_Damping_2r              ) = $I_PS_Damping           ! [-] Input Function F_d(ld)
force.attr.2d.pos.x (     1 ,       $F_PS_Damping_2r              ) = 680
force.attr.2d.pos.y (     1 ,       $F_PS_Damping_2r              ) = 30
force.attr.2d.ori (       1 ,       $F_PS_Damping_2r              ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Damping_2r   ) = 1040, 757, 757, 747, 737, 727, 717, 707, 697
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Damping_2r   ) = 0, 0, 30, 30, 30, 30, 30, 30, 30
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Damping_2r     ) = 470, 470, 663
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Damping_2r     ) = 40, 30, 30

force.type (                        $F_PS_Damping_1l              ) = 6                       ! Type
force.from (                        $F_PS_Damping_1l              ) = $M_Bogie_PS_1l_damping  ! From Marker
force.to (                          $F_PS_Damping_1l              ) = $M_box1l_damping        ! To Marker
force.st.dyn (            1 ,       $F_PS_Damping_1l              ) = 0.0000000000000000E+00  ! Dynamic states
force.st.intern (                   $F_PS_Damping_1l              ) = ''                      ! Internal state
force.par (               1 ,       $F_PS_Damping_1l              ) = 3.6999998108999999E-01  ! [m] Nominal length
force.par (               2 ,       $F_PS_Damping_1l              ) = 4.9000000000000000E+06  ! [N/m] Stiffness
force.par (               5 ,       $F_PS_Damping_1l              ) = $I_PS_Damping           ! [-] Input Function F_d(ld)
force.attr.2d.pos.x (     1 ,       $F_PS_Damping_1l              ) = 890
force.attr.2d.pos.y (     1 ,       $F_PS_Damping_1l              ) = -70
force.attr.2d.ori (       1 ,       $F_PS_Damping_1l              ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Damping_1l   ) = 1050, 1050, 917, 917, 917, 917, 917, 907
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Damping_1l   ) = -20, -30, -30, -33.75, -45, -60, -70, -70
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Damping_1l     ) = 690, 715.0985107421875, 715.0985107421875, 730.197021484375, 740.2626953125, 753.68359375, 771.578125, 795.4375, 827.25, 827.25, 827.25, 873
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Damping_1l     ) = -80, -80, -90, -90, -90, -90, -90, -90, -90, -80, -70, -70

force.type (                        $F_PS_Damping_1r              ) = 6                       ! Type
force.from (                        $F_PS_Damping_1r              ) = $M_Bogie_PS_1r_damping  ! From Marker
force.to (                          $F_PS_Damping_1r              ) = $M_box1r_damping        ! To Marker
force.st.dyn (            1 ,       $F_PS_Damping_1r              ) = 0.0000000000000000E+00  ! Dynamic states
force.st.intern (                   $F_PS_Damping_1r              ) = ''                      ! Internal state
force.par (               1 ,       $F_PS_Damping_1r              ) = 3.6999998108999999E-01  ! [m] Nominal length
force.par (               2 ,       $F_PS_Damping_1r              ) = 4.9000000000000000E+06  ! [N/m] Stiffness
force.par (               5 ,       $F_PS_Damping_1r              ) = $I_PS_Damping           ! [-] Input Function F_d(ld)
force.attr.2d.pos.x (     1 ,       $F_PS_Damping_1r              ) = 780
force.attr.2d.pos.y (     1 ,       $F_PS_Damping_1r              ) = 30
force.attr.2d.ori (       1 ,       $F_PS_Damping_1r              ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Damping_1r   ) = 1060, 1060, 827, 827, 827, 827, 827, 827, 817, 807, 797
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Damping_1r   ) = -20, -26.25, -26.25, -15, 0, 10, 20, 30, 30, 30, 30
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Damping_1r     ) = 370, 370, 753, 753, 753, 763
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Damping_1r     ) = 20, 10, 10, 20, 30, 30

force.type (                        $F_PS_Joint_2l                ) = 5                       ! Type
force.from (                        $F_PS_Joint_2l                ) = $M_Bogie_PS_2l_Joint    ! From Marker
force.to (                          $F_PS_Joint_2l                ) = $M_box2l_joint          ! To Marker
force.st.intern (                   $F_PS_Joint_2l                ) = ''                      ! Internal state
force.preld.calc (        1 ,       $F_PS_Joint_2l                ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_PS_Joint_2l                ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_PS_Joint_2l                ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_PS_Joint_2l                ) = -9.7100171085631173E+03 ! [N] Nominal force in x
force.par (               2 ,       $F_PS_Joint_2l                ) = 2.0502966201704923E-08  ! [N] Nominal force in y
force.par (               3 ,       $F_PS_Joint_2l                ) = -5.0224122346113209E+03 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_Joint_2l                ) = $_PS_Joing_Stiffness_X  ! [N/m] Stiffness in x
force.par (               5 ,       $F_PS_Joint_2l                ) = $_PS_Joint_stiffness_Y  ! [N/m] Stiffness in y
force.par (               6 ,       $F_PS_Joint_2l                ) = $_PS_Joint_Stiffness_Z  ! [N/m] Stiffness in z
force.attr.2d.pos.x (     1 ,       $F_PS_Joint_2l                ) = 1020
force.attr.2d.pos.y (     1 ,       $F_PS_Joint_2l                ) = -80
force.attr.2d.ori (       1 ,       $F_PS_Joint_2l                ) = 270
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Joint_2l     ) = 1080, 1080, 1020, 1020, 1020, 1020, 1020
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Joint_2l     ) = 10, 16.109375, 16.109375, 4.4375, -11.125, -21.5, -63
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Joint_2l       ) = 530, 576.0406494140625, 576.0406494140625, 588.05419921875, 604.072265625, 625.4296875, 653.90625, 691.875, 742.5, 810, 900, 1020, 1020
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Joint_2l       ) = -80, -80, -109.75, -109.75, -109.75, -109.75, -109.75, -109.75, -109.75, -109.75, -109.75, -109.75, -97

force.type (                        $F_PS_Joint_2r                ) = 5                       ! Type
force.from (                        $F_PS_Joint_2r                ) = $M_Bogie_PS_2r_Joint    ! From Marker
force.to (                          $F_PS_Joint_2r                ) = $M_box2r_joint          ! To Marker
force.st.intern (                   $F_PS_Joint_2r                ) = ''                      ! Internal state
force.preld.calc (        1 ,       $F_PS_Joint_2r                ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_PS_Joint_2r                ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_PS_Joint_2r                ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_PS_Joint_2r                ) = -9.7100171085938982E+03 ! [N] Nominal force in x
force.par (               2 ,       $F_PS_Joint_2r                ) = 2.0130534055147010E-08  ! [N] Nominal force in y
force.par (               3 ,       $F_PS_Joint_2r                ) = -5.0224122345459182E+03 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_Joint_2r                ) = $_PS_Joing_Stiffness_X  ! [N/m] Stiffness in x
force.par (               5 ,       $F_PS_Joint_2r                ) = $_PS_Joint_stiffness_Y  ! [N/m] Stiffness in y
force.par (               6 ,       $F_PS_Joint_2r                ) = $_PS_Joint_Stiffness_Z  ! [N/m] Stiffness in z
force.attr.2d.pos.x (     1 ,       $F_PS_Joint_2r                ) = 920
force.attr.2d.pos.y (     1 ,       $F_PS_Joint_2r                ) = 40
force.attr.2d.ori (       1 ,       $F_PS_Joint_2r                ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Joint_2r     ) = 1090, 1095.21875, 1095.21875, 1080.875, 1061.75, 947, 947, 937
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Joint_2r     ) = 0, 0, 20, 20, 20, 20, 40, 40
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Joint_2r       ) = 470, 470, 873, 873, 873, 873, 883, 893, 903
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Joint_2r       ) = 70, 75, 75, 60, 50, 40, 40, 40, 40

force.type (                        $F_PS_Joint_1l                ) = 5                       ! Type
force.from (                        $F_PS_Joint_1l                ) = $M_Bogie_PS_1l_Joint    ! From Marker
force.to (                          $F_PS_Joint_1l                ) = $M_box1l_joint          ! To Marker
force.st.intern (                   $F_PS_Joint_1l                ) = ''                      ! Internal state
force.preld.calc (        1 ,       $F_PS_Joint_1l                ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_PS_Joint_1l                ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_PS_Joint_1l                ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_PS_Joint_1l                ) = 9.7100171085177080E+03  ! [N] Nominal force in x
force.par (               2 ,       $F_PS_Joint_1l                ) = -6.6869332902573834E-10 ! [N] Nominal force in y
force.par (               3 ,       $F_PS_Joint_1l                ) = -5.0224122345946334E+03 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_Joint_1l                ) = $_PS_Joing_Stiffness_X  ! [N/m] Stiffness in x
force.par (               5 ,       $F_PS_Joint_1l                ) = $_PS_Joint_stiffness_Y  ! [N/m] Stiffness in y
force.par (               6 ,       $F_PS_Joint_1l                ) = $_PS_Joint_Stiffness_Z  ! [N/m] Stiffness in z
force.attr.2d.pos.x (     1 ,       $F_PS_Joint_1l                ) = 950
force.attr.2d.pos.y (     1 ,       $F_PS_Joint_1l                ) = -70
force.attr.2d.ori (       1 ,       $F_PS_Joint_1l                ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Joint_1l     ) = 1090, 1095.32421875, 1095.32421875, 1081.296875, 1062.59375, 1050.125, 1000.25, 1000.25, 967
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Joint_1l     ) = -10, -10, -25, -25, -25, -25, -25, -70, -70
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Joint_1l       ) = 660, 660, 923, 923, 923, 923, 933
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Joint_1l       ) = -90, -100, -100, -90, -80, -70, -70

force.type (                        $F_PS_Joint_1r                ) = 5                       ! Type
force.from (                        $F_PS_Joint_1r                ) = $M_Bogie_PS_1r_Joint    ! From Marker
force.to (                          $F_PS_Joint_1r                ) = $M_box1r_joint          ! To Marker
force.st.intern (                   $F_PS_Joint_1r                ) = ''                      ! Internal state
force.preld.calc (        1 ,       $F_PS_Joint_1r                ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_PS_Joint_1r                ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_PS_Joint_1r                ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_PS_Joint_1r                ) = 9.7100171085297607E+03  ! [N] Nominal force in x
force.par (               2 ,       $F_PS_Joint_1r                ) = -4.0267319611084176E-10 ! [N] Nominal force in y
force.par (               3 ,       $F_PS_Joint_1r                ) = -5.0224122345050373E+03 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_Joint_1r                ) = $_PS_Joing_Stiffness_X  ! [N/m] Stiffness in x
force.par (               5 ,       $F_PS_Joint_1r                ) = $_PS_Joint_stiffness_Y  ! [N/m] Stiffness in y
force.par (               6 ,       $F_PS_Joint_1r                ) = $_PS_Joint_Stiffness_Z  ! [N/m] Stiffness in z
force.attr.2d.pos.x (     1 ,       $F_PS_Joint_1r                ) = 850
force.attr.2d.pos.y (     1 ,       $F_PS_Joint_1r                ) = 30
force.attr.2d.ori (       1 ,       $F_PS_Joint_1r                ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PS_Joint_1r     ) = 1050, 1050, 877, 877, 867
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PS_Joint_1r     ) = 10, 20, 20, 30, 30
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PS_Joint_1r       ) = 390, 431.7608222961426, 431.7608222961426, 442.3477630615234, 456.4636840820313, 475.284912109375, 500.3798828125, 533.83984375, 578.453125, 637.9375, 717.25, 823, 823, 823, 833
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PS_Joint_1r       ) = 30, 30, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 30, 30

force.type (                        $F_SS_AirSpring_1l            ) = 5                       ! Type
force.from (                        $F_SS_AirSpring_1l            ) = $M_Carbody_Airspring_1l ! From Marker
force.to (                          $F_SS_AirSpring_1l            ) = $M_Bogie_SS_Airspring_1l ! To Marker
force.st.intern (                   $F_SS_AirSpring_1l            ) = ''                      ! Internal state
force.preld.calc (        1 ,       $F_SS_AirSpring_1l            ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_SS_AirSpring_1l            ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_SS_AirSpring_1l            ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_SS_AirSpring_1l            ) = 2.1625725904310633E-01  ! [N] Nominal force in x
force.par (               2 ,       $F_SS_AirSpring_1l            ) = -3.1196301604259318E-16 ! [N] Nominal force in y
force.par (               3 ,       $F_SS_AirSpring_1l            ) = -8.2811153601149679E+04 ! [N] Nominal force in z
force.par (               4 ,       $F_SS_AirSpring_1l            ) = $_AirSpring_stiffness_x ! [N/m] Stiffness in x
force.par (               5 ,       $F_SS_AirSpring_1l            ) = $_AirSpring_stiffness_y ! [N/m] Stiffness in y
force.par (               6 ,       $F_SS_AirSpring_1l            ) = $_AirSpring_stiffness_z ! [N/m] Stiffness in z
force.par (               7 ,       $F_SS_AirSpring_1l            ) = 1.2000000000000000E+04  ! [Ns/m] Damping in x
force.par (               8 ,       $F_SS_AirSpring_1l            ) = 1.2000000000000000E+04  ! [Ns/m] Damping in y
force.par (               9 ,       $F_SS_AirSpring_1l            ) = 4.0000000000000000E+04  ! [Ns/m] Damping in z
force.attr.2d.pos.x (     1 ,       $F_SS_AirSpring_1l            ) = 370
force.attr.2d.pos.y (     1 ,       $F_SS_AirSpring_1l            ) = -20
force.attr.2d.ori (       1 ,       $F_SS_AirSpring_1l            ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_SS_AirSpring_1l ) = 110, 323, 323, 323, 333, 343, 353
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_SS_AirSpring_1l ) = 0, 0, -10, -20, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_SS_AirSpring_1l   ) = 1040, 417, 417, 417, 407, 397, 387
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_SS_AirSpring_1l   ) = 0, 0, -10, -20, -20, -20, -20

force.type (                        $F_SS_AirSpring_1r            ) = 5                       ! Type
force.from (                        $F_SS_AirSpring_1r            ) = $M_Carbody_Airspring_1r ! From Marker
force.to (                          $F_SS_AirSpring_1r            ) = $M_Bogie_SS_Airspring_1r ! To Marker
force.st.intern (                   $F_SS_AirSpring_1r            ) = ''                      ! Internal state
force.preld.calc (        1 ,       $F_SS_AirSpring_1r            ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_SS_AirSpring_1r            ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_SS_AirSpring_1r            ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_SS_AirSpring_1r            ) = -2.1625726002230686E-01 ! [N] Nominal force in x
force.par (               2 ,       $F_SS_AirSpring_1r            ) = -3.1196301604259318E-16 ! [N] Nominal force in y
force.par (               3 ,       $F_SS_AirSpring_1r            ) = -8.2811153601145255E+04 ! [N] Nominal force in z
force.par (               4 ,       $F_SS_AirSpring_1r            ) = $_AirSpring_stiffness_x ! [N/m] Stiffness in x
force.par (               5 ,       $F_SS_AirSpring_1r            ) = $_AirSpring_stiffness_y ! [N/m] Stiffness in y
force.par (               6 ,       $F_SS_AirSpring_1r            ) = $_AirSpring_stiffness_z ! [N/m] Stiffness in z
force.par (               7 ,       $F_SS_AirSpring_1r            ) = 1.2000000000000000E+04  ! [Ns/m] Damping in x
force.par (               8 ,       $F_SS_AirSpring_1r            ) = 1.2000000000000000E+04  ! [Ns/m] Damping in y
force.par (               9 ,       $F_SS_AirSpring_1r            ) = 4.0000000000000000E+04  ! [Ns/m] Damping in z
force.attr.2d.pos.x (     1 ,       $F_SS_AirSpring_1r            ) = 440
force.attr.2d.pos.y (     1 ,       $F_SS_AirSpring_1r            ) = -20
force.attr.2d.ori (       1 ,       $F_SS_AirSpring_1r            ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_SS_AirSpring_1r ) = 110, 393, 393, 393, 403, 413, 423
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_SS_AirSpring_1r ) = -40, -40, -30, -20, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_SS_AirSpring_1r   ) = 1040, 1014.147745609283, 1014.147745609283, 998.2954912185669, 987.7273216247559, 973.6364288330078, 954.8485717773438, 929.798095703125, 896.3974609375, 851.86328125, 792.484375, 713.3125, 607.75, 467, 467, 467, 457
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_SS_AirSpring_1r   ) = -10, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, -20, -20

force.type (                        $F_SS_AirSpring_2l            ) = 5                       ! Type
force.from (                        $F_SS_AirSpring_2l            ) = $M_Carbody_Airspring_2l ! From Marker
force.to (                          $F_SS_AirSpring_2l            ) = $M_Bogie2_Airspring_2l  ! To Marker
force.st.intern (                   $F_SS_AirSpring_2l            ) = ''                      ! Internal state
force.preld.calc (        1 ,       $F_SS_AirSpring_2l            ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_SS_AirSpring_2l            ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_SS_AirSpring_2l            ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_SS_AirSpring_2l            ) = 2.1625726002137100E-01  ! [N] Nominal force in x
force.par (               2 ,       $F_SS_AirSpring_2l            ) = -3.6929646697376105E-16 ! [N] Nominal force in y
force.par (               3 ,       $F_SS_AirSpring_2l            ) = -8.2811153601145270E+04 ! [N] Nominal force in z
force.par (               4 ,       $F_SS_AirSpring_2l            ) = $_AirSpring_stiffness_x ! [N/m] Stiffness in x
force.par (               5 ,       $F_SS_AirSpring_2l            ) = $_AirSpring_stiffness_y ! [N/m] Stiffness in y
force.par (               6 ,       $F_SS_AirSpring_2l            ) = $_AirSpring_stiffness_z ! [N/m] Stiffness in z
force.par (               7 ,       $F_SS_AirSpring_2l            ) = 1.2000000000000000E+04  ! [Ns/m] Damping in x
force.par (               8 ,       $F_SS_AirSpring_2l            ) = 1.2000000000000000E+04  ! [Ns/m] Damping in y
force.par (               9 ,       $F_SS_AirSpring_2l            ) = 4.0000000000000000E+04  ! [Ns/m] Damping in z
force.attr.2d.pos.x (     1 ,       $F_SS_AirSpring_2l            ) = -350
force.attr.2d.pos.y (     1 ,       $F_SS_AirSpring_2l            ) = -20
force.attr.2d.ori (       1 ,       $F_SS_AirSpring_2l            ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_SS_AirSpring_2l ) = -110, -303, -303, -303, -313, -323, -333
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_SS_AirSpring_2l ) = -40, -40, -30, -20, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_SS_AirSpring_2l   ) = -2190, -2190, -397, -397, -397, -387, -377, -367
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_SS_AirSpring_2l   ) = -20, -40, -40, -30, -20, -20, -20, -20

force.type (                        $F_SS_AirSpring_2r            ) = 5                       ! Type
force.from (                        $F_SS_AirSpring_2r            ) = $M_Carbody_Airspring_2r ! From Marker
force.to (                          $F_SS_AirSpring_2r            ) = $M_Bogie2_Airspring_2r  ! To Marker
force.st.intern (                   $F_SS_AirSpring_2r            ) = ''                      ! Internal state
force.preld.calc (        1 ,       $F_SS_AirSpring_2r            ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_SS_AirSpring_2r            ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_SS_AirSpring_2r            ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_SS_AirSpring_2r            ) = -2.1625725904499141E-01 ! [N] Nominal force in x
force.par (               2 ,       $F_SS_AirSpring_2r            ) = -3.6929646697376105E-16 ! [N] Nominal force in y
force.par (               3 ,       $F_SS_AirSpring_2r            ) = -8.2811153601149665E+04 ! [N] Nominal force in z
force.par (               4 ,       $F_SS_AirSpring_2r            ) = $_AirSpring_stiffness_x ! [N/m] Stiffness in x
force.par (               5 ,       $F_SS_AirSpring_2r            ) = $_AirSpring_stiffness_y ! [N/m] Stiffness in y
force.par (               6 ,       $F_SS_AirSpring_2r            ) = $_AirSpring_stiffness_z ! [N/m] Stiffness in z
force.par (               7 ,       $F_SS_AirSpring_2r            ) = 1.2000000000000000E+04  ! [Ns/m] Damping in x
force.par (               8 ,       $F_SS_AirSpring_2r            ) = 1.2000000000000000E+04  ! [Ns/m] Damping in y
force.par (               9 ,       $F_SS_AirSpring_2r            ) = 4.0000000000000000E+04  ! [Ns/m] Damping in z
force.attr.2d.pos.x (     1 ,       $F_SS_AirSpring_2r            ) = -420
force.attr.2d.pos.y (     1 ,       $F_SS_AirSpring_2r            ) = -20
force.attr.2d.ori (       1 ,       $F_SS_AirSpring_2r            ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_SS_AirSpring_2r ) = -110, -373, -373, -373, -373, -383, -393, -403
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_SS_AirSpring_2r ) = 10, 10, 0, -10, -20, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_SS_AirSpring_2r   ) = -2180, -2170, -2170, -467, -467, -467, -457, -447, -437
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_SS_AirSpring_2r   ) = -10, -10, 0, 0, -10, -20, -20, -20, -20

force.type (                        $F_SS_KSX_1l                  ) = 6                       ! Type
force.from (                        $F_SS_KSX_1l                  ) = $M_Carbody_KSX_1l       ! From Marker
force.to (                          $F_SS_KSX_1l                  ) = $M_Bogie_SS_KSX_1l      ! To Marker
force.st.dyn (            1 ,       $F_SS_KSX_1l                  ) = 0.0000000000000000E+00  ! Dynamic states
force.st.intern (                   $F_SS_KSX_1l                  ) = ''                      ! Internal state
force.par (               1 ,       $F_SS_KSX_1l                  ) = 6.6000000000000003E-01  ! [m] Nominal length
force.par (               2 ,       $F_SS_KSX_1l                  ) = 4.4100000000000000E+06  ! [N/m] Stiffness
force.par (               5 ,       $F_SS_KSX_1l                  ) = $I_SS_KSX               ! [-] Input Function F_d(ld)
force.attr.2d.pos.x (     1 ,       $F_SS_KSX_1l                  ) = 640
force.attr.2d.pos.y (     1 ,       $F_SS_KSX_1l                  ) = -20
force.attr.2d.ori (       1 ,       $F_SS_KSX_1l                  ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_SS_KSX_1l       ) = 110, 603, 603, 603, 603, 613, 623
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_SS_KSX_1l       ) = 10, 10, 0, -10, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_SS_KSX_1l         ) = 1050, 1050, 687, 687, 687, 677, 667, 657
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_SS_KSX_1l         ) = -20, -40, -40, -30, -20, -20, -20, -20

force.type (                        $F_SS_KSX_1r                  ) = 6                       ! Type
force.from (                        $F_SS_KSX_1r                  ) = $M_Carbody_KSX_1r       ! From Marker
force.to (                          $F_SS_KSX_1r                  ) = $M_Bogie_SS_KSX_1r      ! To Marker
force.st.dyn (            1 ,       $F_SS_KSX_1r                  ) = 0.0000000000000000E+00  ! Dynamic states
force.st.intern (                   $F_SS_KSX_1r                  ) = ''                      ! Internal state
force.par (               1 ,       $F_SS_KSX_1r                  ) = 6.6000000000000003E-01  ! [m] Nominal length
force.par (               2 ,       $F_SS_KSX_1r                  ) = 4.4100000000000000E+06  ! [N/m] Stiffness
force.par (               5 ,       $F_SS_KSX_1r                  ) = $I_SS_KSX               ! [-] Input Function F_d(ld)
force.attr.2d.pos.x (     1 ,       $F_SS_KSX_1r                  ) = 710
force.attr.2d.pos.y (     1 ,       $F_SS_KSX_1r                  ) = -20
force.attr.2d.ori (       1 ,       $F_SS_KSX_1r                  ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_SS_KSX_1r       ) = 110, 663, 663, 663, 663, 673, 683, 693
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_SS_KSX_1r       ) = -50, -50, -40, -30, -20, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_SS_KSX_1r         ) = 1060, 1060, 810.25, 810.25, 727
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_SS_KSX_1r         ) = -20, -30, -30, -20, -20

force.type (                        $F_SS_KSX_2l                  ) = 6                       ! Type
force.from (                        $F_SS_KSX_2l                  ) = $M_Carbody_KSX_2l       ! From Marker
force.to (                          $F_SS_KSX_2l                  ) = $M_Bogie2_SS_KSX_2l     ! To Marker
force.st.dyn (            1 ,       $F_SS_KSX_2l                  ) = 0.0000000000000000E+00  ! Dynamic states
force.st.intern (                   $F_SS_KSX_2l                  ) = ''                      ! Internal state
force.par (               1 ,       $F_SS_KSX_2l                  ) = 6.6000000000000003E-01  ! [m] Nominal length
force.par (               2 ,       $F_SS_KSX_2l                  ) = 4.4100000000000000E+06  ! [N/m] Stiffness
force.par (               5 ,       $F_SS_KSX_2l                  ) = $I_SS_KSX               ! [-] Input Function F_d(ld)
force.attr.2d.pos.x (     1 ,       $F_SS_KSX_2l                  ) = -620
force.attr.2d.pos.y (     1 ,       $F_SS_KSX_2l                  ) = -20
force.attr.2d.ori (       1 ,       $F_SS_KSX_2l                  ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_SS_KSX_2l       ) = -110, -583, -583, -583, -583, -593, -603
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_SS_KSX_2l       ) = -50, -50, -40, -30, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_SS_KSX_2l         ) = -2200, -2200, -667, -667, -667, -657, -647, -637
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_SS_KSX_2l         ) = -20, -40, -40, -30, -20, -20, -20, -20

force.type (                        $F_SS_KSX_2r                  ) = 6                       ! Type
force.from (                        $F_SS_KSX_2r                  ) = $M_Carbody_KSX_2r       ! From Marker
force.to (                          $F_SS_KSX_2r                  ) = $M_Bogie2_SS_KSX_2r     ! To Marker
force.st.dyn (            1 ,       $F_SS_KSX_2r                  ) = 0.0000000000000000E+00  ! Dynamic states
force.st.intern (                   $F_SS_KSX_2r                  ) = ''                      ! Internal state
force.par (               1 ,       $F_SS_KSX_2r                  ) = 6.6000000000000003E-01  ! [m] Nominal length
force.par (               2 ,       $F_SS_KSX_2r                  ) = 4.4100000000000000E+06  ! [N/m] Stiffness
force.par (               5 ,       $F_SS_KSX_2r                  ) = $I_SS_KSX               ! [-] Input Function F_d(ld)
force.attr.2d.pos.x (     1 ,       $F_SS_KSX_2r                  ) = -690
force.attr.2d.pos.y (     1 ,       $F_SS_KSX_2r                  ) = -20
force.attr.2d.ori (       1 ,       $F_SS_KSX_2r                  ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_SS_KSX_2r       ) = -110, -643, -643, -643, -643, -643, -643, -643, -643, -643, -653, -663, -673
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_SS_KSX_2r       ) = 60, 60, 50, 40, 30, 20, 10, 0, -10, -20, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_SS_KSX_2r         ) = -2210, -2210, -737, -737, -737, -727, -717, -707
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_SS_KSX_2r         ) = -20, -40, -40, -30, -20, -20, -20, -20

force.type (                        $F_SS_HX_1                    ) = 6                       ! Type
force.from (                        $F_SS_HX_1                    ) = $M_Carbody_HX_1         ! From Marker
force.to (                          $F_SS_HX_1                    ) = $M_Bogie_SS_HX_1        ! To Marker
force.st.dyn (            1 ,       $F_SS_HX_1                    ) = 0.0000000000000000E+00  ! Dynamic states
force.st.intern (                   $F_SS_HX_1                    ) = ''                      ! Internal state
force.par (               1 ,       $F_SS_HX_1                    ) = 4.5515821425000003E-01  ! [m] Nominal length
force.par (               2 ,       $F_SS_HX_1                    ) = 8.5000000000000000E+06  ! [N/m] Stiffness
force.par (               5 ,       $F_SS_HX_1                    ) = $I_SS_HX                ! [-] Input Function F_d(ld)
force.attr.2d.pos.x (     1 ,       $F_SS_HX_1                    ) = 510
force.attr.2d.pos.y (     1 ,       $F_SS_HX_1                    ) = -20
force.attr.2d.ori (       1 ,       $F_SS_HX_1                    ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_SS_HX_1         ) = 110, 463, 463, 463, 463, 463, 473, 483, 493
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_SS_HX_1         ) = -60, -60, -50, -40, -30, -20, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_SS_HX_1           ) = 1070, 1070, 557, 557, 557, 547, 537, 527
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_SS_HX_1           ) = -20, -40, -40, -30, -20, -20, -20, -20

force.type (                        $F_SS_HX_2                    ) = 6                       ! Type
force.from (                        $F_SS_HX_2                    ) = $M_Carbody_HX_2         ! From Marker
force.to (                          $F_SS_HX_2                    ) = $M_Bogie_SS_HX_2        ! To Marker
force.st.dyn (            1 ,       $F_SS_HX_2                    ) = 0.0000000000000000E+00  ! Dynamic states
force.st.intern (                   $F_SS_HX_2                    ) = ''                      ! Internal state
force.par (               1 ,       $F_SS_HX_2                    ) = 4.5515821425000003E-01  ! [m] Nominal length
force.par (               2 ,       $F_SS_HX_2                    ) = 8.5000000000000000E+06  ! [N/m] Stiffness
force.par (               5 ,       $F_SS_HX_2                    ) = $I_SS_HX                ! [-] Input Function F_d(ld)
force.attr.2d.pos.x (     1 ,       $F_SS_HX_2                    ) = 580
force.attr.2d.pos.y (     1 ,       $F_SS_HX_2                    ) = -20
force.attr.2d.ori (       1 ,       $F_SS_HX_2                    ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_SS_HX_2         ) = 110, 136.2558345794678, 136.2558345794678, 152.5116691589356, 163.3488922119141, 177.7985229492188, 197.064697265625, 222.7529296875, 257.00390625, 302.671875, 363.5625, 444.75, 553, 553, 553, 563
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_SS_HX_2         ) = -30, -30, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -30, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_SS_HX_2           ) = 1080, 1080, 617, 617, 617, 607, 597
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_SS_HX_2           ) = -20, -40, -40, -30, -20, -20, -20

force.type (                        $F_SS_HX_3                    ) = 6                       ! Type
force.from (                        $F_SS_HX_3                    ) = $M_Carbody_HX_3         ! From Marker
force.to (                          $F_SS_HX_3                    ) = $M_Bogie2_SS_HX_3       ! To Marker
force.st.dyn (            1 ,       $F_SS_HX_3                    ) = 0.0000000000000000E+00  ! Dynamic states
force.st.intern (                   $F_SS_HX_3                    ) = ''                      ! Internal state
force.par (               1 ,       $F_SS_HX_3                    ) = 4.5515821425000003E-01  ! [m] Nominal length
force.par (               2 ,       $F_SS_HX_3                    ) = 8.5000000000000000E+06  ! [N/m] Stiffness
force.par (               5 ,       $F_SS_HX_3                    ) = $I_SS_HX                ! [-] Input Function F_d(ld)
force.attr.2d.pos.x (     1 ,       $F_SS_HX_3                    ) = -490
force.attr.2d.pos.y (     1 ,       $F_SS_HX_3                    ) = -20
force.attr.2d.ori (       1 ,       $F_SS_HX_3                    ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_SS_HX_3         ) = -110, -443, -443, -443, -443, -443, -453, -463, -473
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_SS_HX_3         ) = -60, -60, -50, -40, -30, -20, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_SS_HX_3           ) = -2220, -2220, -537, -537, -537, -527, -517, -507
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_SS_HX_3           ) = -20, -40, -40, -30, -20, -20, -20, -20

force.type (                        $F_SS_HX_4                    ) = 6                       ! Type
force.from (                        $F_SS_HX_4                    ) = $M_Carbody_HX_4         ! From Marker
force.to (                          $F_SS_HX_4                    ) = $M_Bogie2_SS_HX_4       ! To Marker
force.st.dyn (            1 ,       $F_SS_HX_4                    ) = 0.0000000000000000E+00  ! Dynamic states
force.st.intern (                   $F_SS_HX_4                    ) = ''                      ! Internal state
force.par (               1 ,       $F_SS_HX_4                    ) = 4.5515821425000003E-01  ! [m] Nominal length
force.par (               2 ,       $F_SS_HX_4                    ) = 8.5000000000000000E+06  ! [N/m] Stiffness
force.par (               5 ,       $F_SS_HX_4                    ) = $I_SS_HX                ! [-] Input Function F_d(ld)
force.attr.2d.pos.x (     1 ,       $F_SS_HX_4                    ) = -560
force.attr.2d.pos.y (     1 ,       $F_SS_HX_4                    ) = -20
force.attr.2d.ori (       1 ,       $F_SS_HX_4                    ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_SS_HX_4         ) = -110, -123.6298828125, -123.6298828125, -134.51953125, -178.078125, -236.15625, -274.875, -429.75, -533, -533, -533, -533, -543
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_SS_HX_4         ) = -70, -70, -50, -50, -50, -50, -50, -50, -50, -40, -30, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_SS_HX_4           ) = -2190, -2190, -1809.25, -1809.25, -667, -667, -657, -647, -637, -627, -617, -607, -597, -597, -587, -577
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_SS_HX_4           ) = 10, 20, 20, 10, 10, 20, 20, 20, 20, 20, 20, 20, 20, -20, -20, -20

force.type (                        $F_QY_1                       ) = 5                       ! Type
force.from (                        $F_QY_1                       ) = $M_Carbody_QY_1         ! From Marker
force.to (                          $F_QY_1                       ) = $M_Bogie_QY             ! To Marker
force.st.intern (                   $F_QY_1                       ) = ''                      ! Internal state
force.par (               4 ,       $F_QY_1                       ) = $_QY_Stiffness          ! [N/m] Stiffness in x
force.attr.2d.pos.x (     1 ,       $F_QY_1                       ) = 300
force.attr.2d.pos.y (     1 ,       $F_QY_1                       ) = -20
force.attr.2d.ori (       1 ,       $F_QY_1                       ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_QY_1            ) = 110, 263, 263, 263, 263, 263, 273, 283
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_QY_1            ) = 20, 20, 10, 0, -10, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_QY_1              ) = 1060, 1060, 975.40087890625, 975.40087890625, 947.201171875, 834.40234375, 759.203125, 658.9375, 525.25, 347, 347, 337, 327, 317
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_QY_1              ) = 10, 20, 20, 10, 10, 10, 10, 10, 10, 10, -20, -20, -20, -20

force.type (                        $F_QY_2                       ) = 5                       ! Type
force.from (                        $F_QY_2                       ) = $M_Carbody_QY_2         ! From Marker
force.to (                          $F_QY_2                       ) = $M_Bogie2_QY            ! To Marker
force.st.intern (                   $F_QY_2                       ) = ''                      ! Internal state
force.par (               4 ,       $F_QY_2                       ) = $_QY_Stiffness          ! [N/m] Stiffness in x
force.attr.2d.pos.x (     1 ,       $F_QY_2                       ) = -280
force.attr.2d.pos.y (     1 ,       $F_QY_2                       ) = -20
force.attr.2d.ori (       1 ,       $F_QY_2                       ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_QY_2            ) = -110, -243, -243, -243, -243, -243, -253, -263
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_QY_2            ) = 20, 20, 10, 0, -10, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_QY_2              ) = -2200, -2200, -1168.9375, -1168.9375, -1168.9375, -1168.9375, -1168.9375, -825.25, -367, -367, -367, -367, -357, -347, -337, -327, -327, -317, -307, -297
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_QY_2              ) = 10, 20, 20, 23.75, 35, 50, 60, 60, 60, 40, 30, 20, 20, 20, 20, 20, -20, -20, -20, -20

force.type (                        $F_BS_1                       ) = 5                       ! Type
force.from (                        $F_BS_1                       ) = $M_Bogie_ZD             ! From Marker
force.to (                          $F_BS_1                       ) = $M_Carbody_ZD_1         ! To Marker
force.st.intern (                   $F_BS_1                       ) = ''                      ! Internal state
force.par (              11 ,       $F_BS_1                       ) = $I_BS                   ! [-] Input Function Fc(y)
force.attr.2d.pos.x (     1 ,       $F_BS_1                       ) = 170
force.attr.2d.pos.y (     1 ,       $F_BS_1                       ) = -20
force.attr.2d.ori (       1 ,       $F_BS_1                       ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_BS_1            ) = 1040, 1030.015625, 1030.015625, 1016.6875, 856.75, 217, 217, 217, 207, 197, 187
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_BS_1            ) = -10, -10, 0, 0, 0, 0, -10, -20, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_BS_1              ) = 110, 153
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_BS_1              ) = -20, -20

force.type (                        $F_BS_2                       ) = 5                       ! Type
force.from (                        $F_BS_2                       ) = $M_Bogie2_ZD            ! From Marker
force.to (                          $F_BS_2                       ) = $M_Carbody_ZD_2         ! To Marker
force.st.intern (                   $F_BS_2                       ) = ''                      ! Internal state
force.par (              11 ,       $F_BS_2                       ) = $I_BS                   ! [-] Input Function Fc(y)
force.attr.2d.pos.x (     1 ,       $F_BS_2                       ) = -150
force.attr.2d.pos.y (     1 ,       $F_BS_2                       ) = -20
force.attr.2d.ori (       1 ,       $F_BS_2                       ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_BS_2            ) = -2190, -2190, -197, -197, -197, -187, -177, -167
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_BS_2            ) = -20, -40, -40, -30, -20, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_BS_2              ) = -110, -133
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_BS_2              ) = -20, -20

force.type (                        $F_NG_1                       ) = 13                      ! Type
force.from (                        $F_NG_1                       ) = $M_Carbody_NiuGan_1     ! From Marker
force.to (                          $F_NG_1                       ) = $M_Bogie_NG             ! To Marker
force.st.intern (                   $F_NG_1                       ) = ''                      ! Internal state
force.par (               4 ,       $F_NG_1                       ) = $_NG_stiffness          ! [Nm/rad] Stiffness in al
force.par (              10 ,       $F_NG_1                       ) = 0.0000000000000000E+00  ! [-] Mode of angle calculation
force.attr.2d.pos.x (     1 ,       $F_NG_1                       ) = 240
force.attr.2d.pos.y (     1 ,       $F_NG_1                       ) = -20
force.attr.2d.ori (       1 ,       $F_NG_1                       ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_NG_1            ) = 110, 187.25, 187.25, 187.25, 187.25, 187.25, 187.25, 197.25, 223
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_NG_1            ) = 40, 40, 30, 10, 0, -10, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_NG_1              ) = 1050, 1050, 277, 277, 277, 267, 257
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_NG_1              ) = -20, -40, -40, -30, -20, -20, -20

force.type (                        $F_NG_2                       ) = 13                      ! Type
force.from (                        $F_NG_2                       ) = $M_Carbody_NiuGan_2     ! From Marker
force.to (                          $F_NG_2                       ) = $M_Bogie2_NG            ! To Marker
force.st.intern (                   $F_NG_2                       ) = ''                      ! Internal state
force.par (               4 ,       $F_NG_2                       ) = $_NG_stiffness          ! [Nm/rad] Stiffness in al
force.par (              10 ,       $F_NG_2                       ) = 0.0000000000000000E+00  ! [-] Mode of angle calculation
force.attr.2d.pos.x (     1 ,       $F_NG_2                       ) = -220
force.attr.2d.pos.y (     1 ,       $F_NG_2                       ) = -20
force.attr.2d.ori (       1 ,       $F_NG_2                       ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_NG_2            ) = -110, -172.25, -172.25, -172.25, -172.25, -172.25, -182.25, -203
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_NG_2            ) = 29.99999999999999, 29.99999999999999, 10, 0, -10, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_NG_2              ) = -2180, -2174.2265625, -2174.2265625, -2164.2265625, -2148.96875, -2087.9375, -1721.75, -257, -257, -257, -247, -237
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_NG_2              ) = -10, -10, 0, 0, 0, 0, 0, 0, -10, -20, -20, -20

force.type (                        $F_RWContact_RWP_WR1          ) = 78                      ! Type
force.from (                        $F_RWContact_RWP_WR1          ) = $M_B_Isys_ProfRef_RWP_WR1 ! From Marker
force.to (                          $F_RWContact_RWP_WR1          ) = $M_B_wheelset1_ProfRef_RWP_WR1 ! To Marker
force.st.desc (           1 ,       $F_RWContact_RWP_WR1          ) = 4.8502924218836436E-05  ! Descriptive states
force.st.desc (           2 ,       $F_RWContact_RWP_WR1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           3 ,       $F_RWContact_RWP_WR1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           4 ,       $F_RWContact_RWP_WR1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           5 ,       $F_RWContact_RWP_WR1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           6 ,       $F_RWContact_RWP_WR1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           7 ,       $F_RWContact_RWP_WR1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           8 ,       $F_RWContact_RWP_WR1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           9 ,       $F_RWContact_RWP_WR1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          10 ,       $F_RWContact_RWP_WR1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          11 ,       $F_RWContact_RWP_WR1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          12 ,       $F_RWContact_RWP_WR1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          13 ,       $F_RWContact_RWP_WR1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.intern (                   $F_RWContact_RWP_WR1          ) = ''                      ! Internal state
force.preld.calc (       10 ,       $F_RWContact_RWP_WR1          ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_RWContact_RWP_WR1          ) = 1.0000000000000000E+00  ! [-] Rail-Wheel Contact Element
force.par (               2 ,       $F_RWContact_RWP_WR1          ) = $RWP_WR1                ! [-] Rail-Wheel Pair
force.par (              10 ,       $F_RWContact_RWP_WR1          ) = 5.6798431176288053E+04  ! [N] Nominal preload
force.attr.2d.pos.x (     1 ,       $F_RWContact_RWP_WR1          ) = 1220
force.attr.2d.pos.y (     1 ,       $F_RWContact_RWP_WR1          ) = -20
force.attr.2d.ori (       1 ,       $F_RWContact_RWP_WR1          ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_RWContact_RWP_WR1) = -260, -260.8623046875, -260.8623046875, -233.44921875, -221.265625, -172.53125, 119.875, 119.875, 119.875, 119.875, 119.875, 119.875, 119.875, 119.875, 119.875, 119.875, 129.875, 139.875, 149.875, 159.875, 169.875, 179.875, 189.875, 199.875, 209.875, 219.875, 229.875, 729.75, 729.75, 729.75, 729.75, 739.75, 749.75, 759.75, 1103, 1103, 1103, 1103, 1113, 1123, 1133, 1143, 1153, 1163, 1173, 1173, 1173, 1183, 1193, 1203
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_RWContact_RWP_WR1) = 89.99999999999997, 89.99999999999997, 90, 90, 90, 90, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, -20, -30, -30, -30, -30, -30, -20, -10, 0, 0, 0, 0, 0, 0, 0, 0, -10, -20, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_RWContact_RWP_WR1 ) = 1400, 1400, 1267, 1267, 1267, 1257, 1247, 1237
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_RWContact_RWP_WR1 ) = -20, -40, -40, -30, -20, -20, -20, -20

force.type (                        $F_RWContact_RWP_WL1          ) = 78                      ! Type
force.from (                        $F_RWContact_RWP_WL1          ) = $M_B_Isys_ProfRef_RWP_WL1 ! From Marker
force.to (                          $F_RWContact_RWP_WL1          ) = $M_B_wheelset1_ProfRef_RWP_WL1 ! To Marker
force.st.desc (           1 ,       $F_RWContact_RWP_WL1          ) = 4.8502924225127390E-05  ! Descriptive states
force.st.desc (           2 ,       $F_RWContact_RWP_WL1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           3 ,       $F_RWContact_RWP_WL1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           4 ,       $F_RWContact_RWP_WL1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           5 ,       $F_RWContact_RWP_WL1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           6 ,       $F_RWContact_RWP_WL1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           7 ,       $F_RWContact_RWP_WL1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           8 ,       $F_RWContact_RWP_WL1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           9 ,       $F_RWContact_RWP_WL1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          10 ,       $F_RWContact_RWP_WL1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          11 ,       $F_RWContact_RWP_WL1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          12 ,       $F_RWContact_RWP_WL1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          13 ,       $F_RWContact_RWP_WL1          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.intern (                   $F_RWContact_RWP_WL1          ) = ''                      ! Internal state
force.preld.calc (       10 ,       $F_RWContact_RWP_WL1          ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_RWContact_RWP_WL1          ) = 1.0000000000000000E+00  ! [-] Rail-Wheel Contact Element
force.par (               2 ,       $F_RWContact_RWP_WL1          ) = $RWP_WL1                ! [-] Rail-Wheel Pair
force.par (              10 ,       $F_RWContact_RWP_WL1          ) = 5.6798431176252328E+04  ! [N] Nominal preload
force.attr.2d.pos.x (     1 ,       $F_RWContact_RWP_WL1          ) = 1150
force.attr.2d.pos.y (     1 ,       $F_RWContact_RWP_WL1          ) = -20
force.attr.2d.ori (       1 ,       $F_RWContact_RWP_WL1          ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_RWContact_RWP_WL1) = -260, -260.228040933609, -260.228040933609, -230.912163734436, -217.8828849792481, -200.5105133056641, -177.3473510742188, -146.463134765625, -105.2841796875, -50.37890625, 22.828125, 120.4375, 120.4375, 120.4375, 120.4375, 130.4375, 140.4375, 150.4375, 160.4375, 170.4375, 180.4375, 190.4375, 200.4375, 210.4375, 220.4375, 230.4375, 397.25, 397.25, 397.25, 397.25, 397.25, 407.25, 417.25, 427.25, 437.25, 447.25, 457.25, 467.25, 477.25, 487.25, 487.25, 487.25, 487.25, 497.25, 507.25, 517.25, 527.25, 537.25, 547.25, 557.25, 567.25, 577.25, 587.25, 873, 873, 873, 873, 883, 893, 903, 913, 923, 933, 943, 953, 963, 973, 983, 993, 1003, 1013, 1023, 1033, 1043, 1053, 1063, 1073, 1083, 1093, 1103, 1103, 1103, 1103, 1103, 1113, 1123, 1133
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_RWContact_RWP_WL1) = 80, 80, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 80, 70, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 50, 40, 30, 29.99999999999997, 29.99999999999997, 29.99999999999997, 29.99999999999997, 29.99999999999997, 29.99999999999997, 29.99999999999997, 29.99999999999997, 29.99999999999997, 29.99999999999997, 39.99999999999997, 49.99999999999997, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 40, 30, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 10, 0, -10, -20, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_RWContact_RWP_WL1 ) = 1410, 1410, 1197, 1197, 1197, 1187, 1177, 1167
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_RWContact_RWP_WL1 ) = -20, -40, -40, -30, -20, -20, -20, -20

force.type (                        $F_RWContact_RWP_WR2          ) = 78                      ! Type
force.from (                        $F_RWContact_RWP_WR2          ) = $M_B_Isys_ProfRef_RWP_WR2 ! From Marker
force.to (                          $F_RWContact_RWP_WR2          ) = $M_B_wheelset2_ProfRef_RWP_WR2 ! To Marker
force.st.desc (           1 ,       $F_RWContact_RWP_WR2          ) = 4.8502924218879465E-05  ! Descriptive states
force.st.desc (           2 ,       $F_RWContact_RWP_WR2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           3 ,       $F_RWContact_RWP_WR2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           4 ,       $F_RWContact_RWP_WR2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           5 ,       $F_RWContact_RWP_WR2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           6 ,       $F_RWContact_RWP_WR2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           7 ,       $F_RWContact_RWP_WR2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           8 ,       $F_RWContact_RWP_WR2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           9 ,       $F_RWContact_RWP_WR2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          10 ,       $F_RWContact_RWP_WR2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          11 ,       $F_RWContact_RWP_WR2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          12 ,       $F_RWContact_RWP_WR2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          13 ,       $F_RWContact_RWP_WR2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.intern (                   $F_RWContact_RWP_WR2          ) = ''                      ! Internal state
force.preld.calc (       10 ,       $F_RWContact_RWP_WR2          ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_RWContact_RWP_WR2          ) = 1.0000000000000000E+00  ! [-] Rail-Wheel Contact Element
force.par (               2 ,       $F_RWContact_RWP_WR2          ) = $RWP_WR2                ! [-] Rail-Wheel Pair
force.par (              10 ,       $F_RWContact_RWP_WR2          ) = 5.6798431176248218E+04  ! [N] Nominal preload
force.attr.2d.pos.x (     1 ,       $F_RWContact_RWP_WR2          ) = -2490
force.attr.2d.pos.y (     1 ,       $F_RWContact_RWP_WR2          ) = -20
force.attr.2d.ori (       1 ,       $F_RWContact_RWP_WR2          ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_RWContact_RWP_WR2) = -2240, -2240, -2243, -2243, -2243, -2243, -2243, -2243, -2253, -2263, -2273, -2283, -2293, -2303, -2313, -2323, -2333, -2343, -2353, -2363, -2373, -2383, -2393, -2403, -2413, -2423, -2433, -2443, -2453, -2453, -2453, -2463, -2473
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_RWContact_RWP_WR2) = -160, -150, -150, -40, -30, -20, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_RWContact_RWP_WR2 ) = 1500, 1500, -123.5, -123.5, -123.5, -123.5, -123.5, -123.5, -123.5, -133.5, -143.5, -153.5, -163.5, -173.5, -183.5, -193.5, -203.5, -213.5, -223.5, -233.5, -243.5, -253.5, -263.5, -273.5, -283.5, -293.5, -303.5, -313.5, -323.5, -333.5, -343.5, -353.5, -363.5, -373.5, -383.5, -393.5, -403.5, -413.5, -423.5, -433.5, -443.5, -453.5, -463.5, -473.5, -483.5, -493.5, -503.5, -2507, -2507, -2517, -2517, -2507
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_RWContact_RWP_WR2 ) = -20, -127.65625, -127.65625, -108.125, -92.5, -80, -70, -50, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -30, -30, -20, -20

force.type (                        $F_RWContact_RWP_WL2          ) = 78                      ! Type
force.from (                        $F_RWContact_RWP_WL2          ) = $M_B_Isys_ProfRef_RWP_WL2 ! From Marker
force.to (                          $F_RWContact_RWP_WL2          ) = $M_B_wheelset2_ProfRef_RWP_WL2 ! To Marker
force.st.desc (           1 ,       $F_RWContact_RWP_WL2          ) = 4.8502924224962442E-05  ! Descriptive states
force.st.desc (           2 ,       $F_RWContact_RWP_WL2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           3 ,       $F_RWContact_RWP_WL2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           4 ,       $F_RWContact_RWP_WL2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           5 ,       $F_RWContact_RWP_WL2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           6 ,       $F_RWContact_RWP_WL2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           7 ,       $F_RWContact_RWP_WL2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           8 ,       $F_RWContact_RWP_WL2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           9 ,       $F_RWContact_RWP_WL2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          10 ,       $F_RWContact_RWP_WL2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          11 ,       $F_RWContact_RWP_WL2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          12 ,       $F_RWContact_RWP_WL2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          13 ,       $F_RWContact_RWP_WL2          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.intern (                   $F_RWContact_RWP_WL2          ) = ''                      ! Internal state
force.preld.calc (       10 ,       $F_RWContact_RWP_WL2          ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_RWContact_RWP_WL2          ) = 1.0000000000000000E+00  ! [-] Rail-Wheel Contact Element
force.par (               2 ,       $F_RWContact_RWP_WL2          ) = $RWP_WL2                ! [-] Rail-Wheel Pair
force.par (              10 ,       $F_RWContact_RWP_WL2          ) = 5.6798431176291764E+04  ! [N] Nominal preload
force.attr.2d.pos.x (     1 ,       $F_RWContact_RWP_WL2          ) = -2290
force.attr.2d.pos.y (     1 ,       $F_RWContact_RWP_WL2          ) = -20
force.attr.2d.ori (       1 ,       $F_RWContact_RWP_WL2          ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_RWContact_RWP_WL2) = -260, -953.625, -953.625, -963.625, -973.625, -983.625, -993.625, -1003.625, -1251.5, -2243, -2243, -2243, -2243, -2243, -2253, -2263, -2273
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_RWContact_RWP_WL2) = 10, 10, 20, 20, 20, 20, 20, 20, 20, 20, 10, 0, -10, -20, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_RWContact_RWP_WL2 ) = 1510, 1510, -118.5, -118.5, -118.5, -118.5, -118.5, -118.5, -118.5, -128.5, -138.5, -148.5, -158.5, -168.5, -178.5, -188.5, -198.5, -208.5, -218.5, -228.5, -238.5, -248.5, -258.5, -268.5, -278.5, -288.5, -298.5, -308.5, -318.5, -328.5, -338.5, -348.5, -358.5, -368.5, -378.5, -388.5, -398.5, -2307, -2307, -2317, -2317, -2307
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_RWContact_RWP_WL2 ) = -20, -127.65625, -127.65625, -108.125, -92.5, -80, -70, -50, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -30, -30, -20, -20

force.type (                        $F_RWContact_RWP_WR3          ) = 78                      ! Type
force.from (                        $F_RWContact_RWP_WR3          ) = $M_B_Isys_ProfRef_RWP_WR3 ! From Marker
force.to (                          $F_RWContact_RWP_WR3          ) = $M_B_wheelset3_ProfRef_RWP_WR3 ! To Marker
force.st.desc (           1 ,       $F_RWContact_RWP_WR3          ) = 4.8502924217625172E-05  ! Descriptive states
force.st.desc (           2 ,       $F_RWContact_RWP_WR3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           3 ,       $F_RWContact_RWP_WR3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           4 ,       $F_RWContact_RWP_WR3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           5 ,       $F_RWContact_RWP_WR3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           6 ,       $F_RWContact_RWP_WR3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           7 ,       $F_RWContact_RWP_WR3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           8 ,       $F_RWContact_RWP_WR3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           9 ,       $F_RWContact_RWP_WR3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          10 ,       $F_RWContact_RWP_WR3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          11 ,       $F_RWContact_RWP_WR3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          12 ,       $F_RWContact_RWP_WR3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          13 ,       $F_RWContact_RWP_WR3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.intern (                   $F_RWContact_RWP_WR3          ) = ''                      ! Internal state
force.preld.calc (       10 ,       $F_RWContact_RWP_WR3          ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_RWContact_RWP_WR3          ) = 1.0000000000000000E+00  ! [-] Rail-Wheel Contact Element
force.par (               2 ,       $F_RWContact_RWP_WR3          ) = $RWP_WR3                ! [-] Rail-Wheel Pair
force.par (              10 ,       $F_RWContact_RWP_WR3          ) = 5.6798431176291866E+04  ! [N] Nominal preload
force.attr.2d.pos.x (     1 ,       $F_RWContact_RWP_WR3          ) = -2570
force.attr.2d.pos.y (     1 ,       $F_RWContact_RWP_WR3          ) = -20
force.attr.2d.ori (       1 ,       $F_RWContact_RWP_WR3          ) = 90
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_RWContact_RWP_WR3) = -2570, -2570
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_RWContact_RWP_WR3) = -160, -37
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_RWContact_RWP_WR3 ) = -5090, -5090, -2570, -2570
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_RWContact_RWP_WR3 ) = 10, 20, 20, -3

force.type (                        $F_RWContact_RWP_WL3          ) = 78                      ! Type
force.from (                        $F_RWContact_RWP_WL3          ) = $M_B_Isys_ProfRef_RWP_WL3 ! From Marker
force.to (                          $F_RWContact_RWP_WL3          ) = $M_B_wheelset3_ProfRef_RWP_WL3 ! To Marker
force.st.desc (           1 ,       $F_RWContact_RWP_WL3          ) = 4.8502924226219432E-05  ! Descriptive states
force.st.desc (           2 ,       $F_RWContact_RWP_WL3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           3 ,       $F_RWContact_RWP_WL3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           4 ,       $F_RWContact_RWP_WL3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           5 ,       $F_RWContact_RWP_WL3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           6 ,       $F_RWContact_RWP_WL3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           7 ,       $F_RWContact_RWP_WL3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           8 ,       $F_RWContact_RWP_WL3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           9 ,       $F_RWContact_RWP_WL3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          10 ,       $F_RWContact_RWP_WL3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          11 ,       $F_RWContact_RWP_WL3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          12 ,       $F_RWContact_RWP_WL3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          13 ,       $F_RWContact_RWP_WL3          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.intern (                   $F_RWContact_RWP_WL3          ) = ''                      ! Internal state
force.preld.calc (       10 ,       $F_RWContact_RWP_WL3          ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_RWContact_RWP_WL3          ) = 1.0000000000000000E+00  ! [-] Rail-Wheel Contact Element
force.par (               2 ,       $F_RWContact_RWP_WL3          ) = $RWP_WL3                ! [-] Rail-Wheel Pair
force.par (              10 ,       $F_RWContact_RWP_WL3          ) = 5.6798431176248123E+04  ! [N] Nominal preload
force.attr.2d.pos.x (     1 ,       $F_RWContact_RWP_WL3          ) = -2360
force.attr.2d.pos.y (     1 ,       $F_RWContact_RWP_WL3          ) = -20
force.attr.2d.ori (       1 ,       $F_RWContact_RWP_WL3          ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_RWContact_RWP_WL3) = -2250, -2250, -2243, -2243, -2243, -2243, -2243, -2243, -2253, -2263, -2273, -2283, -2293, -2303, -2313, -2313, -2313, -2323, -2333, -2343
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_RWContact_RWP_WL3) = -160, -150, -150, -40, -30, -20, -10, 0, 0, 0, 0, 0, 0, 0, 0, -10, -20, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_RWContact_RWP_WL3 ) = -5100, -5100, -2407, -2407, -2407, -2397, -2387, -2377
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_RWContact_RWP_WL3 ) = -20, -40, -40, -30, -20, -20, -20, -20

force.type (                        $F_RWContact_RWP_WR3_Copy_1   ) = 78                      ! Type
force.from (                        $F_RWContact_RWP_WR3_Copy_1   ) = $M_B_Isys_ProfRef_RWP_WR3_Copy_1 ! From Marker
force.to (                          $F_RWContact_RWP_WR3_Copy_1   ) = $M_B_wheelset4_ProfRef_RWP_WR3_Copy_1 ! To Marker
force.st.desc (           1 ,       $F_RWContact_RWP_WR3_Copy_1   ) = 4.8502924217957405E-05  ! Descriptive states
force.st.desc (           2 ,       $F_RWContact_RWP_WR3_Copy_1   ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           3 ,       $F_RWContact_RWP_WR3_Copy_1   ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           4 ,       $F_RWContact_RWP_WR3_Copy_1   ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           5 ,       $F_RWContact_RWP_WR3_Copy_1   ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           6 ,       $F_RWContact_RWP_WR3_Copy_1   ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           7 ,       $F_RWContact_RWP_WR3_Copy_1   ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           8 ,       $F_RWContact_RWP_WR3_Copy_1   ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           9 ,       $F_RWContact_RWP_WR3_Copy_1   ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          10 ,       $F_RWContact_RWP_WR3_Copy_1   ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          11 ,       $F_RWContact_RWP_WR3_Copy_1   ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          12 ,       $F_RWContact_RWP_WR3_Copy_1   ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          13 ,       $F_RWContact_RWP_WR3_Copy_1   ) = 0.0000000000000000E+00  ! Descriptive states
force.st.intern (                   $F_RWContact_RWP_WR3_Copy_1   ) = ''                      ! Internal state
force.preld.calc (       10 ,       $F_RWContact_RWP_WR3_Copy_1   ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_RWContact_RWP_WR3_Copy_1   ) = 1.0000000000000000E+00  ! [-] Rail-Wheel Contact Element
force.par (               2 ,       $F_RWContact_RWP_WR3_Copy_1   ) = $RWP_WR4                ! [-] Rail-Wheel Pair
force.par (              10 ,       $F_RWContact_RWP_WR3_Copy_1   ) = 5.6798431176251579E+04  ! [N] Nominal preload
force.attr.2d.pos.x (     1 ,       $F_RWContact_RWP_WR3_Copy_1   ) = -2640
force.attr.2d.pos.y (     1 ,       $F_RWContact_RWP_WR3_Copy_1   ) = -20
force.attr.2d.ori (       1 ,       $F_RWContact_RWP_WR3_Copy_1   ) = 90
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_RWContact_RWP_WR3_Copy_1) = -2640, -2640
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_RWContact_RWP_WR3_Copy_1) = -160, -37
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_RWContact_RWP_WR3_Copy_1) = -5190, -5190, -2640, -2640
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_RWContact_RWP_WR3_Copy_1) = 10, 20, 20, -3

force.type (                        $F_RWContact_RWP_WL4          ) = 78                      ! Type
force.from (                        $F_RWContact_RWP_WL4          ) = $M_B_Isys_ProfRef_RWP_WL4 ! From Marker
force.to (                          $F_RWContact_RWP_WL4          ) = $M_B_wheelset4_ProfRef_RWP_WL4 ! To Marker
force.st.desc (           1 ,       $F_RWContact_RWP_WL4          ) = 4.8502924226147414E-05  ! Descriptive states
force.st.desc (           2 ,       $F_RWContact_RWP_WL4          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           3 ,       $F_RWContact_RWP_WL4          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           4 ,       $F_RWContact_RWP_WL4          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           5 ,       $F_RWContact_RWP_WL4          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           6 ,       $F_RWContact_RWP_WL4          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           7 ,       $F_RWContact_RWP_WL4          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           8 ,       $F_RWContact_RWP_WL4          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (           9 ,       $F_RWContact_RWP_WL4          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          10 ,       $F_RWContact_RWP_WL4          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          11 ,       $F_RWContact_RWP_WL4          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          12 ,       $F_RWContact_RWP_WL4          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.desc (          13 ,       $F_RWContact_RWP_WL4          ) = 0.0000000000000000E+00  ! Descriptive states
force.st.intern (                   $F_RWContact_RWP_WL4          ) = ''                      ! Internal state
force.preld.calc (       10 ,       $F_RWContact_RWP_WL4          ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_RWContact_RWP_WL4          ) = 1.0000000000000000E+00  ! [-] Rail-Wheel Contact Element
force.par (               2 ,       $F_RWContact_RWP_WL4          ) = $RWP_WL4                ! [-] Rail-Wheel Pair
force.par (              10 ,       $F_RWContact_RWP_WL4          ) = 5.6798431176288803E+04  ! [N] Nominal preload
force.attr.2d.pos.x (     1 ,       $F_RWContact_RWP_WL4          ) = -2430
force.attr.2d.pos.y (     1 ,       $F_RWContact_RWP_WL4          ) = -20
force.attr.2d.ori (       1 ,       $F_RWContact_RWP_WL4          ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_RWContact_RWP_WL4) = -2230, -2230, -2243, -2243, -2243, -2243, -2243, -2243, -2253, -2263, -2273, -2283, -2293, -2303, -2313, -2323, -2333, -2343, -2353, -2363, -2373, -2383, -2383, -2383, -2393, -2403, -2413
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_RWContact_RWP_WL4) = -160, -150, -150, -40, -30, -20, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, -20, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_RWContact_RWP_WL4 ) = -5200, -5200, -2467, -2467, -2467, -2457, -2447
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_RWContact_RWP_WL4 ) = -20, -40, -40, -30, -20, -20, -20

force.type (                        $F_load_Fu                    ) = 93                      ! Type
force.from (                        $F_load_Fu                    ) = $M_Isys_load_Fu         ! From Marker
force.to (                          $F_load_Fu                    ) = $M_Carbody_load         ! To Marker
force.st.intern (                   $F_load_Fu                    ) = ''                      ! Internal state
force.par (               1 ,       $F_load_Fu                    ) = null                    ! [-] u-Vector Element force x
force.par (               2 ,       $F_load_Fu                    ) = $UE_windload_Fu_Value   ! [-] u-Vector Element force y
force.par (               3 ,       $F_load_Fu                    ) = $UE_wingload_Fw_Value   ! [-] u-Vector Element force z
force.par (               4 ,       $F_load_Fu                    ) = $UE_windload_Fm_Value   ! [-] u-Vector Element torque x
force.par (               5 ,       $F_load_Fu                    ) = null                    ! [-] u-Vector Element torque y
force.par (               6 ,       $F_load_Fu                    ) = null                    ! [-] u-Vector Element torque z
force.attr.2d.pos.x (     1 ,       $F_load_Fu                    ) = -760
force.attr.2d.pos.y (     1 ,       $F_load_Fu                    ) = -20
force.attr.2d.ori (       1 ,       $F_load_Fu                    ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_load_Fu         ) = -260, -713, -713, -713, -723, -733, -743
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_load_Fu         ) = -40, -40, -30, -20, -20, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_load_Fu           ) = -110, -120, -120, -124.330810546875, -137.3232421875, -154.646484375, -166.1953125, -181.59375, -366.375, -448.5, -777, -777, -777, -777, -777, -787, -787, -777
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_load_Fu           ) = -30, -30, -50, -50, -50, -50, -50, -50, -50, -50, -50, -40, -30, -20, -10, -10, -20, -20

!**********************************************************************
! Control Elements
!**********************************************************************
control.type (                      $C_accelerometer              ) = 167                     ! Type
control.st.alg (          1 ,       $C_accelerometer              ) = 0.0000000000000000E+00  ! Algebraic States
control.st.alg (          2 ,       $C_accelerometer              ) = 0.0000000000000000E+00  ! Algebraic States
control.st.alg (          3 ,       $C_accelerometer              ) = 0.0000000000000000E+00  ! Algebraic States
control.st.intern (                 $C_accelerometer              ) = ''                      ! Internal State
control.par (             2 ,       $C_accelerometer              ) = $M_Carbody_BRF          ! [-] Measurement Marker
control.par (             5 ,       $C_accelerometer              ) = 0.0000000000000000E+00  ! [-] Feedback method

!**********************************************************************
! Input Functions
!**********************************************************************
ifctn.type (                        $I_PS_Damping                 ) = 1                       ! Type
ifctn.datatype (                    $I_PS_Damping                 ) = 1                       ! Datatype
ifctn.x (                 1 ,       $I_PS_Damping                 ) = -2.9999999999999999E-01 ! X values
ifctn.x (                 2 ,       $I_PS_Damping                 ) = -1.0000000000000001E-01 ! X values
ifctn.x (                 4 ,       $I_PS_Damping                 ) = 1.0000000000000001E-01  ! X values
ifctn.x (                 5 ,       $I_PS_Damping                 ) = 2.9999999999999999E-01  ! X values
ifctn.y (                 1 ,       $I_PS_Damping                 ) = -4.9000000000000000E+03 ! Y values
ifctn.y (                 2 ,       $I_PS_Damping                 ) = -1.9600000000000000E+03 ! Y values
ifctn.y (                 4 ,       $I_PS_Damping                 ) = 1.9600000000000000E+03  ! Y values
ifctn.y (                 5 ,       $I_PS_Damping                 ) = 4.9000000000000000E+03  ! Y values
ifctn.intpol.type (                 $I_PS_Damping                 ) = 2                       ! Interpolation type
ifctn.range.handling (              $I_PS_Damping                 ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

ifctn.type (                        $I_SS_KSX                     ) = 1                       ! Type
ifctn.datatype (                    $I_SS_KSX                     ) = 1                       ! Datatype
ifctn.x (                 1 ,       $I_SS_KSX                     ) = -2.0000000000000001E-01 ! X values
ifctn.x (                 2 ,       $I_SS_KSX                     ) = -4.0000000000000001E-03 ! X values
ifctn.x (                 4 ,       $I_SS_KSX                     ) = 4.0000000000000001E-03  ! X values
ifctn.x (                 5 ,       $I_SS_KSX                     ) = 2.0000000000000001E-01  ! X values
ifctn.y (                 1 ,       $I_SS_KSX                     ) = -1.9600000000000000E+04 ! Y values
ifctn.y (                 2 ,       $I_SS_KSX                     ) = -9.8100000000000000E+03 ! Y values
ifctn.y (                 4 ,       $I_SS_KSX                     ) = 9.8100000000000000E+03  ! Y values
ifctn.y (                 5 ,       $I_SS_KSX                     ) = 1.9600000000000000E+04  ! Y values
ifctn.intpol.type (                 $I_SS_KSX                     ) = 2                       ! Interpolation type
ifctn.range.handling (              $I_SS_KSX                     ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

ifctn.type (                        $I_SS_HX                      ) = 1                       ! Type
ifctn.datatype (                    $I_SS_HX                      ) = 1                       ! Datatype
ifctn.x (                 1 ,       $I_SS_HX                      ) = -2.9999999999999999E-01 ! X values
ifctn.x (                 2 ,       $I_SS_HX                      ) = -1.0000000000000001E-01 ! X values
ifctn.x (                 4 ,       $I_SS_HX                      ) = 1.0000000000000001E-01  ! X values
ifctn.x (                 5 ,       $I_SS_HX                      ) = 2.9999999999999999E-01  ! X values
ifctn.y (                 1 ,       $I_SS_HX                      ) = -1.0800000000000000E+04 ! Y values
ifctn.y (                 2 ,       $I_SS_HX                      ) = -5.8800000000000000E+03 ! Y values
ifctn.y (                 4 ,       $I_SS_HX                      ) = 5.8800000000000000E+03  ! Y values
ifctn.y (                 5 ,       $I_SS_HX                      ) = 1.0800000000000000E+04  ! Y values
ifctn.intpol.type (                 $I_SS_HX                      ) = 2                       ! Interpolation type
ifctn.range.handling (              $I_SS_HX                      ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

ifctn.type (                        $I_ZD                         ) = 1                       ! Type
ifctn.datatype (                    $I_ZD                         ) = 1                       ! Datatype
ifctn.x (                 1 ,       $I_ZD                         ) = -4.8000000000000001E-02 ! X values
ifctn.x (                 2 ,       $I_ZD                         ) = -4.3999999999999997E-02 ! X values
ifctn.x (                 3 ,       $I_ZD                         ) = -3.7999999999999999E-02 ! X values
ifctn.x (                 4 ,       $I_ZD                         ) = -3.2000000000000001E-02 ! X values
ifctn.x (                 5 ,       $I_ZD                         ) = -2.5999999999999999E-02 ! X values
ifctn.x (                 6 ,       $I_ZD                         ) = -2.0000000000000000E-02 ! X values
ifctn.x (                 7 ,       $I_ZD                         ) = -1.0000000000000000E-02 ! X values
ifctn.x (                 8 ,       $I_ZD                         ) = 0.0000000000000000E+00  ! X values
ifctn.y (                 1 ,       $I_ZD                         ) = 4.9000000000000000E+04  ! Y values
ifctn.y (                 2 ,       $I_ZD                         ) = 2.5500000000000000E+04  ! Y values
ifctn.y (                 3 ,       $I_ZD                         ) = 1.1000000000000000E+04  ! Y values
ifctn.y (                 4 ,       $I_ZD                         ) = 5.0000000000000000E+03  ! Y values
ifctn.y (                 5 ,       $I_ZD                         ) = 2.0000000000000000E+03  ! Y values
ifctn.intpol.type (                 $I_ZD                         ) = 3                       ! Interpolation type

ifctn.type (                        $I_ZDr                        ) = 1                       ! Type
ifctn.datatype (                    $I_ZDr                        ) = 1                       ! Datatype
ifctn.x (                 2 ,       $I_ZDr                        ) = 1.0000000000000000E-02  ! X values
ifctn.x (                 3 ,       $I_ZDr                        ) = 2.0000000000000000E-02  ! X values
ifctn.x (                 4 ,       $I_ZDr                        ) = 2.5999999999999999E-02  ! X values
ifctn.x (                 5 ,       $I_ZDr                        ) = 3.2000000000000001E-02  ! X values
ifctn.x (                 6 ,       $I_ZDr                        ) = 3.7999999999999999E-02  ! X values
ifctn.x (                 7 ,       $I_ZDr                        ) = 4.3999999999999997E-02  ! X values
ifctn.x (                 8 ,       $I_ZDr                        ) = 4.8000000000000001E-02  ! X values
ifctn.y (                 4 ,       $I_ZDr                        ) = -2.0000000000000000E+03 ! Y values
ifctn.y (                 5 ,       $I_ZDr                        ) = -5.0000000000000000E+03 ! Y values
ifctn.y (                 6 ,       $I_ZDr                        ) = -1.1000000000000000E+04 ! Y values
ifctn.y (                 7 ,       $I_ZDr                        ) = -2.5500000000000000E+04 ! Y values
ifctn.y (                 8 ,       $I_ZDr                        ) = -4.9000000000000000E+04 ! Y values
ifctn.intpol.type (                 $I_ZDr                        ) = 3                       ! Interpolation type

ifctn.type (                        $I_BS                         ) = 1                       ! Type
ifctn.datatype (                    $I_BS                         ) = 1                       ! Datatype
ifctn.x (                 1 ,       $I_BS                         ) = -4.8000000000000001E-02 ! X values
ifctn.x (                 2 ,       $I_BS                         ) = -4.3999999999999997E-02 ! X values
ifctn.x (                 3 ,       $I_BS                         ) = -3.7999999999999999E-02 ! X values
ifctn.x (                 4 ,       $I_BS                         ) = -3.2000000000000001E-02 ! X values
ifctn.x (                 5 ,       $I_BS                         ) = -2.5999999999999999E-02 ! X values
ifctn.x (                 6 ,       $I_BS                         ) = -2.0000000000000000E-02 ! X values
ifctn.x (                 8 ,       $I_BS                         ) = 2.0000000000000000E-02  ! X values
ifctn.x (                 9 ,       $I_BS                         ) = 2.5999999999999999E-02  ! X values
ifctn.x (                10 ,       $I_BS                         ) = 3.2000000000000001E-02  ! X values
ifctn.x (                11 ,       $I_BS                         ) = 3.7999999999999999E-02  ! X values
ifctn.x (                12 ,       $I_BS                         ) = 4.3999999999999997E-02  ! X values
ifctn.x (                13 ,       $I_BS                         ) = 4.8000000000000001E-02  ! X values
ifctn.y (                 1 ,       $I_BS                         ) = -4.9000000000000000E+04 ! Y values
ifctn.y (                 2 ,       $I_BS                         ) = -2.5500000000000000E+04 ! Y values
ifctn.y (                 3 ,       $I_BS                         ) = -1.1000000000000000E+04 ! Y values
ifctn.y (                 4 ,       $I_BS                         ) = -5.0000000000000000E+03 ! Y values
ifctn.y (                 5 ,       $I_BS                         ) = -2.0000000000000000E+03 ! Y values
ifctn.y (                 9 ,       $I_BS                         ) = 2.0000000000000000E+03  ! Y values
ifctn.y (                10 ,       $I_BS                         ) = 5.0000000000000000E+03  ! Y values
ifctn.y (                11 ,       $I_BS                         ) = 1.1000000000000000E+04  ! Y values
ifctn.y (                12 ,       $I_BS                         ) = 2.5500000000000000E+04  ! Y values
ifctn.y (                13 ,       $I_BS                         ) = 4.9000000000000000E+04  ! Y values
ifctn.intpol.type (                 $I_BS                         ) = 2                       ! Interpolation type
ifctn.range.handling (              $I_BS                         ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

ifctn.type (                        $I_SS_KSX2                    ) = 1                       ! Type
ifctn.datatype (                    $I_SS_KSX2                    ) = 1                       ! Datatype
ifctn.x (                 1 ,       $I_SS_KSX2                    ) = -2.0000000000000001E-01 ! X values
ifctn.x (                 2 ,       $I_SS_KSX2                    ) = -4.0000000000000001E-02 ! X values
ifctn.x (                 4 ,       $I_SS_KSX2                    ) = 4.0000000000000001E-02  ! X values
ifctn.x (                 5 ,       $I_SS_KSX2                    ) = 2.0000000000000001E-01  ! X values
ifctn.y (                 1 ,       $I_SS_KSX2                    ) = -1.9600000000000000E+04 ! Y values
ifctn.y (                 2 ,       $I_SS_KSX2                    ) = -1.3200000000000000E+04 ! Y values
ifctn.y (                 4 ,       $I_SS_KSX2                    ) = 1.3200000000000000E+04  ! Y values
ifctn.y (                 5 ,       $I_SS_KSX2                    ) = 1.9600000000000000E+04  ! Y values
ifctn.intpol.type (                 $I_SS_KSX2                    ) = 2                       ! Interpolation type
ifctn.range.handling (              $I_SS_KSX2                    ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

ifctn.x (                 1 ,       $I_windload_fu                ) = 1.0000000000000000E+00  ! X values
ifctn.x (                 2 ,       $I_windload_fu                ) = 2.0000000000000000E+00  ! X values
ifctn.x (                 3 ,       $I_windload_fu                ) = 3.0000000000000000E+00  ! X values
ifctn.x (                 4 ,       $I_windload_fu                ) = 4.0000000000000000E+00  ! X values
ifctn.x (                 5 ,       $I_windload_fu                ) = 5.0000000000000000E+00  ! X values
ifctn.x (                 6 ,       $I_windload_fu                ) = 6.0000000000000000E+00  ! X values
ifctn.x (                 7 ,       $I_windload_fu                ) = 7.0000000000000000E+00  ! X values
ifctn.x (                 8 ,       $I_windload_fu                ) = 8.0000000000000000E+00  ! X values
ifctn.x (                 9 ,       $I_windload_fu                ) = 9.0000000000000000E+00  ! X values
ifctn.x (                10 ,       $I_windload_fu                ) = 1.0000000000000000E+01  ! X values
ifctn.x (                11 ,       $I_windload_fu                ) = 1.1000000000000000E+01  ! X values
ifctn.x (                12 ,       $I_windload_fu                ) = 1.2000000000000000E+01  ! X values
ifctn.x (                13 ,       $I_windload_fu                ) = 1.3000000000000000E+01  ! X values
ifctn.x (                14 ,       $I_windload_fu                ) = 1.4000000000000000E+01  ! X values
ifctn.x (                15 ,       $I_windload_fu                ) = 1.5000000000000000E+01  ! X values
ifctn.x (                16 ,       $I_windload_fu                ) = 1.6000000000000000E+01  ! X values
ifctn.x (                17 ,       $I_windload_fu                ) = 1.7000000000000000E+01  ! X values
ifctn.x (                18 ,       $I_windload_fu                ) = 1.8000000000000000E+01  ! X values
ifctn.x (                19 ,       $I_windload_fu                ) = 1.9000000000000000E+01  ! X values
ifctn.x (                20 ,       $I_windload_fu                ) = 2.0000000000000000E+01  ! X values
ifctn.x (                21 ,       $I_windload_fu                ) = 2.1000000000000000E+01  ! X values
ifctn.x (                22 ,       $I_windload_fu                ) = 2.2000000000000000E+01  ! X values
ifctn.x (                23 ,       $I_windload_fu                ) = 2.3000000000000000E+01  ! X values
ifctn.x (                24 ,       $I_windload_fu                ) = 2.4000000000000000E+01  ! X values
ifctn.x (                25 ,       $I_windload_fu                ) = 2.5000000000000000E+01  ! X values
ifctn.x (                26 ,       $I_windload_fu                ) = 2.6000000000000000E+01  ! X values
ifctn.x (                27 ,       $I_windload_fu                ) = 2.7000000000000000E+01  ! X values
ifctn.x (                28 ,       $I_windload_fu                ) = 2.8000000000000000E+01  ! X values
ifctn.x (                29 ,       $I_windload_fu                ) = 2.9000000000000000E+01  ! X values
ifctn.x (                30 ,       $I_windload_fu                ) = 3.0000000000000000E+01  ! X values
ifctn.x (                31 ,       $I_windload_fu                ) = 3.1000000000000000E+01  ! X values
ifctn.x (                32 ,       $I_windload_fu                ) = 3.2000000000000000E+01  ! X values
ifctn.x (                33 ,       $I_windload_fu                ) = 3.3000000000000000E+01  ! X values
ifctn.x (                34 ,       $I_windload_fu                ) = 3.4000000000000000E+01  ! X values
ifctn.x (                35 ,       $I_windload_fu                ) = 3.5000000000000000E+01  ! X values
ifctn.x (                36 ,       $I_windload_fu                ) = 3.6000000000000000E+01  ! X values
ifctn.x (                37 ,       $I_windload_fu                ) = 3.7000000000000000E+01  ! X values
ifctn.x (                38 ,       $I_windload_fu                ) = 3.8000000000000000E+01  ! X values
ifctn.x (                39 ,       $I_windload_fu                ) = 3.9000000000000000E+01  ! X values
ifctn.x (                40 ,       $I_windload_fu                ) = 4.0000000000000000E+01  ! X values
ifctn.x (                41 ,       $I_windload_fu                ) = 4.1000000000000000E+01  ! X values
ifctn.x (                42 ,       $I_windload_fu                ) = 4.2000000000000000E+01  ! X values
ifctn.x (                43 ,       $I_windload_fu                ) = 4.3000000000000000E+01  ! X values
ifctn.x (                44 ,       $I_windload_fu                ) = 4.4000000000000000E+01  ! X values
ifctn.x (                45 ,       $I_windload_fu                ) = 4.5000000000000000E+01  ! X values
ifctn.x (                46 ,       $I_windload_fu                ) = 4.6000000000000000E+01  ! X values
ifctn.x (                47 ,       $I_windload_fu                ) = 4.7000000000000000E+01  ! X values
ifctn.x (                48 ,       $I_windload_fu                ) = 4.8000000000000000E+01  ! X values
ifctn.x (                49 ,       $I_windload_fu                ) = 4.9000000000000000E+01  ! X values
ifctn.x (                50 ,       $I_windload_fu                ) = 5.0000000000000000E+01  ! X values
ifctn.x (                51 ,       $I_windload_fu                ) = 5.1000000000000000E+01  ! X values
ifctn.x (                52 ,       $I_windload_fu                ) = 5.2000000000000000E+01  ! X values
ifctn.x (                53 ,       $I_windload_fu                ) = 5.3000000000000000E+01  ! X values
ifctn.x (                54 ,       $I_windload_fu                ) = 5.4000000000000000E+01  ! X values
ifctn.x (                55 ,       $I_windload_fu                ) = 5.5000000000000000E+01  ! X values
ifctn.x (                56 ,       $I_windload_fu                ) = 5.6000000000000000E+01  ! X values
ifctn.x (                57 ,       $I_windload_fu                ) = 5.7000000000000000E+01  ! X values
ifctn.x (                58 ,       $I_windload_fu                ) = 5.8000000000000000E+01  ! X values
ifctn.x (                59 ,       $I_windload_fu                ) = 5.9000000000000000E+01  ! X values
ifctn.x (                60 ,       $I_windload_fu                ) = 6.0000000000000000E+01  ! X values
ifctn.x (                61 ,       $I_windload_fu                ) = 6.1000000000000000E+01  ! X values
ifctn.x (                62 ,       $I_windload_fu                ) = 6.2000000000000000E+01  ! X values
ifctn.x (                63 ,       $I_windload_fu                ) = 6.3000000000000000E+01  ! X values
ifctn.x (                64 ,       $I_windload_fu                ) = 6.4000000000000000E+01  ! X values
ifctn.x (                65 ,       $I_windload_fu                ) = 6.5000000000000000E+01  ! X values
ifctn.x (                66 ,       $I_windload_fu                ) = 6.6000000000000000E+01  ! X values
ifctn.x (                67 ,       $I_windload_fu                ) = 6.7000000000000000E+01  ! X values
ifctn.x (                68 ,       $I_windload_fu                ) = 6.8000000000000000E+01  ! X values
ifctn.x (                69 ,       $I_windload_fu                ) = 6.9000000000000000E+01  ! X values
ifctn.x (                70 ,       $I_windload_fu                ) = 7.0000000000000000E+01  ! X values
ifctn.x (                71 ,       $I_windload_fu                ) = 7.1000000000000000E+01  ! X values
ifctn.x (                72 ,       $I_windload_fu                ) = 7.2000000000000000E+01  ! X values
ifctn.x (                73 ,       $I_windload_fu                ) = 7.3000000000000000E+01  ! X values
ifctn.x (                74 ,       $I_windload_fu                ) = 7.4000000000000000E+01  ! X values
ifctn.x (                75 ,       $I_windload_fu                ) = 7.5000000000000000E+01  ! X values
ifctn.x (                76 ,       $I_windload_fu                ) = 7.6000000000000000E+01  ! X values
ifctn.x (                77 ,       $I_windload_fu                ) = 7.7000000000000000E+01  ! X values
ifctn.x (                78 ,       $I_windload_fu                ) = 7.8000000000000000E+01  ! X values
ifctn.x (                79 ,       $I_windload_fu                ) = 7.9000000000000000E+01  ! X values
ifctn.x (                80 ,       $I_windload_fu                ) = 8.0000000000000000E+01  ! X values
ifctn.x (                81 ,       $I_windload_fu                ) = 8.1000000000000000E+01  ! X values
ifctn.x (                82 ,       $I_windload_fu                ) = 8.2000000000000000E+01  ! X values
ifctn.x (                83 ,       $I_windload_fu                ) = 8.3000000000000000E+01  ! X values
ifctn.x (                84 ,       $I_windload_fu                ) = 8.4000000000000000E+01  ! X values
ifctn.x (                85 ,       $I_windload_fu                ) = 8.5000000000000000E+01  ! X values
ifctn.x (                86 ,       $I_windload_fu                ) = 8.6000000000000000E+01  ! X values
ifctn.x (                87 ,       $I_windload_fu                ) = 8.7000000000000000E+01  ! X values
ifctn.x (                88 ,       $I_windload_fu                ) = 8.8000000000000000E+01  ! X values
ifctn.x (                89 ,       $I_windload_fu                ) = 8.9000000000000000E+01  ! X values
ifctn.x (                90 ,       $I_windload_fu                ) = 9.0000000000000000E+01  ! X values
ifctn.x (                91 ,       $I_windload_fu                ) = 9.1000000000000000E+01  ! X values
ifctn.x (                92 ,       $I_windload_fu                ) = 9.2000000000000000E+01  ! X values
ifctn.x (                93 ,       $I_windload_fu                ) = 9.3000000000000000E+01  ! X values
ifctn.x (                94 ,       $I_windload_fu                ) = 9.4000000000000000E+01  ! X values
ifctn.x (                95 ,       $I_windload_fu                ) = 9.5000000000000000E+01  ! X values
ifctn.x (                96 ,       $I_windload_fu                ) = 9.6000000000000000E+01  ! X values
ifctn.x (                97 ,       $I_windload_fu                ) = 9.7000000000000000E+01  ! X values
ifctn.x (                98 ,       $I_windload_fu                ) = 9.8000000000000000E+01  ! X values
ifctn.x (                99 ,       $I_windload_fu                ) = 9.9000000000000000E+01  ! X values
ifctn.x (               100 ,       $I_windload_fu                ) = 1.0000000000000000E+02  ! X values
ifctn.y (                 1 ,       $I_windload_fu                ) = -3.5321312638934200E+04 ! Y values
ifctn.y (                 2 ,       $I_windload_fu                ) = 7.0822167531424799E+04  ! Y values
ifctn.y (                 3 ,       $I_windload_fu                ) = -2.9737351042745500E+04 ! Y values
ifctn.y (                 4 ,       $I_windload_fu                ) = -2.3050081134792399E+04 ! Y values
ifctn.y (                 5 ,       $I_windload_fu                ) = 7.8358556449831507E+04  ! Y values
ifctn.y (                 6 ,       $I_windload_fu                ) = -3.6583386855245597E+04 ! Y values
ifctn.y (                 7 ,       $I_windload_fu                ) = -3.3749509823184599E+04 ! Y values
ifctn.y (                 8 ,       $I_windload_fu                ) = -9.1655865545263696E+03 ! Y values
ifctn.y (                 9 ,       $I_windload_fu                ) = 5.0691807076329504E+04  ! Y values
ifctn.y (                10 ,       $I_windload_fu                ) = -1.8653369600698200E+03 ! Y values
ifctn.y (                11 ,       $I_windload_fu                ) = -1.2637803920521399E+05 ! Y values
ifctn.y (                12 ,       $I_windload_fu                ) = -7.0130025670087898E+03 ! Y values
ifctn.y (                13 ,       $I_windload_fu                ) = -1.4904196426252300E+04 ! Y values
ifctn.y (                14 ,       $I_windload_fu                ) = -8.2247417869574201E+04 ! Y values
ifctn.y (                15 ,       $I_windload_fu                ) = -2.1232992898100099E+04 ! Y values
ifctn.y (                16 ,       $I_windload_fu                ) = -1.9396270052361200E+04 ! Y values
ifctn.y (                17 ,       $I_windload_fu                ) = -5.5918996383753198E+04 ! Y values
ifctn.y (                18 ,       $I_windload_fu                ) = -1.6560725808237799E+05 ! Y values
ifctn.y (                19 ,       $I_windload_fu                ) = -5.3019537954085899E+04 ! Y values
ifctn.y (                20 ,       $I_windload_fu                ) = -2.2749187658371400E+04 ! Y values
ifctn.y (                21 ,       $I_windload_fu                ) = -9.8001755151781806E+04 ! Y values
ifctn.y (                22 ,       $I_windload_fu                ) = 1.1730229707445300E+04  ! Y values
ifctn.y (                23 ,       $I_windload_fu                ) = 1.4549093069379600E+04  ! Y values
ifctn.y (                24 ,       $I_windload_fu                ) = -5.4585953787946797E+04 ! Y values
ifctn.y (                25 ,       $I_windload_fu                ) = -4.4569920934400201E+04 ! Y values
ifctn.y (                26 ,       $I_windload_fu                ) = 1.3248605957141501E+05  ! Y values
ifctn.y (                27 ,       $I_windload_fu                ) = -2.0180570915198401E+04 ! Y values
ifctn.y (                28 ,       $I_windload_fu                ) = 2.9492147993232000E+04  ! Y values
ifctn.y (                29 ,       $I_windload_fu                ) = -1.6648603449831400E+04 ! Y values
ifctn.y (                30 ,       $I_windload_fu                ) = -5.2916254874947699E+04 ! Y values
ifctn.y (                31 ,       $I_windload_fu                ) = -2.8667179163653500E+03 ! Y values
ifctn.y (                32 ,       $I_windload_fu                ) = 7.3951985342028405E+04  ! Y values
ifctn.y (                33 ,       $I_windload_fu                ) = -1.3985113217731499E+04 ! Y values
ifctn.y (                34 ,       $I_windload_fu                ) = -1.1761250068697600E+04 ! Y values
ifctn.y (                35 ,       $I_windload_fu                ) = -2.5589350189721899E+04 ! Y values
ifctn.y (                36 ,       $I_windload_fu                ) = 8.0065690688978604E+04  ! Y values
ifctn.y (                37 ,       $I_windload_fu                ) = 5.1693745101317298E+04  ! Y values
ifctn.y (                38 ,       $I_windload_fu                ) = -1.0418649564701600E+05 ! Y values
ifctn.y (                39 ,       $I_windload_fu                ) = -1.9104282353254701E+04 ! Y values
ifctn.y (                40 ,       $I_windload_fu                ) = -1.2070418263177700E+04 ! Y values
ifctn.y (                41 ,       $I_windload_fu                ) = -7.4815849054975493E+04 ! Y values
ifctn.y (                42 ,       $I_windload_fu                ) = -1.0715728737963400E+04 ! Y values
ifctn.y (                43 ,       $I_windload_fu                ) = 1.3964195649772000E+04  ! Y values
ifctn.y (                44 ,       $I_windload_fu                ) = -6.5301148384764601E+04 ! Y values
ifctn.y (                45 ,       $I_windload_fu                ) = 3.0092545840186001E+04  ! Y values
ifctn.y (                46 ,       $I_windload_fu                ) = 1.9272940953768000E+04  ! Y values
ifctn.y (                47 ,       $I_windload_fu                ) = 2.5381662326739199E+04  ! Y values
ifctn.y (                48 ,       $I_windload_fu                ) = 5.3327327669266997E+04  ! Y values
ifctn.y (                49 ,       $I_windload_fu                ) = 9.2963584757075496E+03  ! Y values
ifctn.y (                50 ,       $I_windload_fu                ) = 3.2105217046648500E+04  ! Y values
ifctn.y (                51 ,       $I_windload_fu                ) = -4.1425361926006199E+03 ! Y values
ifctn.y (                52 ,       $I_windload_fu                ) = -5.4853187575889700E+04 ! Y values
ifctn.y (                53 ,       $I_windload_fu                ) = -3.6566489750355402E+04 ! Y values
ifctn.y (                54 ,       $I_windload_fu                ) = -4.1074509686036399E+04 ! Y values
ifctn.y (                55 ,       $I_windload_fu                ) = -7.5254627633240198E+03 ! Y values
ifctn.y (                56 ,       $I_windload_fu                ) = 6.7334571069700096E+03  ! Y values
ifctn.y (                57 ,       $I_windload_fu                ) = 5.0729343791517003E+03  ! Y values
ifctn.y (                58 ,       $I_windload_fu                ) = -1.0604481616101800E+03 ! Y values
ifctn.y (                59 ,       $I_windload_fu                ) = -3.2378723611962800E+04 ! Y values
ifctn.y (                60 ,       $I_windload_fu                ) = -8.9392807349435498E+03 ! Y values
ifctn.y (                61 ,       $I_windload_fu                ) = -5.6689393169303097E+04 ! Y values
ifctn.y (                62 ,       $I_windload_fu                ) = -5.1080896556001397E+04 ! Y values
ifctn.y (                63 ,       $I_windload_fu                ) = -1.6753376018742001E+04 ! Y values
ifctn.y (                64 ,       $I_windload_fu                ) = 2.3073940787337699E+04  ! Y values
ifctn.y (                65 ,       $I_windload_fu                ) = -6.4244346844399501E+04 ! Y values
ifctn.y (                66 ,       $I_windload_fu                ) = 6.6334379914601406E+04  ! Y values
ifctn.y (                67 ,       $I_windload_fu                ) = -5.6588409662635197E+04 ! Y values
ifctn.y (                68 ,       $I_windload_fu                ) = 6.7629869560591993E+04  ! Y values
ifctn.y (                69 ,       $I_windload_fu                ) = 1.7222216526827000E+04  ! Y values
ifctn.y (                70 ,       $I_windload_fu                ) = -4.8981393323408502E+03 ! Y values
ifctn.y (                71 ,       $I_windload_fu                ) = 8.8747490188687603E+04  ! Y values
ifctn.y (                72 ,       $I_windload_fu                ) = -1.1827207406873900E+04 ! Y values
ifctn.y (                73 ,       $I_windload_fu                ) = 7.4823919853551604E+04  ! Y values
ifctn.y (                74 ,       $I_windload_fu                ) = 1.0299120918378299E+05  ! Y values
ifctn.y (                75 ,       $I_windload_fu                ) = -5.7087854397963201E+04 ! Y values
ifctn.y (                76 ,       $I_windload_fu                ) = -7.2577286522558003E+04 ! Y values
ifctn.y (                77 ,       $I_windload_fu                ) = 4.0409288691424001E+04  ! Y values
ifctn.y (                78 ,       $I_windload_fu                ) = -2.2363218694372601E+04 ! Y values
ifctn.y (                79 ,       $I_windload_fu                ) = -8.9613291939862494E+04 ! Y values
ifctn.y (                80 ,       $I_windload_fu                ) = -4.0787289148278498E+04 ! Y values
ifctn.y (                81 ,       $I_windload_fu                ) = -5.3615265218190298E+03 ! Y values
ifctn.y (                82 ,       $I_windload_fu                ) = 1.3070073910336199E+04  ! Y values
ifctn.y (                83 ,       $I_windload_fu                ) = -2.0607927932797698E+04 ! Y values
ifctn.y (                84 ,       $I_windload_fu                ) = -2.7094396390512498E+04 ! Y values
ifctn.y (                85 ,       $I_windload_fu                ) = -2.7999056570363002E+04 ! Y values
ifctn.y (                86 ,       $I_windload_fu                ) = 4.7956989415879601E+04  ! Y values
ifctn.y (                87 ,       $I_windload_fu                ) = 1.6370809734865499E+04  ! Y values
ifctn.y (                88 ,       $I_windload_fu                ) = -6.3507253155441103E+04 ! Y values
ifctn.y (                89 ,       $I_windload_fu                ) = 5.4100819071226600E+04  ! Y values
ifctn.y (                90 ,       $I_windload_fu                ) = -8.7061593577935892E+03 ! Y values
ifctn.y (                91 ,       $I_windload_fu                ) = 2.0558484869048702E+04  ! Y values
ifctn.y (                92 ,       $I_windload_fu                ) = -9.2680039969092104E+04 ! Y values
ifctn.y (                93 ,       $I_windload_fu                ) = 5.9792800796450801E+03  ! Y values
ifctn.y (                94 ,       $I_windload_fu                ) = -3.1720773615390699E+04 ! Y values
ifctn.y (                95 ,       $I_windload_fu                ) = -5.7372691743492302E+04 ! Y values
ifctn.y (                96 ,       $I_windload_fu                ) = -1.9211429051907900E+04 ! Y values
ifctn.y (                97 ,       $I_windload_fu                ) = 2.8047149183616399E+04  ! Y values
ifctn.y (                98 ,       $I_windload_fu                ) = 3.6649398690692401E+03  ! Y values
ifctn.y (                99 ,       $I_windload_fu                ) = 4.0783594499013801E+04  ! Y values
ifctn.y (               100 ,       $I_windload_fu                ) = 2.7548129900699802E+04  ! Y values
ifctn.scal.x (                      $I_windload_fu                ) = 2.5000000000000000E-01  ! Scaling factor
ifctn.intpol.type (                 $I_windload_fu                ) = 2                       ! Interpolation type
ifctn.range.handling (              $I_windload_fu                ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_windload_fu                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_windload_fu                ) = 1.0000000000000000E+02  ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_windload_fu                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_windload_fu                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_windload_fu                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_windload_fu                ) = 2.0000000000000000E+01  ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_windload_fu                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_windload_fu                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_windload_fu          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_windload_fu          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_windload_fu          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter

ifctn.x (                 1 ,       $I_windload_fw                ) = 1.0000000000000000E+00  ! X values
ifctn.x (                 2 ,       $I_windload_fw                ) = 2.0000000000000000E+00  ! X values
ifctn.x (                 3 ,       $I_windload_fw                ) = 3.0000000000000000E+00  ! X values
ifctn.x (                 4 ,       $I_windload_fw                ) = 4.0000000000000000E+00  ! X values
ifctn.x (                 5 ,       $I_windload_fw                ) = 5.0000000000000000E+00  ! X values
ifctn.x (                 6 ,       $I_windload_fw                ) = 6.0000000000000000E+00  ! X values
ifctn.x (                 7 ,       $I_windload_fw                ) = 7.0000000000000000E+00  ! X values
ifctn.x (                 8 ,       $I_windload_fw                ) = 8.0000000000000000E+00  ! X values
ifctn.x (                 9 ,       $I_windload_fw                ) = 9.0000000000000000E+00  ! X values
ifctn.x (                10 ,       $I_windload_fw                ) = 1.0000000000000000E+01  ! X values
ifctn.x (                11 ,       $I_windload_fw                ) = 1.1000000000000000E+01  ! X values
ifctn.x (                12 ,       $I_windload_fw                ) = 1.2000000000000000E+01  ! X values
ifctn.x (                13 ,       $I_windload_fw                ) = 1.3000000000000000E+01  ! X values
ifctn.x (                14 ,       $I_windload_fw                ) = 1.4000000000000000E+01  ! X values
ifctn.x (                15 ,       $I_windload_fw                ) = 1.5000000000000000E+01  ! X values
ifctn.x (                16 ,       $I_windload_fw                ) = 1.6000000000000000E+01  ! X values
ifctn.x (                17 ,       $I_windload_fw                ) = 1.7000000000000000E+01  ! X values
ifctn.x (                18 ,       $I_windload_fw                ) = 1.8000000000000000E+01  ! X values
ifctn.x (                19 ,       $I_windload_fw                ) = 1.9000000000000000E+01  ! X values
ifctn.x (                20 ,       $I_windload_fw                ) = 2.0000000000000000E+01  ! X values
ifctn.x (                21 ,       $I_windload_fw                ) = 2.1000000000000000E+01  ! X values
ifctn.x (                22 ,       $I_windload_fw                ) = 2.2000000000000000E+01  ! X values
ifctn.x (                23 ,       $I_windload_fw                ) = 2.3000000000000000E+01  ! X values
ifctn.x (                24 ,       $I_windload_fw                ) = 2.4000000000000000E+01  ! X values
ifctn.x (                25 ,       $I_windload_fw                ) = 2.5000000000000000E+01  ! X values
ifctn.x (                26 ,       $I_windload_fw                ) = 2.6000000000000000E+01  ! X values
ifctn.x (                27 ,       $I_windload_fw                ) = 2.7000000000000000E+01  ! X values
ifctn.x (                28 ,       $I_windload_fw                ) = 2.8000000000000000E+01  ! X values
ifctn.x (                29 ,       $I_windload_fw                ) = 2.9000000000000000E+01  ! X values
ifctn.x (                30 ,       $I_windload_fw                ) = 3.0000000000000000E+01  ! X values
ifctn.x (                31 ,       $I_windload_fw                ) = 3.1000000000000000E+01  ! X values
ifctn.x (                32 ,       $I_windload_fw                ) = 3.2000000000000000E+01  ! X values
ifctn.x (                33 ,       $I_windload_fw                ) = 3.3000000000000000E+01  ! X values
ifctn.x (                34 ,       $I_windload_fw                ) = 3.4000000000000000E+01  ! X values
ifctn.x (                35 ,       $I_windload_fw                ) = 3.5000000000000000E+01  ! X values
ifctn.x (                36 ,       $I_windload_fw                ) = 3.6000000000000000E+01  ! X values
ifctn.x (                37 ,       $I_windload_fw                ) = 3.7000000000000000E+01  ! X values
ifctn.x (                38 ,       $I_windload_fw                ) = 3.8000000000000000E+01  ! X values
ifctn.x (                39 ,       $I_windload_fw                ) = 3.9000000000000000E+01  ! X values
ifctn.x (                40 ,       $I_windload_fw                ) = 4.0000000000000000E+01  ! X values
ifctn.x (                41 ,       $I_windload_fw                ) = 4.1000000000000000E+01  ! X values
ifctn.x (                42 ,       $I_windload_fw                ) = 4.2000000000000000E+01  ! X values
ifctn.x (                43 ,       $I_windload_fw                ) = 4.3000000000000000E+01  ! X values
ifctn.x (                44 ,       $I_windload_fw                ) = 4.4000000000000000E+01  ! X values
ifctn.x (                45 ,       $I_windload_fw                ) = 4.5000000000000000E+01  ! X values
ifctn.x (                46 ,       $I_windload_fw                ) = 4.6000000000000000E+01  ! X values
ifctn.x (                47 ,       $I_windload_fw                ) = 4.7000000000000000E+01  ! X values
ifctn.x (                48 ,       $I_windload_fw                ) = 4.8000000000000000E+01  ! X values
ifctn.x (                49 ,       $I_windload_fw                ) = 4.9000000000000000E+01  ! X values
ifctn.x (                50 ,       $I_windload_fw                ) = 5.0000000000000000E+01  ! X values
ifctn.x (                51 ,       $I_windload_fw                ) = 5.1000000000000000E+01  ! X values
ifctn.x (                52 ,       $I_windload_fw                ) = 5.2000000000000000E+01  ! X values
ifctn.x (                53 ,       $I_windload_fw                ) = 5.3000000000000000E+01  ! X values
ifctn.x (                54 ,       $I_windload_fw                ) = 5.4000000000000000E+01  ! X values
ifctn.x (                55 ,       $I_windload_fw                ) = 5.5000000000000000E+01  ! X values
ifctn.x (                56 ,       $I_windload_fw                ) = 5.6000000000000000E+01  ! X values
ifctn.x (                57 ,       $I_windload_fw                ) = 5.7000000000000000E+01  ! X values
ifctn.x (                58 ,       $I_windload_fw                ) = 5.8000000000000000E+01  ! X values
ifctn.x (                59 ,       $I_windload_fw                ) = 5.9000000000000000E+01  ! X values
ifctn.x (                60 ,       $I_windload_fw                ) = 6.0000000000000000E+01  ! X values
ifctn.x (                61 ,       $I_windload_fw                ) = 6.1000000000000000E+01  ! X values
ifctn.x (                62 ,       $I_windload_fw                ) = 6.2000000000000000E+01  ! X values
ifctn.x (                63 ,       $I_windload_fw                ) = 6.3000000000000000E+01  ! X values
ifctn.x (                64 ,       $I_windload_fw                ) = 6.4000000000000000E+01  ! X values
ifctn.x (                65 ,       $I_windload_fw                ) = 6.5000000000000000E+01  ! X values
ifctn.x (                66 ,       $I_windload_fw                ) = 6.6000000000000000E+01  ! X values
ifctn.x (                67 ,       $I_windload_fw                ) = 6.7000000000000000E+01  ! X values
ifctn.x (                68 ,       $I_windload_fw                ) = 6.8000000000000000E+01  ! X values
ifctn.x (                69 ,       $I_windload_fw                ) = 6.9000000000000000E+01  ! X values
ifctn.x (                70 ,       $I_windload_fw                ) = 7.0000000000000000E+01  ! X values
ifctn.x (                71 ,       $I_windload_fw                ) = 7.1000000000000000E+01  ! X values
ifctn.x (                72 ,       $I_windload_fw                ) = 7.2000000000000000E+01  ! X values
ifctn.x (                73 ,       $I_windload_fw                ) = 7.3000000000000000E+01  ! X values
ifctn.x (                74 ,       $I_windload_fw                ) = 7.4000000000000000E+01  ! X values
ifctn.x (                75 ,       $I_windload_fw                ) = 7.5000000000000000E+01  ! X values
ifctn.x (                76 ,       $I_windload_fw                ) = 7.6000000000000000E+01  ! X values
ifctn.x (                77 ,       $I_windload_fw                ) = 7.7000000000000000E+01  ! X values
ifctn.x (                78 ,       $I_windload_fw                ) = 7.8000000000000000E+01  ! X values
ifctn.x (                79 ,       $I_windload_fw                ) = 7.9000000000000000E+01  ! X values
ifctn.x (                80 ,       $I_windload_fw                ) = 8.0000000000000000E+01  ! X values
ifctn.x (                81 ,       $I_windload_fw                ) = 8.1000000000000000E+01  ! X values
ifctn.x (                82 ,       $I_windload_fw                ) = 8.2000000000000000E+01  ! X values
ifctn.x (                83 ,       $I_windload_fw                ) = 8.3000000000000000E+01  ! X values
ifctn.x (                84 ,       $I_windload_fw                ) = 8.4000000000000000E+01  ! X values
ifctn.x (                85 ,       $I_windload_fw                ) = 8.5000000000000000E+01  ! X values
ifctn.x (                86 ,       $I_windload_fw                ) = 8.6000000000000000E+01  ! X values
ifctn.x (                87 ,       $I_windload_fw                ) = 8.7000000000000000E+01  ! X values
ifctn.x (                88 ,       $I_windload_fw                ) = 8.8000000000000000E+01  ! X values
ifctn.x (                89 ,       $I_windload_fw                ) = 8.9000000000000000E+01  ! X values
ifctn.x (                90 ,       $I_windload_fw                ) = 9.0000000000000000E+01  ! X values
ifctn.x (                91 ,       $I_windload_fw                ) = 9.1000000000000000E+01  ! X values
ifctn.x (                92 ,       $I_windload_fw                ) = 9.2000000000000000E+01  ! X values
ifctn.x (                93 ,       $I_windload_fw                ) = 9.3000000000000000E+01  ! X values
ifctn.x (                94 ,       $I_windload_fw                ) = 9.4000000000000000E+01  ! X values
ifctn.x (                95 ,       $I_windload_fw                ) = 9.5000000000000000E+01  ! X values
ifctn.x (                96 ,       $I_windload_fw                ) = 9.6000000000000000E+01  ! X values
ifctn.x (                97 ,       $I_windload_fw                ) = 9.7000000000000000E+01  ! X values
ifctn.x (                98 ,       $I_windload_fw                ) = 9.8000000000000000E+01  ! X values
ifctn.x (                99 ,       $I_windload_fw                ) = 9.9000000000000000E+01  ! X values
ifctn.x (               100 ,       $I_windload_fw                ) = 1.0000000000000000E+02  ! X values
ifctn.y (                 1 ,       $I_windload_fw                ) = -3.7587522852604402E+03 ! Y values
ifctn.y (                 2 ,       $I_windload_fw                ) = 7.5366107363294605E+03  ! Y values
ifctn.y (                 3 ,       $I_windload_fw                ) = -3.1645295103303501E+03 ! Y values
ifctn.y (                 4 ,       $I_windload_fw                ) = -2.4528970943548102E+03 ! Y values
ifctn.y (                 5 ,       $I_windload_fw                ) = 8.3386029884080999E+03  ! Y values
ifctn.y (                 6 ,       $I_windload_fw                ) = -3.8930571564644601E+03 ! Y values
ifctn.y (                 7 ,       $I_windload_fw                ) = -3.5914873399830299E+03 ! Y values
ifctn.y (                 8 ,       $I_windload_fw                ) = -9.7536492371473605E+02 ! Y values
ifctn.y (                 9 ,       $I_windload_fw                ) = 5.3944185947978604E+03  ! Y values
ifctn.y (                10 ,       $I_windload_fw                ) = -1.9850167045362599E+02 ! Y values
ifctn.y (                11 ,       $I_windload_fw                ) = -1.3448643557649701E+04 ! Y values
ifctn.y (                12 ,       $I_windload_fw                ) = -7.4629557782134100E+02 ! Y values
ifctn.y (                13 ,       $I_windload_fw                ) = -1.5860447472553701E+03 ! Y values
ifctn.y (                14 ,       $I_windload_fw                ) = -8.7524400079419302E+03 ! Y values
ifctn.y (                15 ,       $I_windload_fw                ) = -2.2595298593370899E+03 ! Y values
ifctn.y (                16 ,       $I_windload_fw                ) = -2.0640731880524299E+03 ! Y values
ifctn.y (                17 ,       $I_windload_fw                ) = -5.9506750951044196E+03 ! Y values
ifctn.y (                18 ,       $I_windload_fw                ) = -1.7623259535567500E+04 ! Y values
ifctn.y (                19 ,       $I_windload_fw                ) = -5.6421263695817897E+03 ! Y values
ifctn.y (                20 ,       $I_windload_fw                ) = -2.4208772186022102E+03 ! Y values
ifctn.y (                21 ,       $I_windload_fw                ) = -1.0428953331996299E+04 ! Y values
ifctn.y (                22 ,       $I_windload_fw                ) = 1.2482839516810300E+03  ! Y values
ifctn.y (                23 ,       $I_windload_fw                ) = 1.5482560736635101E+03  ! Y values
ifctn.y (                24 ,       $I_windload_fw                ) = -5.8088180538739198E+03 ! Y values
ifctn.y (                25 ,       $I_windload_fw                ) = -4.7429520493355303E+03 ! Y values
ifctn.y (                26 ,       $I_windload_fw                ) = 1.4098634562926500E+04  ! Y values
ifctn.y (                27 ,       $I_windload_fw                ) = -2.1475353371139900E+03 ! Y values
ifctn.y (                28 ,       $I_windload_fw                ) = 3.1384359862268402E+03  ! Y values
ifctn.y (                29 ,       $I_windload_fw                ) = -1.7716775393695300E+03 ! Y values
ifctn.y (                30 ,       $I_windload_fw                ) = -5.6311353989542804E+03 ! Y values
ifctn.y (                31 ,       $I_windload_fw                ) = -3.0506461154158399E+02 ! Y values
ifctn.y (                32 ,       $I_windload_fw                ) = 7.8696733823390496E+03  ! Y values
ifctn.y (                33 ,       $I_windload_fw                ) = -1.4882396020818001E+03 ! Y values
ifctn.y (                34 ,       $I_windload_fw                ) = -1.2515850139869101E+03 ! Y values
ifctn.y (                35 ,       $I_windload_fw                ) = -2.7231159126834000E+03 ! Y values
ifctn.y (                36 ,       $I_windload_fw                ) = 8.5202693604434207E+03  ! Y values
ifctn.y (                37 ,       $I_windload_fw                ) = 5.5010408168995600E+03  ! Y values
ifctn.y (                38 ,       $I_windload_fw                ) = -1.1087108585393600E+04 ! Y values
ifctn.y (                39 ,       $I_windload_fw                ) = -2.0330010293672799E+03 ! Y values
ifctn.y (                40 ,       $I_windload_fw                ) = -1.2844854520145500E+03 ! Y values
ifctn.y (                41 ,       $I_windload_fw                ) = -7.9616022904853999E+03 ! Y values
ifctn.y (                42 ,       $I_windload_fw                ) = -1.1403248314631801E+03 ! Y values
ifctn.y (                43 ,       $I_windload_fw                ) = 1.4860136384780801E+03  ! Y values
ifctn.y (                44 ,       $I_windload_fw                ) = -6.9490860441808200E+03 ! Y values
ifctn.y (                45 ,       $I_windload_fw                ) = 3.2023279146603400E+03  ! Y values
ifctn.y (                46 ,       $I_windload_fw                ) = 2.0509490005140101E+03  ! Y values
ifctn.y (                47 ,       $I_windload_fw                ) = 2.7010146041168900E+03  ! Y values
ifctn.y (                48 ,       $I_windload_fw                ) = 5.6748801153766599E+03  ! Y values
ifctn.y (                49 ,       $I_windload_fw                ) = 9.8928114655198794E+02  ! Y values
ifctn.y (                50 ,       $I_windload_fw                ) = 3.4165083041068401E+03  ! Y values
ifctn.y (                51 ,       $I_windload_fw                ) = -4.4083207042391302E+02 ! Y values
ifctn.y (                52 ,       $I_windload_fw                ) = -5.8372560007134698E+03 ! Y values
ifctn.y (                53 ,       $I_windload_fw                ) = -3.8912590343994798E+03 ! Y values
ifctn.y (                54 ,       $I_windload_fw                ) = -4.3709844174409500E+03 ! Y values
ifctn.y (                55 ,       $I_windload_fw                ) = -8.0082953452038203E+02 ! Y values
ifctn.y (                56 ,       $I_windload_fw                ) = 7.1654747226546999E+02  ! Y values
ifctn.y (                57 ,       $I_windload_fw                ) = 5.3984131013280705E+02  ! Y values
ifctn.y (                58 ,       $I_windload_fw                ) = -1.1284863593825899E+02 ! Y values
ifctn.y (                59 ,       $I_windload_fw                ) = -3.4456137747307098E+03 ! Y values
ifctn.y (                60 ,       $I_windload_fw                ) = -9.5128236695304201E+02 ! Y values
ifctn.y (                61 ,       $I_windload_fw                ) = -6.0326576280823001E+03 ! Y values
ifctn.y (                62 ,       $I_windload_fw                ) = -5.4358239351326702E+03 ! Y values
ifctn.y (                63 ,       $I_windload_fw                ) = -1.7828270155186999E+03 ! Y values
ifctn.y (                64 ,       $I_windload_fw                ) = 2.4554361427884601E+03  ! Y values
ifctn.y (                65 ,       $I_windload_fw                ) = -6.8366254670352400E+03 ! Y values
ifctn.y (                66 ,       $I_windload_fw                ) = 7.0590383954333702E+03  ! Y values
ifctn.y (                67 ,       $I_windload_fw                ) = -6.0219113687248901E+03 ! Y values
ifctn.y (                68 ,       $I_windload_fw                ) = 7.1968992025096904E+03  ! Y values
ifctn.y (                69 ,       $I_windload_fw                ) = 1.8327191401178500E+03  ! Y values
ifctn.y (                70 ,       $I_windload_fw                ) = -5.2124032300731005E+02 ! Y values
ifctn.y (                71 ,       $I_windload_fw                ) = 9.4441516080622005E+03  ! Y values
ifctn.y (                72 ,       $I_windload_fw                ) = -1.2586039291142799E+03 ! Y values
ifctn.y (                73 ,       $I_windload_fw                ) = 7.9624611524677402E+03  ! Y values
ifctn.y (                74 ,       $I_windload_fw                ) = 1.0959910998736899E+04  ! Y values
ifctn.y (                75 ,       $I_windload_fw                ) = -6.0750602723193297E+03 ! Y values
ifctn.y (                76 ,       $I_windload_fw                ) = -7.7233834530249896E+03 ! Y values
ifctn.y (                77 ,       $I_windload_fw                ) = 4.3001942698815301E+03  ! Y values
ifctn.y (                78 ,       $I_windload_fw                ) = -2.3798039510172698E+03 ! Y values
ifctn.y (                79 ,       $I_windload_fw                ) = -9.5362867544560595E+03 ! Y values
ifctn.y (                80 ,       $I_windload_fw                ) = -4.3404195609276403E+03 ! Y values
ifctn.y (                81 ,       $I_windload_fw                ) = -5.7055212733395899E+02 ! Y values
ifctn.y (                82 ,       $I_windload_fw                ) = 1.3908647926308099E+03  ! Y values
ifctn.y (                83 ,       $I_windload_fw                ) = -2.1930129552009498E+03 ! Y values
ifctn.y (                84 ,       $I_windload_fw                ) = -2.8832768870071100E+03 ! Y values
ifctn.y (                85 ,       $I_windload_fw                ) = -2.9795471913742499E+03 ! Y values
ifctn.y (                86 ,       $I_windload_fw                ) = 5.1033902789459798E+03  ! Y values
ifctn.y (                87 ,       $I_windload_fw                ) = 1.7421158474915201E+03  ! Y values
ifctn.y (                88 ,       $I_windload_fw                ) = -6.7581869158934796E+03 ! Y values
ifctn.y (                89 ,       $I_windload_fw                ) = 5.7571919650087702E+03  ! Y values
ifctn.y (                90 ,       $I_windload_fw                ) = -9.2647452591772401E+02 ! Y values
ifctn.y (                91 ,       $I_windload_fw                ) = 2.1877514228576701E+03  ! Y values
ifctn.y (                92 ,       $I_windload_fw                ) = -9.8626377675403892E+03 ! Y values
ifctn.y (                93 ,       $I_windload_fw                ) = 6.3629098083984400E+02  ! Y values
ifctn.y (                94 ,       $I_windload_fw                ) = -3.3755973775915900E+03 ! Y values
ifctn.y (                95 ,       $I_windload_fw                ) = -6.1053715190835501E+03 ! Y values
ifctn.y (                96 ,       $I_windload_fw                ) = -2.0444031508721600E+03 ! Y values
ifctn.y (                97 ,       $I_windload_fw                ) = 2.9846650141974901E+03  ! Y values
ifctn.y (                98 ,       $I_windload_fw                ) = 3.9000818709725598E+02  ! Y values
ifctn.y (                99 ,       $I_windload_fw                ) = 4.3400263911859201E+03  ! Y values
ifctn.y (               100 ,       $I_windload_fw                ) = 2.9315613855406100E+03  ! Y values
ifctn.scal.x (                      $I_windload_fw                ) = 2.5000000000000000E-01  ! Scaling factor
ifctn.intpol.type (                 $I_windload_fw                ) = 2                       ! Interpolation type
ifctn.range.handling (              $I_windload_fw                ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_windload_fw                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_windload_fw                ) = 1.0000000000000000E+02  ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_windload_fw                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_windload_fw                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_windload_fw                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_windload_fw                ) = 2.0000000000000000E+01  ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_windload_fw                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_windload_fw                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_windload_fw          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_windload_fw          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_windload_fw          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter

!**********************************************************************
! Power Spectral Density
!**********************************************************************
psd.type (                          $P_StochTrackEx_y_PSD         ) = 1                       ! Type
psd.par (                 1 ,       $P_StochTrackEx_y_PSD         ) = 9.0000000000000000E+00  ! [-] Numerator degree
psd.par (                 2 ,       $P_StochTrackEx_y_PSD         ) = 9.0000000000000000E+00  ! [-] Denominator degree
psd.par (                 3 ,       $P_StochTrackEx_y_PSD         ) = 0.0000000000000000E+00  ! [-] Representation of independent
psd.par (                 4 ,       $P_StochTrackEx_y_PSD         ) = 2.0000000000000000E+00  ! [-] Free factor alpha
psd.par (                 5 ,       $P_StochTrackEx_y_PSD         ) = 0.0000000000000000E+00  ! [-] Sides
psd.par (                10 ,       $P_StochTrackEx_y_PSD         ) = 1.4408459492000001E-07  ! [-] Numerator coeff. for degree 0
psd.par (                20 ,       $P_StochTrackEx_y_PSD         ) = 2.8855001436999998E-04  ! [-] Denomin. coeff. for degree 0
psd.par (                22 ,       $P_StochTrackEx_y_PSD         ) = 6.8038952351000004E-01  ! [-] Denomin. coeff. for degree 2
psd.par (                24 ,       $P_StochTrackEx_y_PSD         ) = 1.0000000000000000E+00  ! [-] Denomin. coeff. for degree 4

psd.type (                          $P_StochTrackEx_z_PSD         ) = 1                       ! Type
psd.par (                 1 ,       $P_StochTrackEx_z_PSD         ) = 9.0000000000000000E+00  ! [-] Numerator degree
psd.par (                 2 ,       $P_StochTrackEx_z_PSD         ) = 9.0000000000000000E+00  ! [-] Denominator degree
psd.par (                 3 ,       $P_StochTrackEx_z_PSD         ) = 0.0000000000000000E+00  ! [-] Representation of independent
psd.par (                 4 ,       $P_StochTrackEx_z_PSD         ) = 2.0000000000000000E+00  ! [-] Free factor alpha
psd.par (                 5 ,       $P_StochTrackEx_z_PSD         ) = 0.0000000000000000E+00  ! [-] Sides
psd.par (                10 ,       $P_StochTrackEx_z_PSD         ) = 2.7416189140999999E-07  ! [-] Numerator coeff. for degree 0
psd.par (                20 ,       $P_StochTrackEx_z_PSD         ) = 2.8855001436999998E-04  ! [-] Denomin. coeff. for degree 0
psd.par (                22 ,       $P_StochTrackEx_z_PSD         ) = 6.8038952351000004E-01  ! [-] Denomin. coeff. for degree 2
psd.par (                24 ,       $P_StochTrackEx_z_PSD         ) = 1.0000000000000000E+00  ! [-] Denomin. coeff. for degree 4

psd.type (                          $P_StochTrackEx_al_PSD        ) = 1                       ! Type
psd.par (                 1 ,       $P_StochTrackEx_al_PSD        ) = 9.0000000000000000E+00  ! [-] Numerator degree
psd.par (                 2 ,       $P_StochTrackEx_al_PSD        ) = 9.0000000000000000E+00  ! [-] Denominator degree
psd.par (                 3 ,       $P_StochTrackEx_al_PSD        ) = 0.0000000000000000E+00  ! [-] Representation of independent
psd.par (                 4 ,       $P_StochTrackEx_al_PSD        ) = 2.0000000000000000E+00  ! [-] Free factor alpha
psd.par (                 5 ,       $P_StochTrackEx_al_PSD        ) = 0.0000000000000000E+00  ! [-] Sides
psd.par (                12 ,       $P_StochTrackEx_al_PSD        ) = 4.8739900648999996E-07  ! [-] Numerator coeff. for degree 2
psd.par (                20 ,       $P_StochTrackEx_al_PSD        ) = 5.5356591474000003E-05  ! [-] Denomin. coeff. for degree 0
psd.par (                22 ,       $P_StochTrackEx_al_PSD        ) = 1.3081720471000000E-01  ! [-] Denomin. coeff. for degree 2
psd.par (                24 ,       $P_StochTrackEx_al_PSD        ) = 8.7223351002000005E-01  ! [-] Denomin. coeff. for degree 4
psd.par (                26 ,       $P_StochTrackEx_al_PSD        ) = 1.0000000000000000E+00  ! [-] Denomin. coeff. for degree 6

psd.type (                          $p_GX5_guiju_PSD              ) = 1                       ! Type
psd.par (                 1 ,       $p_GX5_guiju_PSD              ) = 9.0000000000000000E+00  ! [-] Numerator degree
psd.par (                 2 ,       $p_GX5_guiju_PSD              ) = 9.0000000000000000E+00  ! [-] Denominator degree
psd.par (                 3 ,       $p_GX5_guiju_PSD              ) = 0.0000000000000000E+00  ! [-] Representation of independent
psd.par (                 4 ,       $p_GX5_guiju_PSD              ) = 2.0000000000000000E+00  ! [-] Free factor alpha
psd.par (                 5 ,       $p_GX5_guiju_PSD              ) = 0.0000000000000000E+00  ! [-] Sides

psd.type (                          $p_GX5_Gaodi_l_PSD            ) = 1                       ! Type
psd.par (                 1 ,       $p_GX5_Gaodi_l_PSD            ) = 9.0000000000000000E+00  ! [-] Numerator degree
psd.par (                 2 ,       $p_GX5_Gaodi_l_PSD            ) = 9.0000000000000000E+00  ! [-] Denominator degree
psd.par (                 3 ,       $p_GX5_Gaodi_l_PSD            ) = 0.0000000000000000E+00  ! [-] Representation of independent
psd.par (                 4 ,       $p_GX5_Gaodi_l_PSD            ) = 2.0000000000000000E+00  ! [-] Free factor alpha
psd.par (                 5 ,       $p_GX5_Gaodi_l_PSD            ) = 0.0000000000000000E+00  ! [-] Sides
psd.par (                10 ,       $p_GX5_Gaodi_l_PSD            ) = 6.3999998382999997E-03  ! [-] Numerator coeff. for degree 0
psd.par (                20 ,       $p_GX5_Gaodi_l_PSD            ) = 9.9999997474000006E-05  ! [-] Denomin. coeff. for degree 0
psd.par (                22 ,       $p_GX5_Gaodi_l_PSD            ) = 2.3299999534999999E-01  ! [-] Denomin. coeff. for degree 2
psd.par (                24 ,       $p_GX5_Gaodi_l_PSD            ) = 1.0000000000000000E+00  ! [-] Denomin. coeff. for degree 4

psd.type (                          $p_GX5_Gaodi_r_PSD            ) = 1                       ! Type
psd.par (                 1 ,       $p_GX5_Gaodi_r_PSD            ) = 9.0000000000000000E+00  ! [-] Numerator degree
psd.par (                 2 ,       $p_GX5_Gaodi_r_PSD            ) = 9.0000000000000000E+00  ! [-] Denominator degree
psd.par (                 3 ,       $p_GX5_Gaodi_r_PSD            ) = 0.0000000000000000E+00  ! [-] Representation of independent
psd.par (                 4 ,       $p_GX5_Gaodi_r_PSD            ) = 2.0000000000000000E+00  ! [-] Free factor alpha
psd.par (                 5 ,       $p_GX5_Gaodi_r_PSD            ) = 0.0000000000000000E+00  ! [-] Sides
psd.par (                10 ,       $p_GX5_Gaodi_r_PSD            ) = 4.3999999762000001E-03  ! [-] Numerator coeff. for degree 0
psd.par (                22 ,       $p_GX5_Gaodi_r_PSD            ) = 1.6439999640000000E-01  ! [-] Denomin. coeff. for degree 2
psd.par (                24 ,       $p_GX5_Gaodi_r_PSD            ) = 1.0000000000000000E+00  ! [-] Denomin. coeff. for degree 4

psd.type (                          $p_GX5_Niuqu_PSD              ) = 1                       ! Type
psd.par (                 1 ,       $p_GX5_Niuqu_PSD              ) = 9.0000000000000000E+00  ! [-] Numerator degree
psd.par (                 2 ,       $p_GX5_Niuqu_PSD              ) = 9.0000000000000000E+00  ! [-] Denominator degree
psd.par (                 3 ,       $p_GX5_Niuqu_PSD              ) = 0.0000000000000000E+00  ! [-] Representation of independent
psd.par (                 4 ,       $p_GX5_Niuqu_PSD              ) = 2.0000000000000000E+00  ! [-] Free factor alpha
psd.par (                 5 ,       $p_GX5_Niuqu_PSD              ) = 0.0000000000000000E+00  ! [-] Sides
psd.par (                10 ,       $p_GX5_Niuqu_PSD              ) = 8.2999998703999992E-03  ! [-] Numerator coeff. for degree 0
psd.par (                12 ,       $p_GX5_Niuqu_PSD              ) = 1.4393400192000000E+01  ! [-] Numerator coeff. for degree 2
psd.par (                20 ,       $p_GX5_Niuqu_PSD              ) = 9.8000001162000007E-03  ! [-] Denomin. coeff. for degree 0
psd.par (                22 ,       $p_GX5_Niuqu_PSD              ) = 5.0718998909000002E+00  ! [-] Denomin. coeff. for degree 2
psd.par (                24 ,       $p_GX5_Niuqu_PSD              ) = -1.6927000426999999E+02 ! [-] Denomin. coeff. for degree 4
psd.par (                26 ,       $p_GX5_Niuqu_PSD              ) = 5.9348969727000003E+03  ! [-] Denomin. coeff. for degree 6

psd.type (                          $p_GX5_Guixiang_l_PSD         ) = 1                       ! Type
psd.par (                 1 ,       $p_GX5_Guixiang_l_PSD         ) = 9.0000000000000000E+00  ! [-] Numerator degree
psd.par (                 2 ,       $p_GX5_Guixiang_l_PSD         ) = 9.0000000000000000E+00  ! [-] Denominator degree
psd.par (                 3 ,       $p_GX5_Guixiang_l_PSD         ) = 0.0000000000000000E+00  ! [-] Representation of independent
psd.par (                 4 ,       $p_GX5_Guixiang_l_PSD         ) = 2.0000000000000000E+00  ! [-] Free factor alpha
psd.par (                 5 ,       $p_GX5_Guixiang_l_PSD         ) = 0.0000000000000000E+00  ! [-] Sides
psd.par (                10 ,       $p_GX5_Guixiang_l_PSD         ) = 3.9999998990000003E-04  ! [-] Numerator coeff. for degree 0
psd.par (                22 ,       $p_GX5_Guixiang_l_PSD         ) = 1.2500000186000001E-02  ! [-] Denomin. coeff. for degree 2
psd.par (                24 ,       $p_GX5_Guixiang_l_PSD         ) = 1.0000000000000000E+00  ! [-] Denomin. coeff. for degree 4

psd.type (                          $p_GX5_Guixiang_r_PSD         ) = 1                       ! Type
psd.par (                 1 ,       $p_GX5_Guixiang_r_PSD         ) = 9.0000000000000000E+00  ! [-] Numerator degree
psd.par (                 2 ,       $p_GX5_Guixiang_r_PSD         ) = 9.0000000000000000E+00  ! [-] Denominator degree
psd.par (                 3 ,       $p_GX5_Guixiang_r_PSD         ) = 0.0000000000000000E+00  ! [-] Representation of independent
psd.par (                 4 ,       $p_GX5_Guixiang_r_PSD         ) = 2.0000000000000000E+00  ! [-] Free factor alpha
psd.par (                 5 ,       $p_GX5_Guixiang_r_PSD         ) = 0.0000000000000000E+00  ! [-] Sides
psd.par (                10 ,       $p_GX5_Guixiang_r_PSD         ) = 3.9999998990000003E-04  ! [-] Numerator coeff. for degree 0
psd.par (                22 ,       $p_GX5_Guixiang_r_PSD         ) = 1.1900000274000001E-02  ! [-] Denomin. coeff. for degree 2
psd.par (                24 ,       $p_GX5_Guixiang_r_PSD         ) = 1.0000000000000000E+00  ! [-] Denomin. coeff. for degree 4

psd.type (                          $p_GX5_Shuiping_PSD           ) = 1                       ! Type
psd.par (                 1 ,       $p_GX5_Shuiping_PSD           ) = 9.0000000000000000E+00  ! [-] Numerator degree
psd.par (                 2 ,       $p_GX5_Shuiping_PSD           ) = 9.0000000000000000E+00  ! [-] Denominator degree
psd.par (                 3 ,       $p_GX5_Shuiping_PSD           ) = 0.0000000000000000E+00  ! [-] Representation of independent
psd.par (                 4 ,       $p_GX5_Shuiping_PSD           ) = 2.0000000000000000E+00  ! [-] Free factor alpha
psd.par (                 5 ,       $p_GX5_Shuiping_PSD           ) = 0.0000000000000000E+00  ! [-] Sides
psd.par (                10 ,       $p_GX5_Shuiping_PSD           ) = 2.8400000185000000E-02  ! [-] Numerator coeff. for degree 0
psd.par (                12 ,       $p_GX5_Shuiping_PSD           ) = 9.2424001693999998E+00  ! [-] Numerator coeff. for degree 2
psd.par (                20 ,       $p_GX5_Shuiping_PSD           ) = 1.0999999940000001E-03  ! [-] Denomin. coeff. for degree 0
psd.par (                22 ,       $p_GX5_Shuiping_PSD           ) = 5.0823001862000003E+00  ! [-] Denomin. coeff. for degree 2
psd.par (                24 ,       $p_GX5_Shuiping_PSD           ) = 2.0476739502000001E+02  ! [-] Denomin. coeff. for degree 4
psd.par (                26 ,       $p_GX5_Shuiping_PSD           ) = 5.8597670897999997E+03  ! [-] Denomin. coeff. for degree 6

!**********************************************************************
! Transfer Functions
!**********************************************************************
trf.type (                          $P_StochTrackEx_y_TF          ) = 1                       ! Type
trf.par (                 1 ,       $P_StochTrackEx_y_TF          ) = 9.0000000000000000E+00  ! [-] Numerator degree
trf.par (                 2 ,       $P_StochTrackEx_y_TF          ) = 9.0000000000000000E+00  ! [-] Denominator degree
trf.par (                 3 ,       $P_StochTrackEx_y_TF          ) = 0.0000000000000000E+00  ! [-] Representation of independent
trf.par (                 4 ,       $P_StochTrackEx_y_TF          ) = 2.0000000000000000E+00  ! [-] Free factor beta
trf.par (                 5 ,       $P_StochTrackEx_y_TF          ) = 0.0000000000000000E+00  ! [-] Sides
trf.par (                10 ,       $P_StochTrackEx_y_TF          ) = 6.7279650829999999E-04  ! [-] Numerator coeff. for degree 0
trf.par (                20 ,       $P_StochTrackEx_y_TF          ) = 1.6986759380000001E-02  ! [-] Denomin. coeff. for degree 0
trf.par (                21 ,       $P_StochTrackEx_y_TF          ) = 8.4520000219000002E-01  ! [-] Denomin. coeff. for degree 1
trf.par (                22 ,       $P_StochTrackEx_y_TF          ) = 1.0000000000000000E+00  ! [-] Denomin. coeff. for degree 2

trf.type (                          $P_StochTrackEx_z_TF          ) = 1                       ! Type
trf.par (                 1 ,       $P_StochTrackEx_z_TF          ) = 9.0000000000000000E+00  ! [-] Numerator degree
trf.par (                 2 ,       $P_StochTrackEx_z_TF          ) = 9.0000000000000000E+00  ! [-] Denominator degree
trf.par (                 3 ,       $P_StochTrackEx_z_TF          ) = 0.0000000000000000E+00  ! [-] Representation of independent
trf.par (                 4 ,       $P_StochTrackEx_z_TF          ) = 2.0000000000000000E+00  ! [-] Free factor beta
trf.par (                 5 ,       $P_StochTrackEx_z_TF          ) = 0.0000000000000000E+00  ! [-] Sides
trf.par (                10 ,       $P_StochTrackEx_z_TF          ) = 9.2806527390999999E-04  ! [-] Numerator coeff. for degree 0
trf.par (                20 ,       $P_StochTrackEx_z_TF          ) = 1.6986759380000001E-02  ! [-] Denomin. coeff. for degree 0
trf.par (                21 ,       $P_StochTrackEx_z_TF          ) = 8.4520000219000002E-01  ! [-] Denomin. coeff. for degree 1
trf.par (                22 ,       $P_StochTrackEx_z_TF          ) = 1.0000000000000000E+00  ! [-] Denomin. coeff. for degree 2

trf.type (                          $P_StochTrackEx_al_TF         ) = 1                       ! Type
trf.par (                 1 ,       $P_StochTrackEx_al_TF         ) = 9.0000000000000000E+00  ! [-] Numerator degree
trf.par (                 2 ,       $P_StochTrackEx_al_TF         ) = 9.0000000000000000E+00  ! [-] Denominator degree
trf.par (                 3 ,       $P_StochTrackEx_al_TF         ) = 0.0000000000000000E+00  ! [-] Representation of independent
trf.par (                 4 ,       $P_StochTrackEx_al_TF         ) = 2.0000000000000000E+00  ! [-] Free factor beta
trf.par (                 5 ,       $P_StochTrackEx_al_TF         ) = 0.0000000000000000E+00  ! [-] Sides
trf.par (                11 ,       $P_StochTrackEx_al_TF         ) = 1.2374200160000001E-03  ! [-] Numerator coeff. for degree 1
trf.par (                20 ,       $P_StochTrackEx_al_TF         ) = 7.4402010068000003E-03  ! [-] Denomin. coeff. for degree 0
trf.par (                21 ,       $P_StochTrackEx_al_TF         ) = 3.8718441128999997E-01  ! [-] Denomin. coeff. for degree 1
trf.par (                22 ,       $P_StochTrackEx_al_TF         ) = 1.2832000256000000E+00  ! [-] Denomin. coeff. for degree 2
trf.par (                23 ,       $P_StochTrackEx_al_TF         ) = 1.0000000000000000E+00  ! [-] Denomin. coeff. for degree 3

trf.type (                          $p_GX5_guiju_TF               ) = 1                       ! Type
trf.par (                 1 ,       $p_GX5_guiju_TF               ) = 9.0000000000000000E+00  ! [-] Numerator degree
trf.par (                 2 ,       $p_GX5_guiju_TF               ) = 9.0000000000000000E+00  ! [-] Denominator degree
trf.par (                 3 ,       $p_GX5_guiju_TF               ) = 0.0000000000000000E+00  ! [-] Representation of independent
trf.par (                 4 ,       $p_GX5_guiju_TF               ) = 2.0000000000000000E+00  ! [-] Free factor beta
trf.par (                 5 ,       $p_GX5_guiju_TF               ) = 0.0000000000000000E+00  ! [-] Sides

trf.type (                          $p_GX5_Gaodi_l_TF             ) = 1                       ! Type
trf.par (                 1 ,       $p_GX5_Gaodi_l_TF             ) = 9.0000000000000000E+00  ! [-] Numerator degree
trf.par (                 2 ,       $p_GX5_Gaodi_l_TF             ) = 9.0000000000000000E+00  ! [-] Denominator degree
trf.par (                 3 ,       $p_GX5_Gaodi_l_TF             ) = 0.0000000000000000E+00  ! [-] Representation of independent
trf.par (                 4 ,       $p_GX5_Gaodi_l_TF             ) = 2.0000000000000000E+00  ! [-] Free factor beta
trf.par (                 5 ,       $p_GX5_Gaodi_l_TF             ) = 0.0000000000000000E+00  ! [-] Sides
trf.par (                10 ,       $p_GX5_Gaodi_l_TF             ) = 1.0000000000000000E+00  ! [-] Numerator coeff. for degree 0
trf.par (                21 ,       $p_GX5_Gaodi_l_TF             ) = 1.0000000000000000E+00  ! [-] Denomin. coeff. for degree 1

trf.type (                          $p_GX5_Gaodi_r_TF             ) = 1                       ! Type
trf.par (                 1 ,       $p_GX5_Gaodi_r_TF             ) = 9.0000000000000000E+00  ! [-] Numerator degree
trf.par (                 2 ,       $p_GX5_Gaodi_r_TF             ) = 9.0000000000000000E+00  ! [-] Denominator degree
trf.par (                 3 ,       $p_GX5_Gaodi_r_TF             ) = 0.0000000000000000E+00  ! [-] Representation of independent
trf.par (                 4 ,       $p_GX5_Gaodi_r_TF             ) = 2.0000000000000000E+00  ! [-] Free factor beta
trf.par (                 5 ,       $p_GX5_Gaodi_r_TF             ) = 0.0000000000000000E+00  ! [-] Sides
trf.par (                10 ,       $p_GX5_Gaodi_r_TF             ) = 1.0000000000000000E+00  ! [-] Numerator coeff. for degree 0
trf.par (                21 ,       $p_GX5_Gaodi_r_TF             ) = 1.0000000000000000E+00  ! [-] Denomin. coeff. for degree 1

trf.type (                          $p_GX5_Niuqu_TF               ) = 1                       ! Type
trf.par (                 1 ,       $p_GX5_Niuqu_TF               ) = 9.0000000000000000E+00  ! [-] Numerator degree
trf.par (                 2 ,       $p_GX5_Niuqu_TF               ) = 9.0000000000000000E+00  ! [-] Denominator degree
trf.par (                 3 ,       $p_GX5_Niuqu_TF               ) = 0.0000000000000000E+00  ! [-] Representation of independent
trf.par (                 4 ,       $p_GX5_Niuqu_TF               ) = 2.0000000000000000E+00  ! [-] Free factor beta
trf.par (                 5 ,       $p_GX5_Niuqu_TF               ) = 0.0000000000000000E+00  ! [-] Sides
trf.par (                10 ,       $p_GX5_Niuqu_TF               ) = 1.0000000000000000E+00  ! [-] Numerator coeff. for degree 0
trf.par (                21 ,       $p_GX5_Niuqu_TF               ) = 1.0000000000000000E+00  ! [-] Denomin. coeff. for degree 1

trf.type (                          $p_GX5_Guixiang_l_TF          ) = 1                       ! Type
trf.par (                 1 ,       $p_GX5_Guixiang_l_TF          ) = 9.0000000000000000E+00  ! [-] Numerator degree
trf.par (                 2 ,       $p_GX5_Guixiang_l_TF          ) = 9.0000000000000000E+00  ! [-] Denominator degree
trf.par (                 3 ,       $p_GX5_Guixiang_l_TF          ) = 0.0000000000000000E+00  ! [-] Representation of independent
trf.par (                 4 ,       $p_GX5_Guixiang_l_TF          ) = 2.0000000000000000E+00  ! [-] Free factor beta
trf.par (                 5 ,       $p_GX5_Guixiang_l_TF          ) = 0.0000000000000000E+00  ! [-] Sides
trf.par (                10 ,       $p_GX5_Guixiang_l_TF          ) = 1.0000000000000000E+00  ! [-] Numerator coeff. for degree 0
trf.par (                21 ,       $p_GX5_Guixiang_l_TF          ) = 1.0000000000000000E+00  ! [-] Denomin. coeff. for degree 1

trf.type (                          $p_GX5_Guixiang_r_TF          ) = 1                       ! Type
trf.par (                 1 ,       $p_GX5_Guixiang_r_TF          ) = 9.0000000000000000E+00  ! [-] Numerator degree
trf.par (                 2 ,       $p_GX5_Guixiang_r_TF          ) = 9.0000000000000000E+00  ! [-] Denominator degree
trf.par (                 3 ,       $p_GX5_Guixiang_r_TF          ) = 0.0000000000000000E+00  ! [-] Representation of independent
trf.par (                 4 ,       $p_GX5_Guixiang_r_TF          ) = 2.0000000000000000E+00  ! [-] Free factor beta
trf.par (                 5 ,       $p_GX5_Guixiang_r_TF          ) = 0.0000000000000000E+00  ! [-] Sides
trf.par (                10 ,       $p_GX5_Guixiang_r_TF          ) = 1.0000000000000000E+00  ! [-] Numerator coeff. for degree 0
trf.par (                21 ,       $p_GX5_Guixiang_r_TF          ) = 1.0000000000000000E+00  ! [-] Denomin. coeff. for degree 1

trf.type (                          $p_GX5_Shuiping_TF            ) = 1                       ! Type
trf.par (                 1 ,       $p_GX5_Shuiping_TF            ) = 9.0000000000000000E+00  ! [-] Numerator degree
trf.par (                 2 ,       $p_GX5_Shuiping_TF            ) = 9.0000000000000000E+00  ! [-] Denominator degree
trf.par (                 3 ,       $p_GX5_Shuiping_TF            ) = 0.0000000000000000E+00  ! [-] Representation of independent
trf.par (                 4 ,       $p_GX5_Shuiping_TF            ) = 2.0000000000000000E+00  ! [-] Free factor beta
trf.par (                 5 ,       $p_GX5_Shuiping_TF            ) = 0.0000000000000000E+00  ! [-] Sides
trf.par (                10 ,       $p_GX5_Shuiping_TF            ) = 1.0000000000000000E+00  ! [-] Numerator coeff. for degree 0
trf.par (                21 ,       $p_GX5_Shuiping_TF            ) = 1.0000000000000000E+00  ! [-] Denomin. coeff. for degree 1

!**********************************************************************
! Roads
!**********************************************************************
road.type (                         $Roa_GlobalRoad               ) = 0                       ! Type
road.txt (                          $Roa_GlobalRoad               ) = ''                      ! Comment

!**********************************************************************
! Tracks
!**********************************************************************
track.type (                        $Trk_Track                    ) = 2                       ! Type
track.kind (                        $Trk_Track                    ) = 1                       ! Kind
track.excit.left.lat (              $Trk_Track                    ) = $E_Lateral_L            ! Track::EXC_RAIL_LATERAL_LEFT
track.excit.left.vert (             $Trk_Track                    ) = $E_Vertical_L           ! Track::EXC_RAIL_VERTICAL_LEFT
track.excit.left.roll (             $Trk_Track                    ) = null                    ! Track::EXC_RAIL_ROLL_LEFT
track.excit.right.lat (             $Trk_Track                    ) = $E_Lateral_R            ! Track::EXC_RAIL_LATERAL_RIGHT
track.excit.right.vert (            $Trk_Track                    ) = $E_Vertical_R           ! Track::EXC_RAIL_VERTICAL_RIGHT
track.excit.right.roll (            $Trk_Track                    ) = null                    ! Track::EXC_RAIL_ROLL_RIGHT
track.meas.superelev.kind (         $Trk_Track                    ) = 1                       ! Superelevation kind (measured track)
track.meas.superelev.reflen (       $Trk_Track                    ) = 0.0000000000000000E+00  ! Superelevation reference length (measured track)
track.meas.len (                    $Trk_Track                    ) = 0.0000000000000000E+00  ! Total measured length
track.meas.discr.fromfile (         $Trk_Track                    ) = 0                       ! Discretisation from file
track.meas.discr.num (              $Trk_Track                    ) = 0                       ! Number of discretisation points
track.cart.file (                   $Trk_Track                    ) = ''                      ! Cartographic filename
track.meas.file (                   $Trk_Track                    ) = ''                      ! Measured filename
track.excit.type (                  $Trk_Track                    ) = 2                       ! Excitations type
track.excit.start (                 $Trk_Track                    ) = 8.0000000000000000E+01  ! Excitations start
track.excit.end (                   $Trk_Track                    ) = 0.0000000000000000E+00  ! Excitations end
track.excit.fade.len (              $Trk_Track                    ) = 1.0000000000000000E+01  ! Excitations fade in/out
track.meas.sec.start (              $Trk_Track                    ) = 0.0000000000000000E+00  ! Section start
track.meas.sec.end (                $Trk_Track                    ) = 0.0000000000000000E+00  ! Section end
track.meas.datared.incr (           $Trk_Track                    ) = 0                       ! Data increment
track.meas.startend.fromexcit (     $Trk_Track                    ) = 0                       ! Start/End from excitation
track.meas.start (                  $Trk_Track                    ) = 0.0000000000000000E+00  ! Start
track.meas.fade.len (               $Trk_Track                    ) = 0.0000000000000000E+00  ! Fade length
track.cart.horizontal.curvature.kind ( $Trk_Track                 ) = 0                       ! 0=radius; 1=arc length; 2=chord length
track.cart.horizontal.curvature.reflen ( $Trk_Track               ) = 1.0000000000000000E+00  ! Reference length
track.cart.superelev.fromfile (     $Trk_Track                    ) = 0                       ! Superelevation from file (cartographic track)
track.cart.superelev.kind (         $Trk_Track                    ) = 2                       ! Superelevation kind (cartographic track)
track.cart.superelev.reflen (       $Trk_Track                    ) = 1.5050985921000000E+00  ! Superelevation reference length (cartographic track)
track.cart.discr.gen (              $Trk_Track                    ) = 1.0000000000000000E+00  ! Discr. gen
track.cart.discr.fine (             $Trk_Track                    ) = 5.0000000000000000E-01  ! Discr. fine
track.txt (                         $Trk_Track                    ) = ''                      ! Comment
track.plot.par (          1 ,       $Trk_Track                    ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   1 , $Trk_Track                    ) = 3.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   2 , $Trk_Track                    ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   3 , $Trk_Track                    ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   4 , $Trk_Track                    ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   5 , $Trk_Track                    ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 , $Trk_Track                    ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 ,   1 , $Trk_Track              ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 ,   1 ,   1 , $Trk_Track        ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 ,   1 ,   2 , $Trk_Track        ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 , $Trk_Track                    ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   1 ,   1 , $Trk_Track        ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   2 ,   1 , $Trk_Track        ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 , $Trk_Track              ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 ,   1 , $Trk_Track        ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 ,   2 , $Trk_Track        ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 ,   3 , $Trk_Track        ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   4 ,   1 , $Trk_Track        ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   5 ,   1 , $Trk_Track        ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   6 ,   1 , $Trk_Track        ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   7 ,   1 , $Trk_Track        ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   8 ,   1 , $Trk_Track        ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   9 ,   1 , $Trk_Track        ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  10 ,   1 , $Trk_Track        ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  11 ,   1 , $Trk_Track        ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  12 ,   1 , $Trk_Track        ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  13 ,   1 , $Trk_Track        ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  14 ,   1 , $Trk_Track        ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  15 ,   1 , $Trk_Track        ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  16 ,   1 , $Trk_Track        ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 , $Trk_Track                    ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   1 ,   1 , $Trk_Track        ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   2 ,   1 , $Trk_Track        ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   3 ,   1 , $Trk_Track        ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   4 ,   1 , $Trk_Track        ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   5 ,   1 , $Trk_Track        ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   6 ,   1 , $Trk_Track        ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 , $Trk_Track                    ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 ,   1 ,   1 , $Trk_Track        ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 ,   2 ,   1 , $Trk_Track        ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 ,   3 ,   1 , $Trk_Track        ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 ,   4 ,   1 , $Trk_Track        ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 ,   5 ,   1 , $Trk_Track        ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 ,   6 ,   1 , $Trk_Track        ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 , $Trk_Track                    ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 ,   1 ,   1 , $Trk_Track        ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 ,   2 ,   1 , $Trk_Track        ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 ,   3 ,   1 , $Trk_Track        ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 ,   4 ,   1 , $Trk_Track        ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 ,   5 ,   1 , $Trk_Track        ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 ,   6 ,   1 , $Trk_Track        ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
track.cart.h.type (       1 ,       $Trk_Track                    ) = 1                       ! Type
track.cart.h.par (        1 ,   1 , $Trk_Track                    ) = 5.0000000000000000E+03  ! [m] L
track.cart.h.par (       10 ,   1 , $Trk_Track                    ) = 1.5000000000000000E+00  ! [m] Lsmo/2
track.cart.v.type (       1 ,       $Trk_Track                    ) = 201                     ! Type
track.cart.v.par (        1 ,   1 , $Trk_Track                    ) = 1.0000000000000000E+03  ! [m] L
track.cart.v.par (        2 ,   1 , $Trk_Track                    ) = 0.0000000000000000E+00  ! [-] P
track.cart.v.par (       10 ,   1 , $Trk_Track                    ) = 1.5000000000000000E+00  ! [m] Lsmo/2
track.cart.s.type (       1 ,       $Trk_Track                    ) = 101                     ! Type
track.cart.s.par (        1 ,   1 , $Trk_Track                    ) = 1.0000000000000000E+03  ! [m] L
track.cart.s.par (        2 ,   1 , $Trk_Track                    ) = 0.0000000000000000E+00  ! [m] U
track.cart.s.par (       10 ,   1 , $Trk_Track                    ) = 1.5000000000000000E+00  ! [m] Lsmo/2

!**********************************************************************
! Rails
!**********************************************************************
rail.sides (                        $RWR_W1                       ) = 2                       ! Sides
rail.r.prof.file (        1 ,       $RWR_W1                       ) = 'UIC60.prr'             ! Right Profiles
rail.r.cant (                       $RWR_W1                       ) = 4.0000000000000000E+01  ! Right Cant
rail.lat.kind (                     $RWR_W1                       ) = 2                       ! Lateral rail distance method
rail.r.lat.dist (                   $RWR_W1                       ) = 0.0000000000000000E+00  ! Right Lateral rail distance
rail.l.prof.file (        1 ,       $RWR_W1                       ) = 'UIC60.prr'             ! Left Profiles
rail.l.cant (                       $RWR_W1                       ) = 4.0000000000000000E+01  ! Left Cant
rail.l.lat.dist (                   $RWR_W1                       ) = 0.0000000000000000E+00  ! Left Lateral rail distance
rail.gauge (                        $RWR_W1                       ) = 1.4350000000000001E+00  ! Track gauge
rail.gaugepos (                     $RWR_W1                       ) = 1.6000000000000000E-02  ! Gauge measurement position
rail.plot.par (           1 ,       $RWR_W1                       ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   1 , $RWR_W1                       ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   2 , $RWR_W1                       ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   3 , $RWR_W1                       ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   4 , $RWR_W1                       ) = -1.0000000000000000E+00 ! [-] Unknown plot parameter
rail.plot.par (           1 ,   5 , $RWR_W1                       ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   6 , $RWR_W1                       ) = 5.0000000000000000E+02  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   7 , $RWR_W1                       ) = 2.0000000000000000E+01  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   8 , $RWR_W1                       ) = 5.0000000000000000E+02  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   9 , $RWR_W1                       ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  11 , $RWR_W1                       ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  12 , $RWR_W1                       ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  12 ,   1 ,   1 , $RWR_W1           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  12 ,   2 ,   1 , $RWR_W1           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  12 ,   3 ,   1 , $RWR_W1           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  12 ,   4 ,   1 , $RWR_W1           ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  13 , $RWR_W1                       ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  13 ,   1 ,   1 , $RWR_W1           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  13 ,   2 ,   1 , $RWR_W1           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  13 ,   3 ,   1 , $RWR_W1           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  13 ,   4 ,   1 , $RWR_W1           ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter

rail.sides (                        $RWR_W2                       ) = 2                       ! Sides
rail.r.prof.file (        1 ,       $RWR_W2                       ) = 'UIC60.prr'             ! Right Profiles
rail.r.cant (                       $RWR_W2                       ) = 4.0000000000000000E+01  ! Right Cant
rail.lat.kind (                     $RWR_W2                       ) = 2                       ! Lateral rail distance method
rail.r.lat.dist (                   $RWR_W2                       ) = 0.0000000000000000E+00  ! Right Lateral rail distance
rail.l.prof.file (        1 ,       $RWR_W2                       ) = 'UIC60.prr'             ! Left Profiles
rail.l.cant (                       $RWR_W2                       ) = 4.0000000000000000E+01  ! Left Cant
rail.l.lat.dist (                   $RWR_W2                       ) = 0.0000000000000000E+00  ! Left Lateral rail distance
rail.gauge (                        $RWR_W2                       ) = 1.4350000000000001E+00  ! Track gauge
rail.gaugepos (                     $RWR_W2                       ) = 1.6000000000000000E-02  ! Gauge measurement position
rail.plot.par (           1 ,       $RWR_W2                       ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   1 , $RWR_W2                       ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   2 , $RWR_W2                       ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   3 , $RWR_W2                       ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   4 , $RWR_W2                       ) = -1.0000000000000000E+00 ! [-] Unknown plot parameter
rail.plot.par (           1 ,   5 , $RWR_W2                       ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   6 , $RWR_W2                       ) = 5.0000000000000000E+02  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   7 , $RWR_W2                       ) = 2.0000000000000000E+01  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   8 , $RWR_W2                       ) = 5.0000000000000000E+02  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   9 , $RWR_W2                       ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  11 , $RWR_W2                       ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  12 , $RWR_W2                       ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  12 ,   1 ,   1 , $RWR_W2           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  12 ,   2 ,   1 , $RWR_W2           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  12 ,   3 ,   1 , $RWR_W2           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  12 ,   4 ,   1 , $RWR_W2           ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  13 , $RWR_W2                       ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  13 ,   1 ,   1 , $RWR_W2           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  13 ,   2 ,   1 , $RWR_W2           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  13 ,   3 ,   1 , $RWR_W2           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  13 ,   4 ,   1 , $RWR_W2           ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter

rail.sides (                        $RWR_W3                       ) = 2                       ! Sides
rail.r.prof.file (        1 ,       $RWR_W3                       ) = 'UIC60.prr'             ! Right Profiles
rail.r.cant (                       $RWR_W3                       ) = 4.0000000000000000E+01  ! Right Cant
rail.lat.kind (                     $RWR_W3                       ) = 2                       ! Lateral rail distance method
rail.r.lat.dist (                   $RWR_W3                       ) = 0.0000000000000000E+00  ! Right Lateral rail distance
rail.l.prof.file (        1 ,       $RWR_W3                       ) = 'UIC60.prr'             ! Left Profiles
rail.l.cant (                       $RWR_W3                       ) = 4.0000000000000000E+01  ! Left Cant
rail.l.lat.dist (                   $RWR_W3                       ) = 0.0000000000000000E+00  ! Left Lateral rail distance
rail.gauge (                        $RWR_W3                       ) = 1.4350000000000001E+00  ! Track gauge
rail.gaugepos (                     $RWR_W3                       ) = 1.6000000000000000E-02  ! Gauge measurement position
rail.plot.par (           1 ,       $RWR_W3                       ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   1 , $RWR_W3                       ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   2 , $RWR_W3                       ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   3 , $RWR_W3                       ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   4 , $RWR_W3                       ) = -1.0000000000000000E+00 ! [-] Unknown plot parameter
rail.plot.par (           1 ,   5 , $RWR_W3                       ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   6 , $RWR_W3                       ) = 5.0000000000000000E+02  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   7 , $RWR_W3                       ) = 2.0000000000000000E+01  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   8 , $RWR_W3                       ) = 5.0000000000000000E+02  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   9 , $RWR_W3                       ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  11 , $RWR_W3                       ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  12 , $RWR_W3                       ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  12 ,   1 ,   1 , $RWR_W3           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  12 ,   2 ,   1 , $RWR_W3           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  12 ,   3 ,   1 , $RWR_W3           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  12 ,   4 ,   1 , $RWR_W3           ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  13 , $RWR_W3                       ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  13 ,   1 ,   1 , $RWR_W3           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  13 ,   2 ,   1 , $RWR_W3           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  13 ,   3 ,   1 , $RWR_W3           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  13 ,   4 ,   1 , $RWR_W3           ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter

rail.sides (                        $RWR_W4                       ) = 2                       ! Sides
rail.r.prof.file (        1 ,       $RWR_W4                       ) = 'UIC60.prr'             ! Right Profiles
rail.r.cant (                       $RWR_W4                       ) = 4.0000000000000000E+01  ! Right Cant
rail.lat.kind (                     $RWR_W4                       ) = 2                       ! Lateral rail distance method
rail.r.lat.dist (                   $RWR_W4                       ) = 0.0000000000000000E+00  ! Right Lateral rail distance
rail.l.prof.file (        1 ,       $RWR_W4                       ) = 'UIC60.prr'             ! Left Profiles
rail.l.cant (                       $RWR_W4                       ) = 4.0000000000000000E+01  ! Left Cant
rail.l.lat.dist (                   $RWR_W4                       ) = 0.0000000000000000E+00  ! Left Lateral rail distance
rail.gauge (                        $RWR_W4                       ) = 1.4350000000000001E+00  ! Track gauge
rail.gaugepos (                     $RWR_W4                       ) = 1.6000000000000000E-02  ! Gauge measurement position
rail.plot.par (           1 ,       $RWR_W4                       ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   1 , $RWR_W4                       ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   2 , $RWR_W4                       ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   3 , $RWR_W4                       ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   4 , $RWR_W4                       ) = -1.0000000000000000E+00 ! [-] Unknown plot parameter
rail.plot.par (           1 ,   5 , $RWR_W4                       ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   6 , $RWR_W4                       ) = 5.0000000000000000E+02  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   7 , $RWR_W4                       ) = 2.0000000000000000E+01  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   8 , $RWR_W4                       ) = 5.0000000000000000E+02  ! [-] Unknown plot parameter
rail.plot.par (           1 ,   9 , $RWR_W4                       ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  11 , $RWR_W4                       ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  12 , $RWR_W4                       ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  12 ,   1 ,   1 , $RWR_W4           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  12 ,   2 ,   1 , $RWR_W4           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  12 ,   3 ,   1 , $RWR_W4           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  12 ,   4 ,   1 , $RWR_W4           ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  13 , $RWR_W4                       ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  13 ,   1 ,   1 , $RWR_W4           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  13 ,   2 ,   1 , $RWR_W4           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  13 ,   3 ,   1 , $RWR_W4           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rail.plot.par (           1 ,  13 ,   4 ,   1 , $RWR_W4           ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter

!**********************************************************************
! Rail Wheel Pairs
!**********************************************************************
rwpair.wheel.untrue.kind (          $RWP_WR1                      ) = 1                       ! RWP_WHEEL_UNTRUENESS_KIND
rwpair.roller.untrue.kind (         $RWP_WR1                      ) = 1                       ! RWP_ROLLER_UNTRUENESS_KIND
rwpair.rail.kind (                  $RWP_WR1                      ) = 0                       ! RWP_RAIL_KIND
rwpair.cont.kind (                  $RWP_WR1                      ) = 3                       ! RWP_CONTACT_POINT_SEARCH_KIND
rwpair.fn.kind (                    $RWP_WR1                      ) = 2                       ! RWP_NORMAL_FORCE_KIND
rwpair.ft.refvel.kind (             $RWP_WR1                      ) = 3                       ! RWP_FT_REFERENCE_VELOCITY_KIND
rwpair.result.ref (                 $RWP_WR1                      ) = 1                       ! RWP_FORCE_REFSYS_TYPE
rwpair.side (                       $RWP_WR1                      ) = 1                       ! RWP_SIDE
rwpair.carrier.body (               $RWP_WR1                      ) = $B_wheelset1            ! RWP_CARRIER_BODY
rwpair.wheel.prof.file (            $RWP_WR1                      ) = 'S1002.prw'             ! RWP_WHEEL_PROFILE_FILENAME
rwpair.wheel.joint (                $RWP_WR1                      ) = $J_wheelset1            ! RWP_WHEEL_JOINT
rwpair.wheel.body (                 $RWP_WR1                      ) = $B_wheelset1            ! RWP_WHEEL_BODY
rwpair.wheel.state (                $RWP_WR1                      ) = 6                       ! RWP_WHEEL_ROT_JOINT_STATE
rwpair.wheel.marker (               $RWP_WR1                      ) = $M_wheelset1_BRF        ! RWP_WHEEL_MARKER
rwpair.wheel.rot.sign (             $RWP_WR1                      ) = -1                      ! RWP_WHEEL_ROTATION
rwpair.wheel.rnom (                 $RWP_WR1                      ) = 4.2999999999999999E-01  ! RWP_WHEEL_RADIUS
rwpair.wheel.latdist (              $RWP_WR1                      ) = 7.4650000000000005E-01  ! RWP_WHEEL_LATERAL_DISTANCE
rwpair.ft.kalkerweight (            $RWP_WR1                      ) = 1.0000000000000000E+00  ! RWP_FT_KALKERWEIGHT
rwpair.fric.mu (                    $RWP_WR1                      ) = 4.0000000000000002E-01  ! RWP_FRICTION_COEFFICIENT
rwpair.cont.e (                     $RWP_WR1                      ) = 2.1000000000000000E+11  ! RWP_CONTACT_E
rwpair.cont.pois (                  $RWP_WR1                      ) = 2.8000000000000003E-01  ! RWP_CONTACT_POISSON_NUMBER
rwpair.fn.dref (                    $RWP_WR1                      ) = 1.0000000000000000E+05  ! RWP_CONTACT_DAMPING
rwpair.wheel.prof.disc (            $RWP_WR1                      ) = 5.0000000000000001E-04  ! RWP_WHEEL_PROFILE_DISC
rwpair.cont.ref (                   $RWP_WR1                      ) = $RWC_FASTSIM            ! RWP_RWCONTACT
rwpair.rail.ref (                   $RWP_WR1                      ) = $RWR_W1                 ! RWP_RAIL_REFERENCE
rwpair.plot.par (         1 ,       $RWP_WR1                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   1 , $RWP_WR1                      ) = 5.0000000000000000E+02  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   1 ,   1 , $RWP_WR1                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   2 , $RWP_WR1                      ) = -2.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   3 , $RWP_WR1                      ) = 2.0000000000000000E-02  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   4 , $RWP_WR1                      ) = 5.0000000000000000E+04  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   5 , $RWP_WR1                      ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   6 , $RWP_WR1                      ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 , $RWP_WR1                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   1 , $RWP_WR1                ) = -1.0000000000000000E+00 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   2 , $RWP_WR1                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   3 ,   1 , $RWP_WR1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   4 ,   1 , $RWP_WR1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   5 ,   1 , $RWP_WR1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 , $RWP_WR1                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   1 , $RWP_WR1                ) = -1.0000000000000000E+00 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   2 , $RWP_WR1                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   3 ,   1 , $RWP_WR1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   4 ,   1 , $RWP_WR1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   5 ,   1 , $RWP_WR1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 , $RWP_WR1                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   1 , $RWP_WR1                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   2 , $RWP_WR1                ) = -1.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   3 ,   1 , $RWP_WR1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 , $RWP_WR1                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   1 , $RWP_WR1                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   2 , $RWP_WR1                ) = -1.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   3 , $RWP_WR1                ) = 5.0000000000000000E+01  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   4 ,   1 , $RWP_WR1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   5 ,   1 , $RWP_WR1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   6 ,   1 , $RWP_WR1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 , $RWP_WR1                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   1 ,   1 , $RWP_WR1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   2 ,   1 , $RWP_WR1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   3 ,   1 , $RWP_WR1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   4 ,   1 , $RWP_WR1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 , $RWP_WR1                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   1 ,   1 , $RWP_WR1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   2 ,   1 , $RWP_WR1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   3 ,   1 , $RWP_WR1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 , $RWP_WR1                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   1 ,   1 , $RWP_WR1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   2 ,   1 , $RWP_WR1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   3 ,   1 , $RWP_WR1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 , $RWP_WR1                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   1 ,   1 , $RWP_WR1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   2 ,   1 , $RWP_WR1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   3 ,   1 , $RWP_WR1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   4 ,   1 , $RWP_WR1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   5 ,   1 , $RWP_WR1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   6 ,   1 , $RWP_WR1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 , $RWP_WR1                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   1 ,   1 , $RWP_WR1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   2 ,   1 , $RWP_WR1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   3 ,   1 , $RWP_WR1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   4 ,   1 , $RWP_WR1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter

rwpair.wheel.untrue.kind (          $RWP_WL1                      ) = 1                       ! RWP_WHEEL_UNTRUENESS_KIND
rwpair.roller.untrue.kind (         $RWP_WL1                      ) = 1                       ! RWP_ROLLER_UNTRUENESS_KIND
rwpair.rail.kind (                  $RWP_WL1                      ) = 0                       ! RWP_RAIL_KIND
rwpair.cont.kind (                  $RWP_WL1                      ) = 3                       ! RWP_CONTACT_POINT_SEARCH_KIND
rwpair.fn.kind (                    $RWP_WL1                      ) = 2                       ! RWP_NORMAL_FORCE_KIND
rwpair.ft.refvel.kind (             $RWP_WL1                      ) = 3                       ! RWP_FT_REFERENCE_VELOCITY_KIND
rwpair.result.ref (                 $RWP_WL1                      ) = 1                       ! RWP_FORCE_REFSYS_TYPE
rwpair.side (                       $RWP_WL1                      ) = 2                       ! RWP_SIDE
rwpair.carrier.body (               $RWP_WL1                      ) = $B_wheelset1            ! RWP_CARRIER_BODY
rwpair.wheel.prof.file (            $RWP_WL1                      ) = 'S1002.prw'             ! RWP_WHEEL_PROFILE_FILENAME
rwpair.wheel.joint (                $RWP_WL1                      ) = $J_wheelset1            ! RWP_WHEEL_JOINT
rwpair.wheel.body (                 $RWP_WL1                      ) = $B_wheelset1            ! RWP_WHEEL_BODY
rwpair.wheel.state (                $RWP_WL1                      ) = 6                       ! RWP_WHEEL_ROT_JOINT_STATE
rwpair.wheel.marker (               $RWP_WL1                      ) = $M_wheelset1_BRF        ! RWP_WHEEL_MARKER
rwpair.wheel.rot.sign (             $RWP_WL1                      ) = -1                      ! RWP_WHEEL_ROTATION
rwpair.wheel.rnom (                 $RWP_WL1                      ) = 4.2999999999999999E-01  ! RWP_WHEEL_RADIUS
rwpair.wheel.latdist (              $RWP_WL1                      ) = 7.4650000000000005E-01  ! RWP_WHEEL_LATERAL_DISTANCE
rwpair.ft.kalkerweight (            $RWP_WL1                      ) = 1.0000000000000000E+00  ! RWP_FT_KALKERWEIGHT
rwpair.fric.mu (                    $RWP_WL1                      ) = 4.0000000000000002E-01  ! RWP_FRICTION_COEFFICIENT
rwpair.cont.e (                     $RWP_WL1                      ) = 2.1000000000000000E+11  ! RWP_CONTACT_E
rwpair.cont.pois (                  $RWP_WL1                      ) = 2.8000000000000003E-01  ! RWP_CONTACT_POISSON_NUMBER
rwpair.fn.dref (                    $RWP_WL1                      ) = 1.0000000000000000E+05  ! RWP_CONTACT_DAMPING
rwpair.wheel.prof.disc (            $RWP_WL1                      ) = 5.0000000000000001E-04  ! RWP_WHEEL_PROFILE_DISC
rwpair.cont.ref (                   $RWP_WL1                      ) = $RWC_FASTSIM            ! RWP_RWCONTACT
rwpair.rail.ref (                   $RWP_WL1                      ) = $RWR_W1                 ! RWP_RAIL_REFERENCE
rwpair.plot.par (         1 ,       $RWP_WL1                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   1 , $RWP_WL1                      ) = 5.0000000000000000E+02  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   1 ,   1 , $RWP_WL1                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   2 , $RWP_WL1                      ) = -2.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   3 , $RWP_WL1                      ) = 2.0000000000000000E-02  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   4 , $RWP_WL1                      ) = 5.0000000000000000E+04  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   5 , $RWP_WL1                      ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   6 , $RWP_WL1                      ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 , $RWP_WL1                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   1 , $RWP_WL1                ) = -1.0000000000000000E+00 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   2 , $RWP_WL1                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   3 ,   1 , $RWP_WL1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   4 ,   1 , $RWP_WL1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   5 ,   1 , $RWP_WL1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 , $RWP_WL1                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   1 , $RWP_WL1                ) = -1.0000000000000000E+00 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   2 , $RWP_WL1                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   3 ,   1 , $RWP_WL1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   4 ,   1 , $RWP_WL1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   5 ,   1 , $RWP_WL1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 , $RWP_WL1                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   1 , $RWP_WL1                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   2 , $RWP_WL1                ) = -1.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   3 ,   1 , $RWP_WL1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 , $RWP_WL1                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   1 , $RWP_WL1                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   2 , $RWP_WL1                ) = -1.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   3 , $RWP_WL1                ) = 5.0000000000000000E+01  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   4 ,   1 , $RWP_WL1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   5 ,   1 , $RWP_WL1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   6 ,   1 , $RWP_WL1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 , $RWP_WL1                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   1 ,   1 , $RWP_WL1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   2 ,   1 , $RWP_WL1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   3 ,   1 , $RWP_WL1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   4 ,   1 , $RWP_WL1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 , $RWP_WL1                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   1 ,   1 , $RWP_WL1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   2 ,   1 , $RWP_WL1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   3 ,   1 , $RWP_WL1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 , $RWP_WL1                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   1 ,   1 , $RWP_WL1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   2 ,   1 , $RWP_WL1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   3 ,   1 , $RWP_WL1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 , $RWP_WL1                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   1 ,   1 , $RWP_WL1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   2 ,   1 , $RWP_WL1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   3 ,   1 , $RWP_WL1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   4 ,   1 , $RWP_WL1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   5 ,   1 , $RWP_WL1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   6 ,   1 , $RWP_WL1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 , $RWP_WL1                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   1 ,   1 , $RWP_WL1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   2 ,   1 , $RWP_WL1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   3 ,   1 , $RWP_WL1          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   4 ,   1 , $RWP_WL1          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter

rwpair.wheel.untrue.kind (          $RWP_WR2                      ) = 1                       ! RWP_WHEEL_UNTRUENESS_KIND
rwpair.roller.untrue.kind (         $RWP_WR2                      ) = 1                       ! RWP_ROLLER_UNTRUENESS_KIND
rwpair.rail.kind (                  $RWP_WR2                      ) = 0                       ! RWP_RAIL_KIND
rwpair.cont.kind (                  $RWP_WR2                      ) = 3                       ! RWP_CONTACT_POINT_SEARCH_KIND
rwpair.fn.kind (                    $RWP_WR2                      ) = 2                       ! RWP_NORMAL_FORCE_KIND
rwpair.ft.refvel.kind (             $RWP_WR2                      ) = 3                       ! RWP_FT_REFERENCE_VELOCITY_KIND
rwpair.result.ref (                 $RWP_WR2                      ) = 1                       ! RWP_FORCE_REFSYS_TYPE
rwpair.side (                       $RWP_WR2                      ) = 1                       ! RWP_SIDE
rwpair.carrier.body (               $RWP_WR2                      ) = $B_wheelset2            ! RWP_CARRIER_BODY
rwpair.wheel.prof.file (            $RWP_WR2                      ) = 'S1002.prw'             ! RWP_WHEEL_PROFILE_FILENAME
rwpair.wheel.joint (                $RWP_WR2                      ) = $J_wheelset2            ! RWP_WHEEL_JOINT
rwpair.wheel.body (                 $RWP_WR2                      ) = $B_wheelset2            ! RWP_WHEEL_BODY
rwpair.wheel.state (                $RWP_WR2                      ) = 6                       ! RWP_WHEEL_ROT_JOINT_STATE
rwpair.wheel.marker (               $RWP_WR2                      ) = $M_wheelset2_BRF        ! RWP_WHEEL_MARKER
rwpair.wheel.rot.sign (             $RWP_WR2                      ) = -1                      ! RWP_WHEEL_ROTATION
rwpair.wheel.rnom (                 $RWP_WR2                      ) = 4.2999999999999999E-01  ! RWP_WHEEL_RADIUS
rwpair.wheel.latdist (              $RWP_WR2                      ) = 7.4650000000000005E-01  ! RWP_WHEEL_LATERAL_DISTANCE
rwpair.ft.kalkerweight (            $RWP_WR2                      ) = 1.0000000000000000E+00  ! RWP_FT_KALKERWEIGHT
rwpair.fric.mu (                    $RWP_WR2                      ) = 4.0000000000000002E-01  ! RWP_FRICTION_COEFFICIENT
rwpair.cont.e (                     $RWP_WR2                      ) = 2.1000000000000000E+11  ! RWP_CONTACT_E
rwpair.cont.pois (                  $RWP_WR2                      ) = 2.8000000000000003E-01  ! RWP_CONTACT_POISSON_NUMBER
rwpair.fn.dref (                    $RWP_WR2                      ) = 1.0000000000000000E+05  ! RWP_CONTACT_DAMPING
rwpair.wheel.prof.disc (            $RWP_WR2                      ) = 5.0000000000000001E-04  ! RWP_WHEEL_PROFILE_DISC
rwpair.cont.ref (                   $RWP_WR2                      ) = $RWC_FASTSIM            ! RWP_RWCONTACT
rwpair.rail.ref (                   $RWP_WR2                      ) = $RWR_W2                 ! RWP_RAIL_REFERENCE
rwpair.plot.par (         1 ,       $RWP_WR2                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   1 , $RWP_WR2                      ) = 5.0000000000000000E+02  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   1 ,   1 , $RWP_WR2                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   2 , $RWP_WR2                      ) = -2.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   3 , $RWP_WR2                      ) = 2.0000000000000000E-02  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   4 , $RWP_WR2                      ) = 5.0000000000000000E+04  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   5 , $RWP_WR2                      ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   6 , $RWP_WR2                      ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 , $RWP_WR2                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   1 , $RWP_WR2                ) = -1.0000000000000000E+00 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   2 , $RWP_WR2                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   3 ,   1 , $RWP_WR2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   4 ,   1 , $RWP_WR2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   5 ,   1 , $RWP_WR2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 , $RWP_WR2                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   1 , $RWP_WR2                ) = -1.0000000000000000E+00 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   2 , $RWP_WR2                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   3 ,   1 , $RWP_WR2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   4 ,   1 , $RWP_WR2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   5 ,   1 , $RWP_WR2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 , $RWP_WR2                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   1 , $RWP_WR2                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   2 , $RWP_WR2                ) = -1.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   3 ,   1 , $RWP_WR2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 , $RWP_WR2                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   1 , $RWP_WR2                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   2 , $RWP_WR2                ) = -1.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   3 , $RWP_WR2                ) = 5.0000000000000000E+01  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   4 ,   1 , $RWP_WR2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   5 ,   1 , $RWP_WR2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   6 ,   1 , $RWP_WR2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 , $RWP_WR2                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   1 ,   1 , $RWP_WR2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   2 ,   1 , $RWP_WR2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   3 ,   1 , $RWP_WR2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   4 ,   1 , $RWP_WR2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 , $RWP_WR2                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   1 ,   1 , $RWP_WR2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   2 ,   1 , $RWP_WR2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   3 ,   1 , $RWP_WR2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 , $RWP_WR2                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   1 ,   1 , $RWP_WR2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   2 ,   1 , $RWP_WR2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   3 ,   1 , $RWP_WR2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 , $RWP_WR2                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   1 ,   1 , $RWP_WR2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   2 ,   1 , $RWP_WR2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   3 ,   1 , $RWP_WR2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   4 ,   1 , $RWP_WR2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   5 ,   1 , $RWP_WR2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   6 ,   1 , $RWP_WR2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 , $RWP_WR2                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   1 ,   1 , $RWP_WR2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   2 ,   1 , $RWP_WR2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   3 ,   1 , $RWP_WR2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   4 ,   1 , $RWP_WR2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter

rwpair.wheel.untrue.kind (          $RWP_WL2                      ) = 1                       ! RWP_WHEEL_UNTRUENESS_KIND
rwpair.roller.untrue.kind (         $RWP_WL2                      ) = 1                       ! RWP_ROLLER_UNTRUENESS_KIND
rwpair.rail.kind (                  $RWP_WL2                      ) = 0                       ! RWP_RAIL_KIND
rwpair.cont.kind (                  $RWP_WL2                      ) = 3                       ! RWP_CONTACT_POINT_SEARCH_KIND
rwpair.fn.kind (                    $RWP_WL2                      ) = 2                       ! RWP_NORMAL_FORCE_KIND
rwpair.ft.refvel.kind (             $RWP_WL2                      ) = 3                       ! RWP_FT_REFERENCE_VELOCITY_KIND
rwpair.result.ref (                 $RWP_WL2                      ) = 1                       ! RWP_FORCE_REFSYS_TYPE
rwpair.side (                       $RWP_WL2                      ) = 2                       ! RWP_SIDE
rwpair.carrier.body (               $RWP_WL2                      ) = $B_wheelset2            ! RWP_CARRIER_BODY
rwpair.wheel.prof.file (            $RWP_WL2                      ) = 'S1002.prw'             ! RWP_WHEEL_PROFILE_FILENAME
rwpair.wheel.joint (                $RWP_WL2                      ) = $J_wheelset2            ! RWP_WHEEL_JOINT
rwpair.wheel.body (                 $RWP_WL2                      ) = $B_wheelset2            ! RWP_WHEEL_BODY
rwpair.wheel.state (                $RWP_WL2                      ) = 6                       ! RWP_WHEEL_ROT_JOINT_STATE
rwpair.wheel.marker (               $RWP_WL2                      ) = $M_wheelset2_BRF        ! RWP_WHEEL_MARKER
rwpair.wheel.rot.sign (             $RWP_WL2                      ) = -1                      ! RWP_WHEEL_ROTATION
rwpair.wheel.rnom (                 $RWP_WL2                      ) = 4.2999999999999999E-01  ! RWP_WHEEL_RADIUS
rwpair.wheel.latdist (              $RWP_WL2                      ) = 7.4650000000000005E-01  ! RWP_WHEEL_LATERAL_DISTANCE
rwpair.ft.kalkerweight (            $RWP_WL2                      ) = 1.0000000000000000E+00  ! RWP_FT_KALKERWEIGHT
rwpair.fric.mu (                    $RWP_WL2                      ) = 4.0000000000000002E-01  ! RWP_FRICTION_COEFFICIENT
rwpair.cont.e (                     $RWP_WL2                      ) = 2.1000000000000000E+11  ! RWP_CONTACT_E
rwpair.cont.pois (                  $RWP_WL2                      ) = 2.8000000000000003E-01  ! RWP_CONTACT_POISSON_NUMBER
rwpair.fn.dref (                    $RWP_WL2                      ) = 1.0000000000000000E+05  ! RWP_CONTACT_DAMPING
rwpair.wheel.prof.disc (            $RWP_WL2                      ) = 5.0000000000000001E-04  ! RWP_WHEEL_PROFILE_DISC
rwpair.cont.ref (                   $RWP_WL2                      ) = $RWC_FASTSIM            ! RWP_RWCONTACT
rwpair.rail.ref (                   $RWP_WL2                      ) = $RWR_W2                 ! RWP_RAIL_REFERENCE
rwpair.plot.par (         1 ,       $RWP_WL2                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   1 , $RWP_WL2                      ) = 5.0000000000000000E+02  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   1 ,   1 , $RWP_WL2                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   2 , $RWP_WL2                      ) = -2.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   3 , $RWP_WL2                      ) = 2.0000000000000000E-02  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   4 , $RWP_WL2                      ) = 5.0000000000000000E+04  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   5 , $RWP_WL2                      ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   6 , $RWP_WL2                      ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 , $RWP_WL2                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   1 , $RWP_WL2                ) = -1.0000000000000000E+00 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   2 , $RWP_WL2                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   3 ,   1 , $RWP_WL2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   4 ,   1 , $RWP_WL2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   5 ,   1 , $RWP_WL2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 , $RWP_WL2                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   1 , $RWP_WL2                ) = -1.0000000000000000E+00 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   2 , $RWP_WL2                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   3 ,   1 , $RWP_WL2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   4 ,   1 , $RWP_WL2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   5 ,   1 , $RWP_WL2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 , $RWP_WL2                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   1 , $RWP_WL2                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   2 , $RWP_WL2                ) = -1.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   3 ,   1 , $RWP_WL2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 , $RWP_WL2                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   1 , $RWP_WL2                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   2 , $RWP_WL2                ) = -1.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   3 , $RWP_WL2                ) = 5.0000000000000000E+01  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   4 ,   1 , $RWP_WL2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   5 ,   1 , $RWP_WL2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   6 ,   1 , $RWP_WL2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 , $RWP_WL2                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   1 ,   1 , $RWP_WL2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   2 ,   1 , $RWP_WL2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   3 ,   1 , $RWP_WL2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   4 ,   1 , $RWP_WL2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 , $RWP_WL2                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   1 ,   1 , $RWP_WL2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   2 ,   1 , $RWP_WL2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   3 ,   1 , $RWP_WL2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 , $RWP_WL2                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   1 ,   1 , $RWP_WL2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   2 ,   1 , $RWP_WL2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   3 ,   1 , $RWP_WL2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 , $RWP_WL2                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   1 ,   1 , $RWP_WL2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   2 ,   1 , $RWP_WL2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   3 ,   1 , $RWP_WL2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   4 ,   1 , $RWP_WL2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   5 ,   1 , $RWP_WL2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   6 ,   1 , $RWP_WL2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 , $RWP_WL2                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   1 ,   1 , $RWP_WL2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   2 ,   1 , $RWP_WL2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   3 ,   1 , $RWP_WL2          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   4 ,   1 , $RWP_WL2          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter

rwpair.wheel.untrue.kind (          $RWP_WR3                      ) = 1                       ! RWP_WHEEL_UNTRUENESS_KIND
rwpair.roller.untrue.kind (         $RWP_WR3                      ) = 1                       ! RWP_ROLLER_UNTRUENESS_KIND
rwpair.rail.kind (                  $RWP_WR3                      ) = 0                       ! RWP_RAIL_KIND
rwpair.cont.kind (                  $RWP_WR3                      ) = 3                       ! RWP_CONTACT_POINT_SEARCH_KIND
rwpair.fn.kind (                    $RWP_WR3                      ) = 2                       ! RWP_NORMAL_FORCE_KIND
rwpair.ft.refvel.kind (             $RWP_WR3                      ) = 3                       ! RWP_FT_REFERENCE_VELOCITY_KIND
rwpair.result.ref (                 $RWP_WR3                      ) = 1                       ! RWP_FORCE_REFSYS_TYPE
rwpair.side (                       $RWP_WR3                      ) = 1                       ! RWP_SIDE
rwpair.carrier.body (               $RWP_WR3                      ) = $B_wheelset3            ! RWP_CARRIER_BODY
rwpair.wheel.prof.file (            $RWP_WR3                      ) = 'S1002.prw'             ! RWP_WHEEL_PROFILE_FILENAME
rwpair.wheel.joint (                $RWP_WR3                      ) = $J_wheelset3            ! RWP_WHEEL_JOINT
rwpair.wheel.body (                 $RWP_WR3                      ) = $B_wheelset3            ! RWP_WHEEL_BODY
rwpair.wheel.state (                $RWP_WR3                      ) = 6                       ! RWP_WHEEL_ROT_JOINT_STATE
rwpair.wheel.marker (               $RWP_WR3                      ) = $M_wheelset3_BRF        ! RWP_WHEEL_MARKER
rwpair.wheel.rot.sign (             $RWP_WR3                      ) = -1                      ! RWP_WHEEL_ROTATION
rwpair.wheel.rnom (                 $RWP_WR3                      ) = 4.2999999999999999E-01  ! RWP_WHEEL_RADIUS
rwpair.wheel.latdist (              $RWP_WR3                      ) = 7.4650000000000005E-01  ! RWP_WHEEL_LATERAL_DISTANCE
rwpair.ft.kalkerweight (            $RWP_WR3                      ) = 1.0000000000000000E+00  ! RWP_FT_KALKERWEIGHT
rwpair.fric.mu (                    $RWP_WR3                      ) = 4.0000000000000002E-01  ! RWP_FRICTION_COEFFICIENT
rwpair.cont.e (                     $RWP_WR3                      ) = 2.1000000000000000E+11  ! RWP_CONTACT_E
rwpair.cont.pois (                  $RWP_WR3                      ) = 2.8000000000000003E-01  ! RWP_CONTACT_POISSON_NUMBER
rwpair.fn.dref (                    $RWP_WR3                      ) = 1.0000000000000000E+05  ! RWP_CONTACT_DAMPING
rwpair.wheel.prof.disc (            $RWP_WR3                      ) = 5.0000000000000001E-04  ! RWP_WHEEL_PROFILE_DISC
rwpair.cont.ref (                   $RWP_WR3                      ) = $RWC_FASTSIM            ! RWP_RWCONTACT
rwpair.rail.ref (                   $RWP_WR3                      ) = $RWR_W3                 ! RWP_RAIL_REFERENCE
rwpair.plot.par (         1 ,       $RWP_WR3                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   1 , $RWP_WR3                      ) = 5.0000000000000000E+02  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   1 ,   1 , $RWP_WR3                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   2 , $RWP_WR3                      ) = -2.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   3 , $RWP_WR3                      ) = 2.0000000000000000E-02  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   4 , $RWP_WR3                      ) = 5.0000000000000000E+04  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   5 , $RWP_WR3                      ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   6 , $RWP_WR3                      ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 , $RWP_WR3                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   1 , $RWP_WR3                ) = -1.0000000000000000E+00 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   2 , $RWP_WR3                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   3 ,   1 , $RWP_WR3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   4 ,   1 , $RWP_WR3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   5 ,   1 , $RWP_WR3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 , $RWP_WR3                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   1 , $RWP_WR3                ) = -1.0000000000000000E+00 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   2 , $RWP_WR3                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   3 ,   1 , $RWP_WR3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   4 ,   1 , $RWP_WR3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   5 ,   1 , $RWP_WR3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 , $RWP_WR3                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   1 , $RWP_WR3                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   2 , $RWP_WR3                ) = -1.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   3 ,   1 , $RWP_WR3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 , $RWP_WR3                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   1 , $RWP_WR3                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   2 , $RWP_WR3                ) = -1.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   3 , $RWP_WR3                ) = 5.0000000000000000E+01  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   4 ,   1 , $RWP_WR3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   5 ,   1 , $RWP_WR3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   6 ,   1 , $RWP_WR3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 , $RWP_WR3                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   1 ,   1 , $RWP_WR3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   2 ,   1 , $RWP_WR3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   3 ,   1 , $RWP_WR3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   4 ,   1 , $RWP_WR3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 , $RWP_WR3                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   1 ,   1 , $RWP_WR3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   2 ,   1 , $RWP_WR3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   3 ,   1 , $RWP_WR3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 , $RWP_WR3                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   1 ,   1 , $RWP_WR3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   2 ,   1 , $RWP_WR3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   3 ,   1 , $RWP_WR3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 , $RWP_WR3                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   1 ,   1 , $RWP_WR3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   2 ,   1 , $RWP_WR3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   3 ,   1 , $RWP_WR3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   4 ,   1 , $RWP_WR3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   5 ,   1 , $RWP_WR3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   6 ,   1 , $RWP_WR3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 , $RWP_WR3                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   1 ,   1 , $RWP_WR3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   2 ,   1 , $RWP_WR3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   3 ,   1 , $RWP_WR3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   4 ,   1 , $RWP_WR3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter

rwpair.wheel.untrue.kind (          $RWP_WL3                      ) = 1                       ! RWP_WHEEL_UNTRUENESS_KIND
rwpair.roller.untrue.kind (         $RWP_WL3                      ) = 1                       ! RWP_ROLLER_UNTRUENESS_KIND
rwpair.rail.kind (                  $RWP_WL3                      ) = 0                       ! RWP_RAIL_KIND
rwpair.cont.kind (                  $RWP_WL3                      ) = 3                       ! RWP_CONTACT_POINT_SEARCH_KIND
rwpair.fn.kind (                    $RWP_WL3                      ) = 2                       ! RWP_NORMAL_FORCE_KIND
rwpair.ft.refvel.kind (             $RWP_WL3                      ) = 3                       ! RWP_FT_REFERENCE_VELOCITY_KIND
rwpair.result.ref (                 $RWP_WL3                      ) = 1                       ! RWP_FORCE_REFSYS_TYPE
rwpair.side (                       $RWP_WL3                      ) = 2                       ! RWP_SIDE
rwpair.carrier.body (               $RWP_WL3                      ) = $B_wheelset3            ! RWP_CARRIER_BODY
rwpair.wheel.prof.file (            $RWP_WL3                      ) = 'S1002.prw'             ! RWP_WHEEL_PROFILE_FILENAME
rwpair.wheel.joint (                $RWP_WL3                      ) = $J_wheelset3            ! RWP_WHEEL_JOINT
rwpair.wheel.body (                 $RWP_WL3                      ) = $B_wheelset3            ! RWP_WHEEL_BODY
rwpair.wheel.state (                $RWP_WL3                      ) = 6                       ! RWP_WHEEL_ROT_JOINT_STATE
rwpair.wheel.marker (               $RWP_WL3                      ) = $M_wheelset3_BRF        ! RWP_WHEEL_MARKER
rwpair.wheel.rot.sign (             $RWP_WL3                      ) = -1                      ! RWP_WHEEL_ROTATION
rwpair.wheel.rnom (                 $RWP_WL3                      ) = 4.2999999999999999E-01  ! RWP_WHEEL_RADIUS
rwpair.wheel.latdist (              $RWP_WL3                      ) = 7.4650000000000005E-01  ! RWP_WHEEL_LATERAL_DISTANCE
rwpair.ft.kalkerweight (            $RWP_WL3                      ) = 1.0000000000000000E+00  ! RWP_FT_KALKERWEIGHT
rwpair.fric.mu (                    $RWP_WL3                      ) = 4.0000000000000002E-01  ! RWP_FRICTION_COEFFICIENT
rwpair.cont.e (                     $RWP_WL3                      ) = 2.1000000000000000E+11  ! RWP_CONTACT_E
rwpair.cont.pois (                  $RWP_WL3                      ) = 2.8000000000000003E-01  ! RWP_CONTACT_POISSON_NUMBER
rwpair.fn.dref (                    $RWP_WL3                      ) = 1.0000000000000000E+05  ! RWP_CONTACT_DAMPING
rwpair.wheel.prof.disc (            $RWP_WL3                      ) = 5.0000000000000001E-04  ! RWP_WHEEL_PROFILE_DISC
rwpair.cont.ref (                   $RWP_WL3                      ) = $RWC_FASTSIM            ! RWP_RWCONTACT
rwpair.rail.ref (                   $RWP_WL3                      ) = $RWR_W3                 ! RWP_RAIL_REFERENCE
rwpair.plot.par (         1 ,       $RWP_WL3                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   1 , $RWP_WL3                      ) = 5.0000000000000000E+02  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   1 ,   1 , $RWP_WL3                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   2 , $RWP_WL3                      ) = -2.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   3 , $RWP_WL3                      ) = 2.0000000000000000E-02  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   4 , $RWP_WL3                      ) = 5.0000000000000000E+04  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   5 , $RWP_WL3                      ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   6 , $RWP_WL3                      ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 , $RWP_WL3                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   1 , $RWP_WL3                ) = -1.0000000000000000E+00 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   2 , $RWP_WL3                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   3 ,   1 , $RWP_WL3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   4 ,   1 , $RWP_WL3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   5 ,   1 , $RWP_WL3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 , $RWP_WL3                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   1 , $RWP_WL3                ) = -1.0000000000000000E+00 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   2 , $RWP_WL3                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   3 ,   1 , $RWP_WL3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   4 ,   1 , $RWP_WL3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   5 ,   1 , $RWP_WL3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 , $RWP_WL3                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   1 , $RWP_WL3                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   2 , $RWP_WL3                ) = -1.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   3 ,   1 , $RWP_WL3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 , $RWP_WL3                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   1 , $RWP_WL3                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   2 , $RWP_WL3                ) = -1.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   3 , $RWP_WL3                ) = 5.0000000000000000E+01  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   4 ,   1 , $RWP_WL3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   5 ,   1 , $RWP_WL3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   6 ,   1 , $RWP_WL3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 , $RWP_WL3                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   1 ,   1 , $RWP_WL3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   2 ,   1 , $RWP_WL3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   3 ,   1 , $RWP_WL3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   4 ,   1 , $RWP_WL3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 , $RWP_WL3                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   1 ,   1 , $RWP_WL3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   2 ,   1 , $RWP_WL3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   3 ,   1 , $RWP_WL3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 , $RWP_WL3                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   1 ,   1 , $RWP_WL3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   2 ,   1 , $RWP_WL3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   3 ,   1 , $RWP_WL3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 , $RWP_WL3                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   1 ,   1 , $RWP_WL3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   2 ,   1 , $RWP_WL3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   3 ,   1 , $RWP_WL3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   4 ,   1 , $RWP_WL3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   5 ,   1 , $RWP_WL3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   6 ,   1 , $RWP_WL3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 , $RWP_WL3                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   1 ,   1 , $RWP_WL3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   2 ,   1 , $RWP_WL3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   3 ,   1 , $RWP_WL3          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   4 ,   1 , $RWP_WL3          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter

rwpair.wheel.untrue.kind (          $RWP_WR4                      ) = 1                       ! RWP_WHEEL_UNTRUENESS_KIND
rwpair.roller.untrue.kind (         $RWP_WR4                      ) = 1                       ! RWP_ROLLER_UNTRUENESS_KIND
rwpair.rail.kind (                  $RWP_WR4                      ) = 0                       ! RWP_RAIL_KIND
rwpair.cont.kind (                  $RWP_WR4                      ) = 3                       ! RWP_CONTACT_POINT_SEARCH_KIND
rwpair.fn.kind (                    $RWP_WR4                      ) = 2                       ! RWP_NORMAL_FORCE_KIND
rwpair.ft.refvel.kind (             $RWP_WR4                      ) = 3                       ! RWP_FT_REFERENCE_VELOCITY_KIND
rwpair.result.ref (                 $RWP_WR4                      ) = 1                       ! RWP_FORCE_REFSYS_TYPE
rwpair.side (                       $RWP_WR4                      ) = 1                       ! RWP_SIDE
rwpair.carrier.body (               $RWP_WR4                      ) = $B_wheelset4            ! RWP_CARRIER_BODY
rwpair.wheel.prof.file (            $RWP_WR4                      ) = 'S1002.prw'             ! RWP_WHEEL_PROFILE_FILENAME
rwpair.wheel.joint (                $RWP_WR4                      ) = $J_wheelset4            ! RWP_WHEEL_JOINT
rwpair.wheel.body (                 $RWP_WR4                      ) = $B_wheelset4            ! RWP_WHEEL_BODY
rwpair.wheel.state (                $RWP_WR4                      ) = 6                       ! RWP_WHEEL_ROT_JOINT_STATE
rwpair.wheel.marker (               $RWP_WR4                      ) = $M_wheelset4_BRF        ! RWP_WHEEL_MARKER
rwpair.wheel.rot.sign (             $RWP_WR4                      ) = -1                      ! RWP_WHEEL_ROTATION
rwpair.wheel.rnom (                 $RWP_WR4                      ) = 4.2999999999999999E-01  ! RWP_WHEEL_RADIUS
rwpair.wheel.latdist (              $RWP_WR4                      ) = 7.4650000000000005E-01  ! RWP_WHEEL_LATERAL_DISTANCE
rwpair.ft.kalkerweight (            $RWP_WR4                      ) = 1.0000000000000000E+00  ! RWP_FT_KALKERWEIGHT
rwpair.fric.mu (                    $RWP_WR4                      ) = 4.0000000000000002E-01  ! RWP_FRICTION_COEFFICIENT
rwpair.cont.e (                     $RWP_WR4                      ) = 2.1000000000000000E+11  ! RWP_CONTACT_E
rwpair.cont.pois (                  $RWP_WR4                      ) = 2.8000000000000003E-01  ! RWP_CONTACT_POISSON_NUMBER
rwpair.fn.dref (                    $RWP_WR4                      ) = 1.0000000000000000E+05  ! RWP_CONTACT_DAMPING
rwpair.wheel.prof.disc (            $RWP_WR4                      ) = 5.0000000000000001E-04  ! RWP_WHEEL_PROFILE_DISC
rwpair.cont.ref (                   $RWP_WR4                      ) = $RWC_FASTSIM            ! RWP_RWCONTACT
rwpair.rail.ref (                   $RWP_WR4                      ) = $RWR_W4                 ! RWP_RAIL_REFERENCE
rwpair.plot.par (         1 ,       $RWP_WR4                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   1 , $RWP_WR4                      ) = 5.0000000000000000E+02  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   1 ,   1 , $RWP_WR4                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   2 , $RWP_WR4                      ) = -2.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   3 , $RWP_WR4                      ) = 2.0000000000000000E-02  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   4 , $RWP_WR4                      ) = 5.0000000000000000E+04  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   5 , $RWP_WR4                      ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   6 , $RWP_WR4                      ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 , $RWP_WR4                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   1 , $RWP_WR4                ) = -1.0000000000000000E+00 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   2 , $RWP_WR4                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   3 ,   1 , $RWP_WR4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   4 ,   1 , $RWP_WR4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   5 ,   1 , $RWP_WR4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 , $RWP_WR4                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   1 , $RWP_WR4                ) = -1.0000000000000000E+00 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   2 , $RWP_WR4                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   3 ,   1 , $RWP_WR4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   4 ,   1 , $RWP_WR4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   5 ,   1 , $RWP_WR4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 , $RWP_WR4                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   1 , $RWP_WR4                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   2 , $RWP_WR4                ) = -1.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   3 ,   1 , $RWP_WR4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 , $RWP_WR4                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   1 , $RWP_WR4                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   2 , $RWP_WR4                ) = -1.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   3 , $RWP_WR4                ) = 5.0000000000000000E+01  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   4 ,   1 , $RWP_WR4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   5 ,   1 , $RWP_WR4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   6 ,   1 , $RWP_WR4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 , $RWP_WR4                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   1 ,   1 , $RWP_WR4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   2 ,   1 , $RWP_WR4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   3 ,   1 , $RWP_WR4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   4 ,   1 , $RWP_WR4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 , $RWP_WR4                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   1 ,   1 , $RWP_WR4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   2 ,   1 , $RWP_WR4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   3 ,   1 , $RWP_WR4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 , $RWP_WR4                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   1 ,   1 , $RWP_WR4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   2 ,   1 , $RWP_WR4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   3 ,   1 , $RWP_WR4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 , $RWP_WR4                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   1 ,   1 , $RWP_WR4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   2 ,   1 , $RWP_WR4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   3 ,   1 , $RWP_WR4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   4 ,   1 , $RWP_WR4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   5 ,   1 , $RWP_WR4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   6 ,   1 , $RWP_WR4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 , $RWP_WR4                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   1 ,   1 , $RWP_WR4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   2 ,   1 , $RWP_WR4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   3 ,   1 , $RWP_WR4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   4 ,   1 , $RWP_WR4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter

rwpair.wheel.untrue.kind (          $RWP_WL4                      ) = 1                       ! RWP_WHEEL_UNTRUENESS_KIND
rwpair.roller.untrue.kind (         $RWP_WL4                      ) = 1                       ! RWP_ROLLER_UNTRUENESS_KIND
rwpair.rail.kind (                  $RWP_WL4                      ) = 0                       ! RWP_RAIL_KIND
rwpair.cont.kind (                  $RWP_WL4                      ) = 3                       ! RWP_CONTACT_POINT_SEARCH_KIND
rwpair.fn.kind (                    $RWP_WL4                      ) = 2                       ! RWP_NORMAL_FORCE_KIND
rwpair.ft.refvel.kind (             $RWP_WL4                      ) = 3                       ! RWP_FT_REFERENCE_VELOCITY_KIND
rwpair.result.ref (                 $RWP_WL4                      ) = 1                       ! RWP_FORCE_REFSYS_TYPE
rwpair.side (                       $RWP_WL4                      ) = 2                       ! RWP_SIDE
rwpair.carrier.body (               $RWP_WL4                      ) = $B_wheelset4            ! RWP_CARRIER_BODY
rwpair.wheel.prof.file (            $RWP_WL4                      ) = 'S1002.prw'             ! RWP_WHEEL_PROFILE_FILENAME
rwpair.wheel.joint (                $RWP_WL4                      ) = $J_wheelset4            ! RWP_WHEEL_JOINT
rwpair.wheel.body (                 $RWP_WL4                      ) = $B_wheelset4            ! RWP_WHEEL_BODY
rwpair.wheel.state (                $RWP_WL4                      ) = 6                       ! RWP_WHEEL_ROT_JOINT_STATE
rwpair.wheel.marker (               $RWP_WL4                      ) = $M_wheelset4_BRF        ! RWP_WHEEL_MARKER
rwpair.wheel.rot.sign (             $RWP_WL4                      ) = -1                      ! RWP_WHEEL_ROTATION
rwpair.wheel.rnom (                 $RWP_WL4                      ) = 4.2999999999999999E-01  ! RWP_WHEEL_RADIUS
rwpair.wheel.latdist (              $RWP_WL4                      ) = 7.4650000000000005E-01  ! RWP_WHEEL_LATERAL_DISTANCE
rwpair.ft.kalkerweight (            $RWP_WL4                      ) = 1.0000000000000000E+00  ! RWP_FT_KALKERWEIGHT
rwpair.fric.mu (                    $RWP_WL4                      ) = 4.0000000000000002E-01  ! RWP_FRICTION_COEFFICIENT
rwpair.cont.e (                     $RWP_WL4                      ) = 2.1000000000000000E+11  ! RWP_CONTACT_E
rwpair.cont.pois (                  $RWP_WL4                      ) = 2.8000000000000003E-01  ! RWP_CONTACT_POISSON_NUMBER
rwpair.fn.dref (                    $RWP_WL4                      ) = 1.0000000000000000E+05  ! RWP_CONTACT_DAMPING
rwpair.wheel.prof.disc (            $RWP_WL4                      ) = 5.0000000000000001E-04  ! RWP_WHEEL_PROFILE_DISC
rwpair.cont.ref (                   $RWP_WL4                      ) = $RWC_FASTSIM            ! RWP_RWCONTACT
rwpair.rail.ref (                   $RWP_WL4                      ) = $RWR_W4                 ! RWP_RAIL_REFERENCE
rwpair.plot.par (         1 ,       $RWP_WL4                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   1 , $RWP_WL4                      ) = 5.0000000000000000E+02  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   1 ,   1 , $RWP_WL4                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   2 , $RWP_WL4                      ) = -2.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   3 , $RWP_WL4                      ) = 2.0000000000000000E-02  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   4 , $RWP_WL4                      ) = 5.0000000000000000E+04  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   5 , $RWP_WL4                      ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,   6 , $RWP_WL4                      ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 , $RWP_WL4                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   1 , $RWP_WL4                ) = -1.0000000000000000E+00 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   2 , $RWP_WL4                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   3 ,   1 , $RWP_WL4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   4 ,   1 , $RWP_WL4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  14 ,   5 ,   1 , $RWP_WL4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 , $RWP_WL4                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   1 , $RWP_WL4                ) = -1.0000000000000000E+00 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   2 , $RWP_WL4                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   3 ,   1 , $RWP_WL4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   4 ,   1 , $RWP_WL4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  15 ,   5 ,   1 , $RWP_WL4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 , $RWP_WL4                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   1 , $RWP_WL4                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   2 , $RWP_WL4                ) = -1.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  16 ,   3 ,   1 , $RWP_WL4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 , $RWP_WL4                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   1 , $RWP_WL4                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   2 , $RWP_WL4                ) = -1.0000000000000000E-02 ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   3 , $RWP_WL4                ) = 5.0000000000000000E+01  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   4 ,   1 , $RWP_WL4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   5 ,   1 , $RWP_WL4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  17 ,   6 ,   1 , $RWP_WL4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 , $RWP_WL4                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   1 ,   1 , $RWP_WL4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   2 ,   1 , $RWP_WL4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   3 ,   1 , $RWP_WL4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  18 ,   4 ,   1 , $RWP_WL4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 , $RWP_WL4                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   1 ,   1 , $RWP_WL4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   2 ,   1 , $RWP_WL4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  19 ,   3 ,   1 , $RWP_WL4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 , $RWP_WL4                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   1 ,   1 , $RWP_WL4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   2 ,   1 , $RWP_WL4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  20 ,   3 ,   1 , $RWP_WL4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 , $RWP_WL4                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   1 ,   1 , $RWP_WL4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   2 ,   1 , $RWP_WL4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   3 ,   1 , $RWP_WL4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   4 ,   1 , $RWP_WL4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   5 ,   1 , $RWP_WL4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  21 ,   6 ,   1 , $RWP_WL4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 , $RWP_WL4                      ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   1 ,   1 , $RWP_WL4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   2 ,   1 , $RWP_WL4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   3 ,   1 , $RWP_WL4          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
rwpair.plot.par (         1 ,  22 ,   4 ,   1 , $RWP_WL4          ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter

!**********************************************************************
! Rail Wheel Contacts
!**********************************************************************
rwcontact.type (                    $RWC_FASTSIM                  ) = 6                       ! Type
rwcontact.par (           1 ,       $RWC_FASTSIM                  ) = 1.1000000000000000E+01  ! [-] mx,my Initial patch discret.

!**********************************************************************
! Excitations
!**********************************************************************
excit.type (                        $E_Lateral_L                  ) = 109                     ! Type
excit.disabled (                    $E_Lateral_L                  ) = 0                       ! Disabled
excit.par (               1 ,       $E_Lateral_L                  ) = $N_irregulation.$I_lateral_left ! [-] Excitation Input Function
excit.par (               2 ,       $E_Lateral_L                  ) = 0.0000000000000000E+00  ! [m] Start position (0=original)
excit.par (               3 ,       $E_Lateral_L                  ) = 0.0000000000000000E+00  ! [m] End position (0=original)
excit.par (               7 ,       $E_Lateral_L                  ) = 0.0000000000000000E+00  ! [-] Offset
excit.par (               9 ,       $E_Lateral_L                  ) = 0.0000000000000000E+00  ! [-] Scaling (about mean value)
excit.plot.par (          1 ,       $E_Lateral_L                  ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_Lateral_L                  ) = 1.0240000000000000E+03  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_Lateral_L                  ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_Lateral_L                  ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_Lateral_L                  ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_Lateral_L                  ) = 1.0000000000000000E+02  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_Lateral_L            ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_Lateral_L            ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_Lateral_L            ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter

excit.type (                        $E_Lateral_R                  ) = 109                     ! Type
excit.disabled (                    $E_Lateral_R                  ) = 0                       ! Disabled
excit.par (               1 ,       $E_Lateral_R                  ) = $N_irregulation.$I_lateral_right ! [-] Excitation Input Function
excit.par (               2 ,       $E_Lateral_R                  ) = 0.0000000000000000E+00  ! [m] Start position (0=original)
excit.par (               3 ,       $E_Lateral_R                  ) = 0.0000000000000000E+00  ! [m] End position (0=original)
excit.par (               7 ,       $E_Lateral_R                  ) = 0.0000000000000000E+00  ! [-] Offset
excit.par (               9 ,       $E_Lateral_R                  ) = 0.0000000000000000E+00  ! [-] Scaling (about mean value)
excit.plot.par (          1 ,       $E_Lateral_R                  ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_Lateral_R                  ) = 1.0240000000000000E+03  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_Lateral_R                  ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_Lateral_R                  ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_Lateral_R                  ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_Lateral_R                  ) = 1.0000000000000000E+01  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_Lateral_R            ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_Lateral_R            ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_Lateral_R            ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter

excit.type (                        $E_Vertical_L                 ) = 109                     ! Type
excit.disabled (                    $E_Vertical_L                 ) = 0                       ! Disabled
excit.par (               1 ,       $E_Vertical_L                 ) = $N_irregulation.$I_vertical_left ! [-] Excitation Input Function
excit.par (               2 ,       $E_Vertical_L                 ) = 0.0000000000000000E+00  ! [m] Start position (0=original)
excit.par (               3 ,       $E_Vertical_L                 ) = 0.0000000000000000E+00  ! [m] End position (0=original)
excit.par (               7 ,       $E_Vertical_L                 ) = 0.0000000000000000E+00  ! [-] Offset
excit.par (               9 ,       $E_Vertical_L                 ) = 0.0000000000000000E+00  ! [-] Scaling (about mean value)
excit.plot.par (          1 ,       $E_Vertical_L                 ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_Vertical_L                 ) = 1.0240000000000000E+03  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_Vertical_L                 ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_Vertical_L                 ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_Vertical_L                 ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_Vertical_L                 ) = 1.0000000000000000E+01  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_Vertical_L           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_Vertical_L           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_Vertical_L           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter

excit.type (                        $E_Vertical_R                 ) = 109                     ! Type
excit.disabled (                    $E_Vertical_R                 ) = 0                       ! Disabled
excit.par (               1 ,       $E_Vertical_R                 ) = $N_irregulation.$I_vertical_right ! [-] Excitation Input Function
excit.par (               2 ,       $E_Vertical_R                 ) = 0.0000000000000000E+00  ! [m] Start position (0=original)
excit.par (               3 ,       $E_Vertical_R                 ) = 0.0000000000000000E+00  ! [m] End position (0=original)
excit.par (               7 ,       $E_Vertical_R                 ) = 0.0000000000000000E+00  ! [-] Offset
excit.par (               9 ,       $E_Vertical_R                 ) = 0.0000000000000000E+00  ! [-] Scaling (about mean value)
excit.plot.par (          1 ,       $E_Vertical_R                 ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_Vertical_R                 ) = 1.0240000000000000E+03  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_Vertical_R                 ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_Vertical_R                 ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_Vertical_R                 ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_Vertical_R                 ) = 1.0000000000000000E+01  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_Vertical_R           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_Vertical_R           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_Vertical_R           ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter

excit.type (                        $E_windload_Fu                ) = 2                       ! Type
excit.disabled (                    $E_windload_Fu                ) = 0                       ! Disabled
excit.par (               1 ,       $E_windload_Fu                ) = $I_windload_fu          ! [-] Input Function f(t)
excit.par (               2 ,       $E_windload_Fu                ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_windload_Fu                ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_windload_Fu                ) = 1.0000000000000000E+00  ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_windload_Fu                ) = 0.0000000000000000E+00  ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_windload_Fu                ) = 0.0000000000000000E+00  ! [s] Time offset t0
excit.par (               7 ,       $E_windload_Fu                ) = 0.0000000000000000E+00  ! [-] Time scaling factor a
excit.par (               8 ,       $E_windload_Fu                ) = -1.0000000000000000E+00 ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_windload_Fu                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_windload_Fu                ) = 1.0000000000000000E+02  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_windload_Fu                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_windload_Fu                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_windload_Fu                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_windload_Fu                ) = 2.5000000000000000E+01  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_windload_Fu          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_windload_Fu          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_windload_Fu          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter

excit.type (                        $E_wingload_Fw                ) = 2                       ! Type
excit.disabled (                    $E_wingload_Fw                ) = 0                       ! Disabled
excit.par (               1 ,       $E_wingload_Fw                ) = $I_windload_fw          ! [-] Input Function f(t)
excit.par (               2 ,       $E_wingload_Fw                ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_wingload_Fw                ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_wingload_Fw                ) = 1.0000000000000000E+00  ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_wingload_Fw                ) = 0.0000000000000000E+00  ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_wingload_Fw                ) = 0.0000000000000000E+00  ! [s] Time offset t0
excit.par (               7 ,       $E_wingload_Fw                ) = 0.0000000000000000E+00  ! [-] Time scaling factor a
excit.par (               8 ,       $E_wingload_Fw                ) = -1.0000000000000000E+00 ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_wingload_Fw                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_wingload_Fw                ) = 1.0000000000000000E+02  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_wingload_Fw                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_wingload_Fw                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_wingload_Fw                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_wingload_Fw                ) = 2.5000000000000000E+01  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_wingload_Fw          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_wingload_Fw          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_wingload_Fw          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter

excit.type (                        $E_windload_Fm                ) = 2                       ! Type
excit.disabled (                    $E_windload_Fm                ) = 1                       ! Disabled
excit.par (               1 ,       $E_windload_Fm                ) = null                    ! [-] Input Function f(t)
excit.par (               2 ,       $E_windload_Fm                ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_windload_Fm                ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_windload_Fm                ) = 1.0000000000000000E+00  ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_windload_Fm                ) = 0.0000000000000000E+00  ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_windload_Fm                ) = 0.0000000000000000E+00  ! [s] Time offset t0
excit.par (               7 ,       $E_windload_Fm                ) = 0.0000000000000000E+00  ! [-] Time scaling factor a
excit.par (               8 ,       $E_windload_Fm                ) = -1.0000000000000000E+00 ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_windload_Fm                ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_windload_Fm                ) = 5.0000000000000000E+02  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_windload_Fm                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_windload_Fm                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_windload_Fm                ) = 0.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_windload_Fm                ) = 5.0000000000000000E+02  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_windload_Fm          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_windload_Fm          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_windload_Fm          ) = 1.0000000000000000E+00  ! [-] Unknown plot parameter

!**********************************************************************
! u-Vector
!**********************************************************************
uele.type (                         $UE_windload_Fu_Value         ) = 1                       ! Type
uele.excit (                        $UE_windload_Fu_Value         ) = $E_windload_Fu          ! Referenced Excitation
uele.index (                        $UE_windload_Fu_Value         ) = 0                       ! Index

uele.type (                         $UE_wingload_Fw_Value         ) = 1                       ! Type
uele.excit (                        $UE_wingload_Fw_Value         ) = $E_wingload_Fw          ! Referenced Excitation
uele.index (                        $UE_wingload_Fw_Value         ) = 0                       ! Index

uele.type (                         $UE_windload_Fm_Value         ) = 1                       ! Type
uele.excit (                        $UE_windload_Fm_Value         ) = $E_windload_Fm          ! Referenced Excitation
uele.index (                        $UE_windload_Fm_Value         ) = 0                       ! Index

!**********************************************************************
! Sensors
!**********************************************************************
sensor.from (                       $S_wheelset4                  ) = $M_Isys                 ! From Marker
sensor.to (                         $S_wheelset4                  ) = $M_wheelset4            ! To Marker
sensor.kind (                       $S_wheelset4                  ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_wheelset4                  ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_wheelset4                  ) = -5020
sensor.attr.2d.pos.y (    1 ,       $S_wheelset4                  ) = -20

sensor.from (                       $S_Rail_Track_Frame_of_wheelset4) = $M_Isys               ! From Marker
sensor.to (                         $S_Rail_Track_Frame_of_wheelset4) = $M_Rail_Track_Frame_of_wheelset4 ! To Marker
sensor.kind (                       $S_Rail_Track_Frame_of_wheelset4) = 1                     ! Coordinate Ref. Marker
sensor.ref (                        $S_Rail_Track_Frame_of_wheelset4) = $M_Isys               ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_Rail_Track_Frame_of_wheelset4) = -4850
sensor.attr.2d.pos.y (    1 ,       $S_Rail_Track_Frame_of_wheelset4) = -20

sensor.from (                       $S_Rail_Track_Camera_of_wheelset4) = $M_Isys              ! From Marker
sensor.to (                         $S_Rail_Track_Camera_of_wheelset4) = $M_Rail_Track_Camera_of_wheelset4 ! To Marker
sensor.kind (                       $S_Rail_Track_Camera_of_wheelset4) = 1                    ! Coordinate Ref. Marker
sensor.ref (                        $S_Rail_Track_Camera_of_wheelset4) = $M_Isys              ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_Rail_Track_Camera_of_wheelset4) = -4570
sensor.attr.2d.pos.y (    1 ,       $S_Rail_Track_Camera_of_wheelset4) = -20

sensor.from (                       $S_wheelset3                  ) = $M_Isys                 ! From Marker
sensor.to (                         $S_wheelset3                  ) = $M_wheelset3            ! To Marker
sensor.kind (                       $S_wheelset3                  ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_wheelset3                  ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_wheelset3                  ) = -4950
sensor.attr.2d.pos.y (    1 ,       $S_wheelset3                  ) = -20

sensor.from (                       $S_Rail_Track_Frame_of_wheelset3) = $M_Isys               ! From Marker
sensor.to (                         $S_Rail_Track_Frame_of_wheelset3) = $M_Rail_Track_Frame_of_wheelset3 ! To Marker
sensor.kind (                       $S_Rail_Track_Frame_of_wheelset3) = 1                     ! Coordinate Ref. Marker
sensor.ref (                        $S_Rail_Track_Frame_of_wheelset3) = $M_Isys               ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_Rail_Track_Frame_of_wheelset3) = -4780
sensor.attr.2d.pos.y (    1 ,       $S_Rail_Track_Frame_of_wheelset3) = -20

sensor.from (                       $S_Rail_Track_Camera_of_wheelset3) = $M_Isys              ! From Marker
sensor.to (                         $S_Rail_Track_Camera_of_wheelset3) = $M_Rail_Track_Camera_of_wheelset3 ! To Marker
sensor.kind (                       $S_Rail_Track_Camera_of_wheelset3) = 1                    ! Coordinate Ref. Marker
sensor.ref (                        $S_Rail_Track_Camera_of_wheelset3) = $M_Isys              ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_Rail_Track_Camera_of_wheelset3) = -4510
sensor.attr.2d.pos.y (    1 ,       $S_Rail_Track_Camera_of_wheelset3) = -20

sensor.from (                       $S_Bogie2                     ) = $M_Isys                 ! From Marker
sensor.to (                         $S_Bogie2                     ) = $M_Bogie2               ! To Marker
sensor.kind (                       $S_Bogie2                     ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_Bogie2                     ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_Bogie2                     ) = -3080
sensor.attr.2d.pos.y (    1 ,       $S_Bogie2                     ) = -20

sensor.from (                       $S_box4l                      ) = $M_Isys                 ! From Marker
sensor.to (                         $S_box4l                      ) = $M_box4l                ! To Marker
sensor.kind (                       $S_box4l                      ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_box4l                      ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_box4l                      ) = -1380
sensor.attr.2d.pos.y (    1 ,       $S_box4l                      ) = -90

sensor.from (                       $S_box4r                      ) = $M_Isys                 ! From Marker
sensor.to (                         $S_box4r                      ) = $M_box4r                ! To Marker
sensor.kind (                       $S_box4r                      ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_box4r                      ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_box4r                      ) = -1340
sensor.attr.2d.pos.y (    1 ,       $S_box4r                      ) = 50

sensor.from (                       $S_box3l                      ) = $M_Isys                 ! From Marker
sensor.to (                         $S_box3l                      ) = $M_box3l                ! To Marker
sensor.kind (                       $S_box3l                      ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_box3l                      ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_box3l                      ) = -1310
sensor.attr.2d.pos.y (    1 ,       $S_box3l                      ) = -90

sensor.from (                       $S_box3r                      ) = $M_Isys                 ! From Marker
sensor.to (                         $S_box3r                      ) = $M_box3r                ! To Marker
sensor.kind (                       $S_box3r                      ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_box3r                      ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_box3r                      ) = -1270
sensor.attr.2d.pos.y (    1 ,       $S_box3r                      ) = 60

sensor.from (                       $S_wheelset2                  ) = $M_Isys                 ! From Marker
sensor.to (                         $S_wheelset2                  ) = $M_wheelset2            ! To Marker
sensor.kind (                       $S_wheelset2                  ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_wheelset2                  ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_wheelset2                  ) = -4900
sensor.attr.2d.pos.y (    1 ,       $S_wheelset2                  ) = -20

sensor.from (                       $S_Rail_Track_Frame_of_wheelset2) = $M_Isys               ! From Marker
sensor.to (                         $S_Rail_Track_Frame_of_wheelset2) = $M_Rail_Track_Frame_of_wheelset2 ! To Marker
sensor.kind (                       $S_Rail_Track_Frame_of_wheelset2) = 1                     ! Coordinate Ref. Marker
sensor.ref (                        $S_Rail_Track_Frame_of_wheelset2) = $M_Isys               ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_Rail_Track_Frame_of_wheelset2) = -4710
sensor.attr.2d.pos.y (    1 ,       $S_Rail_Track_Frame_of_wheelset2) = -20

sensor.from (                       $S_Rail_Track_Camera_of_wheelset2) = $M_Isys              ! From Marker
sensor.to (                         $S_Rail_Track_Camera_of_wheelset2) = $M_Rail_Track_Camera_of_wheelset2 ! To Marker
sensor.kind (                       $S_Rail_Track_Camera_of_wheelset2) = 1                    ! Coordinate Ref. Marker
sensor.ref (                        $S_Rail_Track_Camera_of_wheelset2) = $M_Isys              ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_Rail_Track_Camera_of_wheelset2) = -4440
sensor.attr.2d.pos.y (    1 ,       $S_Rail_Track_Camera_of_wheelset2) = -20

sensor.from (                       $S_Bogie                      ) = $M_Isys                 ! From Marker
sensor.to (                         $S_Bogie                      ) = $M_Bogie                ! To Marker
sensor.kind (                       $S_Bogie                      ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_Bogie                      ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_Bogie                      ) = -3000
sensor.attr.2d.pos.y (    1 ,       $S_Bogie                      ) = -20

sensor.from (                       $S_wheelset1                  ) = $M_Isys                 ! From Marker
sensor.to (                         $S_wheelset1                  ) = $M_wheelset1            ! To Marker
sensor.kind (                       $S_wheelset1                  ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_wheelset1                  ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_wheelset1                  ) = 1350
sensor.attr.2d.pos.y (    1 ,       $S_wheelset1                  ) = -20

sensor.from (                       $S_Rail_Track_Camera_of_wheelset1) = $M_Isys              ! From Marker
sensor.to (                         $S_Rail_Track_Camera_of_wheelset1) = $M_Rail_Track_Camera_of_wheelset1 ! To Marker
sensor.kind (                       $S_Rail_Track_Camera_of_wheelset1) = 1                    ! Coordinate Ref. Marker
sensor.ref (                        $S_Rail_Track_Camera_of_wheelset1) = $M_Isys              ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_Rail_Track_Camera_of_wheelset1) = -4370
sensor.attr.2d.pos.y (    1 ,       $S_Rail_Track_Camera_of_wheelset1) = -20

sensor.from (                       $S_Rail_Track_Frame_of_wheelset1) = $M_Isys               ! From Marker
sensor.to (                         $S_Rail_Track_Frame_of_wheelset1) = $M_Rail_Track_Frame_of_wheelset1 ! To Marker
sensor.kind (                       $S_Rail_Track_Frame_of_wheelset1) = 1                     ! Coordinate Ref. Marker
sensor.ref (                        $S_Rail_Track_Frame_of_wheelset1) = $M_Isys               ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_Rail_Track_Frame_of_wheelset1) = -4640
sensor.attr.2d.pos.y (    1 ,       $S_Rail_Track_Frame_of_wheelset1) = -20

sensor.from (                       $S_box2l                      ) = $M_Isys                 ! From Marker
sensor.to (                         $S_box2l                      ) = $M_box2l                ! To Marker
sensor.kind (                       $S_box2l                      ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_box2l                      ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_box2l                      ) = -170
sensor.attr.2d.pos.y (    1 ,       $S_box2l                      ) = -80

sensor.from (                       $S_box2r                      ) = $M_Isys                 ! From Marker
sensor.to (                         $S_box2r                      ) = $M_box2r                ! To Marker
sensor.kind (                       $S_box2r                      ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_box2r                      ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_box2r                      ) = -170
sensor.attr.2d.pos.y (    1 ,       $S_box2r                      ) = 50

sensor.from (                       $S_box1l                      ) = $M_Isys                 ! From Marker
sensor.to (                         $S_box1l                      ) = $M_box1l                ! To Marker
sensor.kind (                       $S_box1l                      ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_box1l                      ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_box1l                      ) = -20
sensor.attr.2d.pos.y (    1 ,       $S_box1l                      ) = -120

sensor.from (                       $S_box1r                      ) = $M_Isys                 ! From Marker
sensor.to (                         $S_box1r                      ) = $M_box1r                ! To Marker
sensor.kind (                       $S_box1r                      ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_box1r                      ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_box1r                      ) = -20
sensor.attr.2d.pos.y (    1 ,       $S_box1r                      ) = 120

sensor.from (                       $S_Carbody                    ) = $M_Isys                 ! From Marker
sensor.to (                         $S_Carbody                    ) = $M_Carbody              ! To Marker
sensor.kind (                       $S_Carbody                    ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_Carbody                    ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_Carbody                    ) = -1170
sensor.attr.2d.pos.y (    1 ,       $S_Carbody                    ) = -20

sensor.from (                       $S_CB1                        ) = $M_Isys                 ! From Marker
sensor.to (                         $S_CB1                        ) = $M_Carbody_Floor_1      ! To Marker
sensor.kind (                       $S_CB1                        ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_CB1                        ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_CB1                        ) = -1030
sensor.attr.2d.pos.y (    1 ,       $S_CB1                        ) = -20

sensor.from (                       $S_CB2                        ) = $M_Isys                 ! From Marker
sensor.to (                         $S_CB2                        ) = $M_Carbody_Floor_2      ! To Marker
sensor.kind (                       $S_CB2                        ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_CB2                        ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_CB2                        ) = -1100
sensor.attr.2d.pos.y (    1 ,       $S_CB2                        ) = -20

sensor.from (                       $S_Carbody_Floor_S1           ) = $M_Isys                 ! From Marker
sensor.to (                         $S_Carbody_Floor_S1           ) = $M_Carbody_Floor_1      ! To Marker
sensor.kind (                       $S_Carbody_Floor_S1           ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_Carbody_Floor_S1           ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_Carbody_Floor_S1           ) = -1240
sensor.attr.2d.pos.y (    1 ,       $S_Carbody_Floor_S1           ) = -20

sensor.from (                       $S_Carbody_Floor_S3           ) = $M_Isys                 ! From Marker
sensor.to (                         $S_Carbody_Floor_S3           ) = $M_Carbody_Floor_2      ! To Marker
sensor.kind (                       $S_Carbody_Floor_S3           ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_Carbody_Floor_S3           ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_Carbody_Floor_S3           ) = -1300
sensor.attr.2d.pos.y (    1 ,       $S_Carbody_Floor_S3           ) = -20

sensor.from (                       $S_PS_Spring_4l__3d_          ) = $M_Isys                 ! From Marker
sensor.to (                         $S_PS_Spring_4l__3d_          ) = $M_Bogie2_PS_4l_spring  ! To Marker
sensor.kind (                       $S_PS_Spring_4l__3d_          ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Spring_4l__3d_          ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Spring_4l__3d_          ) = -4230
sensor.attr.2d.pos.y (    1 ,       $S_PS_Spring_4l__3d_          ) = -20

sensor.from (                       $S_PS_Spring_4r__3d_          ) = $M_Isys                 ! From Marker
sensor.to (                         $S_PS_Spring_4r__3d_          ) = $M_Bogie2_PS_4r_spring  ! To Marker
sensor.kind (                       $S_PS_Spring_4r__3d_          ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Spring_4r__3d_          ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Spring_4r__3d_          ) = -4300
sensor.attr.2d.pos.y (    1 ,       $S_PS_Spring_4r__3d_          ) = -20

sensor.from (                       $S_PS_Damping_4l__3d_         ) = $M_Isys                 ! From Marker
sensor.to (                         $S_PS_Damping_4l__3d_         ) = $M_Bogie2_PS_4l_damping ! To Marker
sensor.kind (                       $S_PS_Damping_4l__3d_         ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Damping_4l__3d_         ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Damping_4l__3d_         ) = -3210
sensor.attr.2d.pos.y (    1 ,       $S_PS_Damping_4l__3d_         ) = -20

sensor.from (                       $S_QY_2__3d_                  ) = $M_Isys                 ! From Marker
sensor.to (                         $S_QY_2__3d_                  ) = $M_Carbody_QY_2         ! To Marker
sensor.kind (                       $S_QY_2__3d_                  ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_QY_2__3d_                  ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_QY_2__3d_                  ) = -1580
sensor.attr.2d.pos.y (    1 ,       $S_QY_2__3d_                  ) = -20

sensor.from (                       $S_PS_Spring_3l__3d_          ) = $M_Isys                 ! From Marker
sensor.to (                         $S_PS_Spring_3l__3d_          ) = $M_Bogie2_PS_3l_Spring  ! To Marker
sensor.kind (                       $S_PS_Spring_3l__3d_          ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Spring_3l__3d_          ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Spring_3l__3d_          ) = -4100
sensor.attr.2d.pos.y (    1 ,       $S_PS_Spring_3l__3d_          ) = -20

sensor.from (                       $S_PS_Spring_3r__3d_          ) = $M_Isys                 ! From Marker
sensor.to (                         $S_PS_Spring_3r__3d_          ) = $M_Bogie2_PS_3r_Spring  ! To Marker
sensor.kind (                       $S_PS_Spring_3r__3d_          ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Spring_3r__3d_          ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Spring_3r__3d_          ) = -4160
sensor.attr.2d.pos.y (    1 ,       $S_PS_Spring_3r__3d_          ) = -20

sensor.from (                       $S_PS_Damping_4r__3ds_        ) = $M_Bogie2_PS_4r_damping ! From Marker
sensor.to (                         $S_PS_Damping_4r__3ds_        ) = $M_box4r_damping        ! To Marker
sensor.kind (                       $S_PS_Damping_4r__3ds_        ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Damping_4r__3ds_        ) = $M_Bogie2_BRF           ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Damping_4r__3ds_        ) = -1200
sensor.attr.2d.pos.y (    1 ,       $S_PS_Damping_4r__3ds_        ) = 50

sensor.from (                       $S_PS_Damping_3l__3ds_        ) = $M_Bogie2_PS_3l_damping ! From Marker
sensor.to (                         $S_PS_Damping_3l__3ds_        ) = $M_box3l_damping        ! To Marker
sensor.kind (                       $S_PS_Damping_3l__3ds_        ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Damping_3l__3ds_        ) = $M_Bogie2_BRF           ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Damping_3l__3ds_        ) = -1240
sensor.attr.2d.pos.y (    1 ,       $S_PS_Damping_3l__3ds_        ) = -90

sensor.from (                       $S_PS_Damping_3r__3ds_        ) = $M_Bogie2_PS_3r_damping ! From Marker
sensor.to (                         $S_PS_Damping_3r__3ds_        ) = $M_box3r_damping        ! To Marker
sensor.kind (                       $S_PS_Damping_3r__3ds_        ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Damping_3r__3ds_        ) = $M_Bogie2_BRF           ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Damping_3r__3ds_        ) = -1140
sensor.attr.2d.pos.y (    1 ,       $S_PS_Damping_3r__3ds_        ) = 50

sensor.from (                       $S_PS_Joint_4l__3d_           ) = $M_Isys                 ! From Marker
sensor.to (                         $S_PS_Joint_4l__3d_           ) = $M_Bogie2_PS_4l_Joint   ! To Marker
sensor.kind (                       $S_PS_Joint_4l__3d_           ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Joint_4l__3d_           ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Joint_4l__3d_           ) = -3690
sensor.attr.2d.pos.y (    1 ,       $S_PS_Joint_4l__3d_           ) = -20

sensor.from (                       $S_PS_Joint_4r__3d_           ) = $M_Isys                 ! From Marker
sensor.to (                         $S_PS_Joint_4r__3d_           ) = $M_Bogie2_PS_4r_Joint   ! To Marker
sensor.kind (                       $S_PS_Joint_4r__3d_           ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Joint_4r__3d_           ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Joint_4r__3d_           ) = -3760
sensor.attr.2d.pos.y (    1 ,       $S_PS_Joint_4r__3d_           ) = -20

sensor.from (                       $S_PS_Joint_3l__3d_           ) = $M_Isys                 ! From Marker
sensor.to (                         $S_PS_Joint_3l__3d_           ) = $M_Bogie2_PS_3l_Joint   ! To Marker
sensor.kind (                       $S_PS_Joint_3l__3d_           ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Joint_3l__3d_           ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Joint_3l__3d_           ) = -3550
sensor.attr.2d.pos.y (    1 ,       $S_PS_Joint_3l__3d_           ) = -20

sensor.from (                       $S_PS_Joint_3r__3d_           ) = $M_Isys                 ! From Marker
sensor.to (                         $S_PS_Joint_3r__3d_           ) = $M_Bogie2_PS_3r_Joint   ! To Marker
sensor.kind (                       $S_PS_Joint_3r__3d_           ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Joint_3r__3d_           ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Joint_3r__3d_           ) = -3620
sensor.attr.2d.pos.y (    1 ,       $S_PS_Joint_3r__3d_           ) = -20

sensor.from (                       $S_PS_Spring_2l__3d_          ) = $M_Isys                 ! From Marker
sensor.to (                         $S_PS_Spring_2l__3d_          ) = $M_Bogie_PS_2l_spring   ! To Marker
sensor.kind (                       $S_PS_Spring_2l__3d_          ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Spring_2l__3d_          ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Spring_2l__3d_          ) = -3950
sensor.attr.2d.pos.y (    1 ,       $S_PS_Spring_2l__3d_          ) = -20

sensor.from (                       $S_PS_Spring_2r__3d_          ) = $M_Isys                 ! From Marker
sensor.to (                         $S_PS_Spring_2r__3d_          ) = $M_Bogie_PS_2r_spring   ! To Marker
sensor.kind (                       $S_PS_Spring_2r__3d_          ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Spring_2r__3d_          ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Spring_2r__3d_          ) = -4020
sensor.attr.2d.pos.y (    1 ,       $S_PS_Spring_2r__3d_          ) = -20

sensor.from (                       $S_PS_Spring_1l__3d_          ) = $M_Isys                 ! From Marker
sensor.to (                         $S_PS_Spring_1l__3d_          ) = $M_Bogie_PS_1l_Spring   ! To Marker
sensor.kind (                       $S_PS_Spring_1l__3d_          ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Spring_1l__3d_          ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Spring_1l__3d_          ) = -3820
sensor.attr.2d.pos.y (    1 ,       $S_PS_Spring_1l__3d_          ) = -20

sensor.from (                       $S_PS_Spring_1r__3d_          ) = $M_Isys                 ! From Marker
sensor.to (                         $S_PS_Spring_1r__3d_          ) = $M_Bogie_PS_1r_Spring   ! To Marker
sensor.kind (                       $S_PS_Spring_1r__3d_          ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Spring_1r__3d_          ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Spring_1r__3d_          ) = -3880
sensor.attr.2d.pos.y (    1 ,       $S_PS_Spring_1r__3d_          ) = -20

sensor.from (                       $S_PS_Damping_2l__3ds_        ) = $M_Bogie_PS_2l_damping  ! From Marker
sensor.to (                         $S_PS_Damping_2l__3ds_        ) = $M_box2l_damping        ! To Marker
sensor.kind (                       $S_PS_Damping_2l__3ds_        ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Damping_2l__3ds_        ) = $M_Bogie_BRF            ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Damping_2l__3ds_        ) = 1290
sensor.attr.2d.pos.y (    1 ,       $S_PS_Damping_2l__3ds_        ) = -100

sensor.from (                       $S_PS_Damping_2r__3ds_        ) = $M_Bogie_PS_2r_damping  ! From Marker
sensor.to (                         $S_PS_Damping_2r__3ds_        ) = $M_box2r_damping        ! To Marker
sensor.kind (                       $S_PS_Damping_2r__3ds_        ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Damping_2r__3ds_        ) = $M_Bogie_BRF            ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Damping_2r__3ds_        ) = 1220
sensor.attr.2d.pos.y (    1 ,       $S_PS_Damping_2r__3ds_        ) = 60

sensor.from (                       $S_PS_Damping_1l__3ds_        ) = $M_Bogie_PS_1l_damping  ! From Marker
sensor.to (                         $S_PS_Damping_1l__3ds_        ) = $M_box1l_damping        ! To Marker
sensor.kind (                       $S_PS_Damping_1l__3ds_        ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Damping_1l__3ds_        ) = $M_Bogie_BRF            ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Damping_1l__3ds_        ) = 1220
sensor.attr.2d.pos.y (    1 ,       $S_PS_Damping_1l__3ds_        ) = -80

sensor.from (                       $S_PS_Damping_1r__3ds_        ) = $M_Bogie_PS_1r_damping  ! From Marker
sensor.to (                         $S_PS_Damping_1r__3ds_        ) = $M_box1r_damping        ! To Marker
sensor.kind (                       $S_PS_Damping_1r__3ds_        ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Damping_1r__3ds_        ) = $M_Bogie_BRF            ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Damping_1r__3ds_        ) = 1160
sensor.attr.2d.pos.y (    1 ,       $S_PS_Damping_1r__3ds_        ) = 50

sensor.from (                       $S_PS_Joint_2l__3d_           ) = $M_Isys                 ! From Marker
sensor.to (                         $S_PS_Joint_2l__3d_           ) = $M_Bogie_PS_2l_Joint    ! To Marker
sensor.kind (                       $S_PS_Joint_2l__3d_           ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Joint_2l__3d_           ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Joint_2l__3d_           ) = -3410
sensor.attr.2d.pos.y (    1 ,       $S_PS_Joint_2l__3d_           ) = -20

sensor.from (                       $S_PS_Joint_2r__3d_           ) = $M_Isys                 ! From Marker
sensor.to (                         $S_PS_Joint_2r__3d_           ) = $M_Bogie_PS_2r_Joint    ! To Marker
sensor.kind (                       $S_PS_Joint_2r__3d_           ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Joint_2r__3d_           ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Joint_2r__3d_           ) = -3480
sensor.attr.2d.pos.y (    1 ,       $S_PS_Joint_2r__3d_           ) = -20

sensor.from (                       $S_PS_Joint_1l__3d_           ) = $M_Isys                 ! From Marker
sensor.to (                         $S_PS_Joint_1l__3d_           ) = $M_Bogie_PS_1l_Joint    ! To Marker
sensor.kind (                       $S_PS_Joint_1l__3d_           ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Joint_1l__3d_           ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Joint_1l__3d_           ) = -3270
sensor.attr.2d.pos.y (    1 ,       $S_PS_Joint_1l__3d_           ) = -20

sensor.from (                       $S_PS_Joint_1r__3d_           ) = $M_Isys                 ! From Marker
sensor.to (                         $S_PS_Joint_1r__3d_           ) = $M_Bogie_PS_1r_Joint    ! To Marker
sensor.kind (                       $S_PS_Joint_1r__3d_           ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_PS_Joint_1r__3d_           ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_PS_Joint_1r__3d_           ) = -3340
sensor.attr.2d.pos.y (    1 ,       $S_PS_Joint_1r__3d_           ) = -20

sensor.from (                       $S_SS_AirSpring_1l__3d_       ) = $M_Isys                 ! From Marker
sensor.to (                         $S_SS_AirSpring_1l__3d_       ) = $M_Carbody_Airspring_1l ! To Marker
sensor.kind (                       $S_SS_AirSpring_1l__3d_       ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_SS_AirSpring_1l__3d_       ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_SS_AirSpring_1l__3d_       ) = -1640
sensor.attr.2d.pos.y (    1 ,       $S_SS_AirSpring_1l__3d_       ) = -20

sensor.from (                       $S_SS_AirSpring_1r__3d_       ) = $M_Isys                 ! From Marker
sensor.to (                         $S_SS_AirSpring_1r__3d_       ) = $M_Carbody_Airspring_1r ! To Marker
sensor.kind (                       $S_SS_AirSpring_1r__3d_       ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_SS_AirSpring_1r__3d_       ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_SS_AirSpring_1r__3d_       ) = -1710
sensor.attr.2d.pos.y (    1 ,       $S_SS_AirSpring_1r__3d_       ) = -20

sensor.from (                       $S_SS_AirSpring_2l__3d_       ) = $M_Isys                 ! From Marker
sensor.to (                         $S_SS_AirSpring_2l__3d_       ) = $M_Carbody_Airspring_2l ! To Marker
sensor.kind (                       $S_SS_AirSpring_2l__3d_       ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_SS_AirSpring_2l__3d_       ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_SS_AirSpring_2l__3d_       ) = -1780
sensor.attr.2d.pos.y (    1 ,       $S_SS_AirSpring_2l__3d_       ) = -20

sensor.from (                       $S_SS_AirSpring_2r__3d_       ) = $M_Isys                 ! From Marker
sensor.to (                         $S_SS_AirSpring_2r__3d_       ) = $M_Carbody_Airspring_2r ! To Marker
sensor.kind (                       $S_SS_AirSpring_2r__3d_       ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_SS_AirSpring_2r__3d_       ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_SS_AirSpring_2r__3d_       ) = -1850
sensor.attr.2d.pos.y (    1 ,       $S_SS_AirSpring_2r__3d_       ) = -20

sensor.from (                       $S_SS_KSX_1l__3ds_            ) = $M_Carbody_KSX_1l       ! From Marker
sensor.to (                         $S_SS_KSX_1l__3ds_            ) = $M_Bogie_SS_KSX_1l      ! To Marker
sensor.kind (                       $S_SS_KSX_1l__3ds_            ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_SS_KSX_1l__3ds_            ) = $M_Carbody_BRF          ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_SS_KSX_1l__3ds_            ) = 920
sensor.attr.2d.pos.y (    1 ,       $S_SS_KSX_1l__3ds_            ) = -20

sensor.from (                       $S_SS_KSX_1r__3ds_            ) = $M_Carbody_KSX_1r       ! From Marker
sensor.to (                         $S_SS_KSX_1r__3ds_            ) = $M_Bogie_SS_KSX_1r      ! To Marker
sensor.kind (                       $S_SS_KSX_1r__3ds_            ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_SS_KSX_1r__3ds_            ) = $M_Carbody_BRF          ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_SS_KSX_1r__3ds_            ) = 980
sensor.attr.2d.pos.y (    1 ,       $S_SS_KSX_1r__3ds_            ) = -20

sensor.from (                       $S_SS_KSX_2l__3ds_            ) = $M_Carbody_KSX_2l       ! From Marker
sensor.to (                         $S_SS_KSX_2l__3ds_            ) = $M_Bogie2_SS_KSX_2l     ! To Marker
sensor.kind (                       $S_SS_KSX_2l__3ds_            ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_SS_KSX_2l__3ds_            ) = $M_Carbody_BRF          ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_SS_KSX_2l__3ds_            ) = -2050
sensor.attr.2d.pos.y (    1 ,       $S_SS_KSX_2l__3ds_            ) = -20

sensor.from (                       $S_SS_KSX_2r__3ds_            ) = $M_Carbody_KSX_2r       ! From Marker
sensor.to (                         $S_SS_KSX_2r__3ds_            ) = $M_Bogie2_SS_KSX_2r     ! To Marker
sensor.kind (                       $S_SS_KSX_2r__3ds_            ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_SS_KSX_2r__3ds_            ) = $M_Carbody_BRF          ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_SS_KSX_2r__3ds_            ) = -2120
sensor.attr.2d.pos.y (    1 ,       $S_SS_KSX_2r__3ds_            ) = -20

sensor.from (                       $S_SS_HX_1__3ds_              ) = $M_Carbody_HX_1         ! From Marker
sensor.to (                         $S_SS_HX_1__3ds_              ) = $M_Bogie_SS_HX_1        ! To Marker
sensor.kind (                       $S_SS_HX_1__3ds_              ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_SS_HX_1__3ds_              ) = $M_Carbody_BRF          ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_SS_HX_1__3ds_              ) = 780
sensor.attr.2d.pos.y (    1 ,       $S_SS_HX_1__3ds_              ) = -20

sensor.from (                       $S_SS_HX_2__3ds_              ) = $M_Carbody_HX_2         ! From Marker
sensor.to (                         $S_SS_HX_2__3ds_              ) = $M_Bogie_SS_HX_2        ! To Marker
sensor.kind (                       $S_SS_HX_2__3ds_              ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_SS_HX_2__3ds_              ) = $M_Carbody_BRF          ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_SS_HX_2__3ds_              ) = 850
sensor.attr.2d.pos.y (    1 ,       $S_SS_HX_2__3ds_              ) = -20

sensor.from (                       $S_SS_HX_3__3ds_              ) = $M_Carbody_HX_3         ! From Marker
sensor.to (                         $S_SS_HX_3__3ds_              ) = $M_Bogie2_SS_HX_3       ! To Marker
sensor.kind (                       $S_SS_HX_3__3ds_              ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_SS_HX_3__3ds_              ) = $M_Carbody_BRF          ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_SS_HX_3__3ds_              ) = -1920
sensor.attr.2d.pos.y (    1 ,       $S_SS_HX_3__3ds_              ) = -20

sensor.from (                       $S_SS_HX_4__3ds_              ) = $M_Carbody_HX_4         ! From Marker
sensor.to (                         $S_SS_HX_4__3ds_              ) = $M_Bogie2_SS_HX_4       ! To Marker
sensor.kind (                       $S_SS_HX_4__3ds_              ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_SS_HX_4__3ds_              ) = $M_Carbody_BRF          ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_SS_HX_4__3ds_              ) = -1980
sensor.attr.2d.pos.y (    1 ,       $S_SS_HX_4__3ds_              ) = -20

sensor.from (                       $S_BS_1__3d_                  ) = $M_Isys                 ! From Marker
sensor.to (                         $S_BS_1__3d_                  ) = $M_Carbody_ZD_1         ! To Marker
sensor.kind (                       $S_BS_1__3d_                  ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_BS_1__3d_                  ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_BS_1__3d_                  ) = -900
sensor.attr.2d.pos.y (    1 ,       $S_BS_1__3d_                  ) = -20

sensor.from (                       $S_BS_2__3d_                  ) = $M_Isys                 ! From Marker
sensor.to (                         $S_BS_2__3d_                  ) = $M_Carbody_ZD_2         ! To Marker
sensor.kind (                       $S_BS_2__3d_                  ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_BS_2__3d_                  ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_BS_2__3d_                  ) = -960
sensor.attr.2d.pos.y (    1 ,       $S_BS_2__3d_                  ) = -20

sensor.from (                       $S_QY_1__3d_                  ) = $M_Isys                 ! From Marker
sensor.to (                         $S_QY_1__3d_                  ) = $M_Carbody_QY_1         ! To Marker
sensor.kind (                       $S_QY_1__3d_                  ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_QY_1__3d_                  ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_QY_1__3d_                  ) = -1510
sensor.attr.2d.pos.y (    1 ,       $S_QY_1__3d_                  ) = -20

sensor.from (                       $S_NG_2__3d_                  ) = $M_Isys                 ! From Marker
sensor.to (                         $S_NG_2__3d_                  ) = $M_Carbody_NiuGan_2     ! To Marker
sensor.kind (                       $S_NG_2__3d_                  ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_NG_2__3d_                  ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_NG_2__3d_                  ) = -1440
sensor.attr.2d.pos.y (    1 ,       $S_NG_2__3d_                  ) = -20

sensor.from (                       $S_NG_1__3d_                  ) = $M_Isys                 ! From Marker
sensor.to (                         $S_NG_1__3d_                  ) = $M_Carbody_NiuGan_1     ! To Marker
sensor.kind (                       $S_NG_1__3d_                  ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_NG_1__3d_                  ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_NG_1__3d_                  ) = -1370
sensor.attr.2d.pos.y (    1 ,       $S_NG_1__3d_                  ) = -20

sensor.from (                       $S_FrameAcc_y                 ) = $M_Isys                 ! From Marker
sensor.to (                         $S_FrameAcc_y                 ) = $M_Bogie2_FrameAcc_y    ! To Marker
sensor.kind (                       $S_FrameAcc_y                 ) = 1                       ! Coordinate Ref. Marker
sensor.ref (                        $S_FrameAcc_y                 ) = $M_Isys                 ! Reference Marker
sensor.attr.2d.pos.x (    1 ,       $S_FrameAcc_y                 ) = -3140
sensor.attr.2d.pos.y (    1 ,       $S_FrameAcc_y                 ) = -20

!**********************************************************************
! Result Elements
!**********************************************************************
result.container (                  $RS_RWP_WR1                   ) = null                    ! Parent result element
result.type (                       $RS_RWP_WR1                   ) = -1                      ! Type
result.desc (             1 ,       $RS_RWP_WR1                   ) = '$RWP_WR1'              ! Description

result.container (                  $RS_RWP_WR1_Pair              ) = $RS_RWP_WR1             ! Parent result element
result.type (                       $RS_RWP_WR1_Pair              ) = 78                      ! Type
result.desc (             1 ,       $RS_RWP_WR1_Pair              ) = 'Pair'                  ! Description
result.par (              1 ,       $RS_RWP_WR1_Pair              ) = $RWP_WR1                ! [-] Rail-Wheel Pair

result.container (                  $RS_RWP_WR1_1                 ) = $RS_RWP_WR1             ! Parent result element
result.type (                       $RS_RWP_WR1_1                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WR1_1                 ) = 'Contact 1 '            ! Description
result.par (              1 ,       $RS_RWP_WR1_1                 ) = $RWP_WR1                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR1_1                 ) = 1.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR1_2                 ) = $RS_RWP_WR1             ! Parent result element
result.type (                       $RS_RWP_WR1_2                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WR1_2                 ) = 'Contact 2 '            ! Description
result.par (              1 ,       $RS_RWP_WR1_2                 ) = $RWP_WR1                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR1_2                 ) = 2.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR1_3                 ) = $RS_RWP_WR1             ! Parent result element
result.type (                       $RS_RWP_WR1_3                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WR1_3                 ) = 'Contact 3 '            ! Description
result.par (              1 ,       $RS_RWP_WR1_3                 ) = $RWP_WR1                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR1_3                 ) = 3.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR1_4                 ) = $RS_RWP_WR1             ! Parent result element
result.type (                       $RS_RWP_WR1_4                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WR1_4                 ) = 'Contact 4 '            ! Description
result.par (              1 ,       $RS_RWP_WR1_4                 ) = $RWP_WR1                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR1_4                 ) = 4.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR1_5                 ) = $RS_RWP_WR1             ! Parent result element
result.type (                       $RS_RWP_WR1_5                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WR1_5                 ) = 'Contact 5 '            ! Description
result.par (              1 ,       $RS_RWP_WR1_5                 ) = $RWP_WR1                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR1_5                 ) = 5.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR1_1_Adv             ) = $RS_RWP_WR1             ! Parent result element
result.type (                       $RS_RWP_WR1_1_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WR1_1_Adv             ) = 'Contact 1 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WR1_1_Adv             ) = $RWP_WR1                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR1_1_Adv             ) = 1.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR1_2_Adv             ) = $RS_RWP_WR1             ! Parent result element
result.type (                       $RS_RWP_WR1_2_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WR1_2_Adv             ) = 'Contact 2 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WR1_2_Adv             ) = $RWP_WR1                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR1_2_Adv             ) = 2.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR1_3_Adv             ) = $RS_RWP_WR1             ! Parent result element
result.type (                       $RS_RWP_WR1_3_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WR1_3_Adv             ) = 'Contact 3 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WR1_3_Adv             ) = $RWP_WR1                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR1_3_Adv             ) = 3.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR1_4_Adv             ) = $RS_RWP_WR1             ! Parent result element
result.type (                       $RS_RWP_WR1_4_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WR1_4_Adv             ) = 'Contact 4 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WR1_4_Adv             ) = $RWP_WR1                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR1_4_Adv             ) = 4.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR1_5_Adv             ) = $RS_RWP_WR1             ! Parent result element
result.type (                       $RS_RWP_WR1_5_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WR1_5_Adv             ) = 'Contact 5 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WR1_5_Adv             ) = $RWP_WR1                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR1_5_Adv             ) = 5.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL1                   ) = null                    ! Parent result element
result.type (                       $RS_RWP_WL1                   ) = -1                      ! Type
result.desc (             1 ,       $RS_RWP_WL1                   ) = '$RWP_WL1'              ! Description

result.container (                  $RS_RWP_WL1_Pair              ) = $RS_RWP_WL1             ! Parent result element
result.type (                       $RS_RWP_WL1_Pair              ) = 78                      ! Type
result.desc (             1 ,       $RS_RWP_WL1_Pair              ) = 'Pair'                  ! Description
result.par (              1 ,       $RS_RWP_WL1_Pair              ) = $RWP_WL1                ! [-] Rail-Wheel Pair

result.container (                  $RS_RWP_WL1_1                 ) = $RS_RWP_WL1             ! Parent result element
result.type (                       $RS_RWP_WL1_1                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WL1_1                 ) = 'Contact 1 '            ! Description
result.par (              1 ,       $RS_RWP_WL1_1                 ) = $RWP_WL1                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL1_1                 ) = 1.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL1_2                 ) = $RS_RWP_WL1             ! Parent result element
result.type (                       $RS_RWP_WL1_2                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WL1_2                 ) = 'Contact 2 '            ! Description
result.par (              1 ,       $RS_RWP_WL1_2                 ) = $RWP_WL1                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL1_2                 ) = 2.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL1_3                 ) = $RS_RWP_WL1             ! Parent result element
result.type (                       $RS_RWP_WL1_3                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WL1_3                 ) = 'Contact 3 '            ! Description
result.par (              1 ,       $RS_RWP_WL1_3                 ) = $RWP_WL1                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL1_3                 ) = 3.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL1_4                 ) = $RS_RWP_WL1             ! Parent result element
result.type (                       $RS_RWP_WL1_4                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WL1_4                 ) = 'Contact 4 '            ! Description
result.par (              1 ,       $RS_RWP_WL1_4                 ) = $RWP_WL1                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL1_4                 ) = 4.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL1_5                 ) = $RS_RWP_WL1             ! Parent result element
result.type (                       $RS_RWP_WL1_5                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WL1_5                 ) = 'Contact 5 '            ! Description
result.par (              1 ,       $RS_RWP_WL1_5                 ) = $RWP_WL1                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL1_5                 ) = 5.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL1_1_Adv             ) = $RS_RWP_WL1             ! Parent result element
result.type (                       $RS_RWP_WL1_1_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WL1_1_Adv             ) = 'Contact 1 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WL1_1_Adv             ) = $RWP_WL1                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL1_1_Adv             ) = 1.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL1_2_Adv             ) = $RS_RWP_WL1             ! Parent result element
result.type (                       $RS_RWP_WL1_2_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WL1_2_Adv             ) = 'Contact 2 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WL1_2_Adv             ) = $RWP_WL1                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL1_2_Adv             ) = 2.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL1_3_Adv             ) = $RS_RWP_WL1             ! Parent result element
result.type (                       $RS_RWP_WL1_3_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WL1_3_Adv             ) = 'Contact 3 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WL1_3_Adv             ) = $RWP_WL1                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL1_3_Adv             ) = 3.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL1_4_Adv             ) = $RS_RWP_WL1             ! Parent result element
result.type (                       $RS_RWP_WL1_4_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WL1_4_Adv             ) = 'Contact 4 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WL1_4_Adv             ) = $RWP_WL1                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL1_4_Adv             ) = 4.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL1_5_Adv             ) = $RS_RWP_WL1             ! Parent result element
result.type (                       $RS_RWP_WL1_5_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WL1_5_Adv             ) = 'Contact 5 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WL1_5_Adv             ) = $RWP_WL1                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL1_5_Adv             ) = 5.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR2                   ) = null                    ! Parent result element
result.type (                       $RS_RWP_WR2                   ) = -1                      ! Type
result.desc (             1 ,       $RS_RWP_WR2                   ) = '$RWP_WR2'              ! Description

result.container (                  $RS_RWP_WR2_Pair              ) = $RS_RWP_WR2             ! Parent result element
result.type (                       $RS_RWP_WR2_Pair              ) = 78                      ! Type
result.desc (             1 ,       $RS_RWP_WR2_Pair              ) = 'Pair'                  ! Description
result.par (              1 ,       $RS_RWP_WR2_Pair              ) = $RWP_WR2                ! [-] Rail-Wheel Pair

result.container (                  $RS_RWP_WR2_1                 ) = $RS_RWP_WR2             ! Parent result element
result.type (                       $RS_RWP_WR2_1                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WR2_1                 ) = 'Contact 1 '            ! Description
result.par (              1 ,       $RS_RWP_WR2_1                 ) = $RWP_WR2                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR2_1                 ) = 1.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR2_2                 ) = $RS_RWP_WR2             ! Parent result element
result.type (                       $RS_RWP_WR2_2                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WR2_2                 ) = 'Contact 2 '            ! Description
result.par (              1 ,       $RS_RWP_WR2_2                 ) = $RWP_WR2                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR2_2                 ) = 2.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR2_3                 ) = $RS_RWP_WR2             ! Parent result element
result.type (                       $RS_RWP_WR2_3                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WR2_3                 ) = 'Contact 3 '            ! Description
result.par (              1 ,       $RS_RWP_WR2_3                 ) = $RWP_WR2                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR2_3                 ) = 3.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR2_4                 ) = $RS_RWP_WR2             ! Parent result element
result.type (                       $RS_RWP_WR2_4                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WR2_4                 ) = 'Contact 4 '            ! Description
result.par (              1 ,       $RS_RWP_WR2_4                 ) = $RWP_WR2                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR2_4                 ) = 4.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR2_5                 ) = $RS_RWP_WR2             ! Parent result element
result.type (                       $RS_RWP_WR2_5                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WR2_5                 ) = 'Contact 5 '            ! Description
result.par (              1 ,       $RS_RWP_WR2_5                 ) = $RWP_WR2                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR2_5                 ) = 5.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR2_1_Adv             ) = $RS_RWP_WR2             ! Parent result element
result.type (                       $RS_RWP_WR2_1_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WR2_1_Adv             ) = 'Contact 1 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WR2_1_Adv             ) = $RWP_WR2                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR2_1_Adv             ) = 1.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR2_2_Adv             ) = $RS_RWP_WR2             ! Parent result element
result.type (                       $RS_RWP_WR2_2_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WR2_2_Adv             ) = 'Contact 2 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WR2_2_Adv             ) = $RWP_WR2                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR2_2_Adv             ) = 2.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR2_3_Adv             ) = $RS_RWP_WR2             ! Parent result element
result.type (                       $RS_RWP_WR2_3_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WR2_3_Adv             ) = 'Contact 3 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WR2_3_Adv             ) = $RWP_WR2                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR2_3_Adv             ) = 3.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR2_4_Adv             ) = $RS_RWP_WR2             ! Parent result element
result.type (                       $RS_RWP_WR2_4_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WR2_4_Adv             ) = 'Contact 4 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WR2_4_Adv             ) = $RWP_WR2                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR2_4_Adv             ) = 4.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR2_5_Adv             ) = $RS_RWP_WR2             ! Parent result element
result.type (                       $RS_RWP_WR2_5_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WR2_5_Adv             ) = 'Contact 5 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WR2_5_Adv             ) = $RWP_WR2                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR2_5_Adv             ) = 5.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL2                   ) = null                    ! Parent result element
result.type (                       $RS_RWP_WL2                   ) = -1                      ! Type
result.desc (             1 ,       $RS_RWP_WL2                   ) = '$RWP_WL2'              ! Description

result.container (                  $RS_RWP_WL2_Pair              ) = $RS_RWP_WL2             ! Parent result element
result.type (                       $RS_RWP_WL2_Pair              ) = 78                      ! Type
result.desc (             1 ,       $RS_RWP_WL2_Pair              ) = 'Pair'                  ! Description
result.par (              1 ,       $RS_RWP_WL2_Pair              ) = $RWP_WL2                ! [-] Rail-Wheel Pair

result.container (                  $RS_RWP_WL2_1                 ) = $RS_RWP_WL2             ! Parent result element
result.type (                       $RS_RWP_WL2_1                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WL2_1                 ) = 'Contact 1 '            ! Description
result.par (              1 ,       $RS_RWP_WL2_1                 ) = $RWP_WL2                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL2_1                 ) = 1.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL2_2                 ) = $RS_RWP_WL2             ! Parent result element
result.type (                       $RS_RWP_WL2_2                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WL2_2                 ) = 'Contact 2 '            ! Description
result.par (              1 ,       $RS_RWP_WL2_2                 ) = $RWP_WL2                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL2_2                 ) = 2.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL2_3                 ) = $RS_RWP_WL2             ! Parent result element
result.type (                       $RS_RWP_WL2_3                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WL2_3                 ) = 'Contact 3 '            ! Description
result.par (              1 ,       $RS_RWP_WL2_3                 ) = $RWP_WL2                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL2_3                 ) = 3.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL2_4                 ) = $RS_RWP_WL2             ! Parent result element
result.type (                       $RS_RWP_WL2_4                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WL2_4                 ) = 'Contact 4 '            ! Description
result.par (              1 ,       $RS_RWP_WL2_4                 ) = $RWP_WL2                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL2_4                 ) = 4.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL2_5                 ) = $RS_RWP_WL2             ! Parent result element
result.type (                       $RS_RWP_WL2_5                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WL2_5                 ) = 'Contact 5 '            ! Description
result.par (              1 ,       $RS_RWP_WL2_5                 ) = $RWP_WL2                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL2_5                 ) = 5.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL2_1_Adv             ) = $RS_RWP_WL2             ! Parent result element
result.type (                       $RS_RWP_WL2_1_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WL2_1_Adv             ) = 'Contact 1 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WL2_1_Adv             ) = $RWP_WL2                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL2_1_Adv             ) = 1.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL2_2_Adv             ) = $RS_RWP_WL2             ! Parent result element
result.type (                       $RS_RWP_WL2_2_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WL2_2_Adv             ) = 'Contact 2 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WL2_2_Adv             ) = $RWP_WL2                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL2_2_Adv             ) = 2.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL2_3_Adv             ) = $RS_RWP_WL2             ! Parent result element
result.type (                       $RS_RWP_WL2_3_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WL2_3_Adv             ) = 'Contact 3 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WL2_3_Adv             ) = $RWP_WL2                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL2_3_Adv             ) = 3.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL2_4_Adv             ) = $RS_RWP_WL2             ! Parent result element
result.type (                       $RS_RWP_WL2_4_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WL2_4_Adv             ) = 'Contact 4 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WL2_4_Adv             ) = $RWP_WL2                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL2_4_Adv             ) = 4.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL2_5_Adv             ) = $RS_RWP_WL2             ! Parent result element
result.type (                       $RS_RWP_WL2_5_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WL2_5_Adv             ) = 'Contact 5 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WL2_5_Adv             ) = $RWP_WL2                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL2_5_Adv             ) = 5.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR3                   ) = null                    ! Parent result element
result.type (                       $RS_RWP_WR3                   ) = -1                      ! Type
result.desc (             1 ,       $RS_RWP_WR3                   ) = '$RWP_WR3'              ! Description

result.container (                  $RS_RWP_WR3_Pair              ) = $RS_RWP_WR3             ! Parent result element
result.type (                       $RS_RWP_WR3_Pair              ) = 78                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_Pair              ) = 'Pair'                  ! Description
result.par (              1 ,       $RS_RWP_WR3_Pair              ) = $RWP_WR3                ! [-] Rail-Wheel Pair

result.container (                  $RS_RWP_WR3_1                 ) = $RS_RWP_WR3             ! Parent result element
result.type (                       $RS_RWP_WR3_1                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_1                 ) = 'Contact 1 '            ! Description
result.par (              1 ,       $RS_RWP_WR3_1                 ) = $RWP_WR3                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR3_1                 ) = 1.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR3_2                 ) = $RS_RWP_WR3             ! Parent result element
result.type (                       $RS_RWP_WR3_2                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_2                 ) = 'Contact 2 '            ! Description
result.par (              1 ,       $RS_RWP_WR3_2                 ) = $RWP_WR3                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR3_2                 ) = 2.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR3_3                 ) = $RS_RWP_WR3             ! Parent result element
result.type (                       $RS_RWP_WR3_3                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_3                 ) = 'Contact 3 '            ! Description
result.par (              1 ,       $RS_RWP_WR3_3                 ) = $RWP_WR3                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR3_3                 ) = 3.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR3_4                 ) = $RS_RWP_WR3             ! Parent result element
result.type (                       $RS_RWP_WR3_4                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_4                 ) = 'Contact 4 '            ! Description
result.par (              1 ,       $RS_RWP_WR3_4                 ) = $RWP_WR3                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR3_4                 ) = 4.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR3_5                 ) = $RS_RWP_WR3             ! Parent result element
result.type (                       $RS_RWP_WR3_5                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_5                 ) = 'Contact 5 '            ! Description
result.par (              1 ,       $RS_RWP_WR3_5                 ) = $RWP_WR3                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR3_5                 ) = 5.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR3_1_Adv             ) = $RS_RWP_WR3             ! Parent result element
result.type (                       $RS_RWP_WR3_1_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_1_Adv             ) = 'Contact 1 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WR3_1_Adv             ) = $RWP_WR3                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR3_1_Adv             ) = 1.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR3_2_Adv             ) = $RS_RWP_WR3             ! Parent result element
result.type (                       $RS_RWP_WR3_2_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_2_Adv             ) = 'Contact 2 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WR3_2_Adv             ) = $RWP_WR3                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR3_2_Adv             ) = 2.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR3_3_Adv             ) = $RS_RWP_WR3             ! Parent result element
result.type (                       $RS_RWP_WR3_3_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_3_Adv             ) = 'Contact 3 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WR3_3_Adv             ) = $RWP_WR3                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR3_3_Adv             ) = 3.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR3_4_Adv             ) = $RS_RWP_WR3             ! Parent result element
result.type (                       $RS_RWP_WR3_4_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_4_Adv             ) = 'Contact 4 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WR3_4_Adv             ) = $RWP_WR3                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR3_4_Adv             ) = 4.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR3_5_Adv             ) = $RS_RWP_WR3             ! Parent result element
result.type (                       $RS_RWP_WR3_5_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_5_Adv             ) = 'Contact 5 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WR3_5_Adv             ) = $RWP_WR3                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR3_5_Adv             ) = 5.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL3                   ) = null                    ! Parent result element
result.type (                       $RS_RWP_WL3                   ) = -1                      ! Type
result.desc (             1 ,       $RS_RWP_WL3                   ) = '$RWP_WL3'              ! Description

result.container (                  $RS_RWP_WL3_Pair              ) = $RS_RWP_WL3             ! Parent result element
result.type (                       $RS_RWP_WL3_Pair              ) = 78                      ! Type
result.desc (             1 ,       $RS_RWP_WL3_Pair              ) = 'Pair'                  ! Description
result.par (              1 ,       $RS_RWP_WL3_Pair              ) = $RWP_WL3                ! [-] Rail-Wheel Pair

result.container (                  $RS_RWP_WL3_1                 ) = $RS_RWP_WL3             ! Parent result element
result.type (                       $RS_RWP_WL3_1                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WL3_1                 ) = 'Contact 1 '            ! Description
result.par (              1 ,       $RS_RWP_WL3_1                 ) = $RWP_WL3                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL3_1                 ) = 1.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL3_2                 ) = $RS_RWP_WL3             ! Parent result element
result.type (                       $RS_RWP_WL3_2                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WL3_2                 ) = 'Contact 2 '            ! Description
result.par (              1 ,       $RS_RWP_WL3_2                 ) = $RWP_WL3                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL3_2                 ) = 2.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL3_3                 ) = $RS_RWP_WL3             ! Parent result element
result.type (                       $RS_RWP_WL3_3                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WL3_3                 ) = 'Contact 3 '            ! Description
result.par (              1 ,       $RS_RWP_WL3_3                 ) = $RWP_WL3                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL3_3                 ) = 3.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL3_4                 ) = $RS_RWP_WL3             ! Parent result element
result.type (                       $RS_RWP_WL3_4                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WL3_4                 ) = 'Contact 4 '            ! Description
result.par (              1 ,       $RS_RWP_WL3_4                 ) = $RWP_WL3                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL3_4                 ) = 4.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL3_5                 ) = $RS_RWP_WL3             ! Parent result element
result.type (                       $RS_RWP_WL3_5                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WL3_5                 ) = 'Contact 5 '            ! Description
result.par (              1 ,       $RS_RWP_WL3_5                 ) = $RWP_WL3                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL3_5                 ) = 5.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL3_1_Adv             ) = $RS_RWP_WL3             ! Parent result element
result.type (                       $RS_RWP_WL3_1_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WL3_1_Adv             ) = 'Contact 1 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WL3_1_Adv             ) = $RWP_WL3                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL3_1_Adv             ) = 1.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL3_2_Adv             ) = $RS_RWP_WL3             ! Parent result element
result.type (                       $RS_RWP_WL3_2_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WL3_2_Adv             ) = 'Contact 2 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WL3_2_Adv             ) = $RWP_WL3                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL3_2_Adv             ) = 2.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL3_3_Adv             ) = $RS_RWP_WL3             ! Parent result element
result.type (                       $RS_RWP_WL3_3_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WL3_3_Adv             ) = 'Contact 3 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WL3_3_Adv             ) = $RWP_WL3                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL3_3_Adv             ) = 3.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL3_4_Adv             ) = $RS_RWP_WL3             ! Parent result element
result.type (                       $RS_RWP_WL3_4_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WL3_4_Adv             ) = 'Contact 4 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WL3_4_Adv             ) = $RWP_WL3                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL3_4_Adv             ) = 4.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL3_5_Adv             ) = $RS_RWP_WL3             ! Parent result element
result.type (                       $RS_RWP_WL3_5_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WL3_5_Adv             ) = 'Contact 5 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WL3_5_Adv             ) = $RWP_WL3                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL3_5_Adv             ) = 5.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR3_Copy_1            ) = null                    ! Parent result element
result.type (                       $RS_RWP_WR3_Copy_1            ) = -1                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_Copy_1            ) = '$RWP_WR3_Copy_1'       ! Description

result.container (                  $RS_RWP_WR3_Copy_1_Pair       ) = $RS_RWP_WR3_Copy_1      ! Parent result element
result.type (                       $RS_RWP_WR3_Copy_1_Pair       ) = 78                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_Copy_1_Pair       ) = 'Pair'                  ! Description
result.par (              1 ,       $RS_RWP_WR3_Copy_1_Pair       ) = $RWP_WR4                ! [-] Rail-Wheel Pair

result.container (                  $RS_RWP_WR3_Copy_1_1          ) = $RS_RWP_WR3_Copy_1      ! Parent result element
result.type (                       $RS_RWP_WR3_Copy_1_1          ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_Copy_1_1          ) = 'Contact 1 '            ! Description
result.par (              1 ,       $RS_RWP_WR3_Copy_1_1          ) = $RWP_WR4                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR3_Copy_1_1          ) = 1.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR3_Copy_1_2          ) = $RS_RWP_WR3_Copy_1      ! Parent result element
result.type (                       $RS_RWP_WR3_Copy_1_2          ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_Copy_1_2          ) = 'Contact 2 '            ! Description
result.par (              1 ,       $RS_RWP_WR3_Copy_1_2          ) = $RWP_WR4                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR3_Copy_1_2          ) = 2.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR3_Copy_1_3          ) = $RS_RWP_WR3_Copy_1      ! Parent result element
result.type (                       $RS_RWP_WR3_Copy_1_3          ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_Copy_1_3          ) = 'Contact 3 '            ! Description
result.par (              1 ,       $RS_RWP_WR3_Copy_1_3          ) = $RWP_WR4                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR3_Copy_1_3          ) = 3.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR3_Copy_1_4          ) = $RS_RWP_WR3_Copy_1      ! Parent result element
result.type (                       $RS_RWP_WR3_Copy_1_4          ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_Copy_1_4          ) = 'Contact 4 '            ! Description
result.par (              1 ,       $RS_RWP_WR3_Copy_1_4          ) = $RWP_WR4                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR3_Copy_1_4          ) = 4.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR3_Copy_1_5          ) = $RS_RWP_WR3_Copy_1      ! Parent result element
result.type (                       $RS_RWP_WR3_Copy_1_5          ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_Copy_1_5          ) = 'Contact 5 '            ! Description
result.par (              1 ,       $RS_RWP_WR3_Copy_1_5          ) = $RWP_WR4                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR3_Copy_1_5          ) = 5.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR3_Copy_1_1_Adv      ) = $RS_RWP_WR3_Copy_1      ! Parent result element
result.type (                       $RS_RWP_WR3_Copy_1_1_Adv      ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_Copy_1_1_Adv      ) = 'Contact 1 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WR3_Copy_1_1_Adv      ) = $RWP_WR4                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR3_Copy_1_1_Adv      ) = 1.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR3_Copy_1_2_Adv      ) = $RS_RWP_WR3_Copy_1      ! Parent result element
result.type (                       $RS_RWP_WR3_Copy_1_2_Adv      ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_Copy_1_2_Adv      ) = 'Contact 2 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WR3_Copy_1_2_Adv      ) = $RWP_WR4                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR3_Copy_1_2_Adv      ) = 2.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR3_Copy_1_3_Adv      ) = $RS_RWP_WR3_Copy_1      ! Parent result element
result.type (                       $RS_RWP_WR3_Copy_1_3_Adv      ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_Copy_1_3_Adv      ) = 'Contact 3 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WR3_Copy_1_3_Adv      ) = $RWP_WR4                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR3_Copy_1_3_Adv      ) = 3.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR3_Copy_1_4_Adv      ) = $RS_RWP_WR3_Copy_1      ! Parent result element
result.type (                       $RS_RWP_WR3_Copy_1_4_Adv      ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_Copy_1_4_Adv      ) = 'Contact 4 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WR3_Copy_1_4_Adv      ) = $RWP_WR4                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR3_Copy_1_4_Adv      ) = 4.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WR3_Copy_1_5_Adv      ) = $RS_RWP_WR3_Copy_1      ! Parent result element
result.type (                       $RS_RWP_WR3_Copy_1_5_Adv      ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WR3_Copy_1_5_Adv      ) = 'Contact 5 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WR3_Copy_1_5_Adv      ) = $RWP_WR4                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WR3_Copy_1_5_Adv      ) = 5.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL4                   ) = null                    ! Parent result element
result.type (                       $RS_RWP_WL4                   ) = -1                      ! Type
result.desc (             1 ,       $RS_RWP_WL4                   ) = '$RWP_WL4'              ! Description

result.container (                  $RS_RWP_WL4_Pair              ) = $RS_RWP_WL4             ! Parent result element
result.type (                       $RS_RWP_WL4_Pair              ) = 78                      ! Type
result.desc (             1 ,       $RS_RWP_WL4_Pair              ) = 'Pair'                  ! Description
result.par (              1 ,       $RS_RWP_WL4_Pair              ) = $RWP_WL4                ! [-] Rail-Wheel Pair

result.container (                  $RS_RWP_WL4_1                 ) = $RS_RWP_WL4             ! Parent result element
result.type (                       $RS_RWP_WL4_1                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WL4_1                 ) = 'Contact 1 '            ! Description
result.par (              1 ,       $RS_RWP_WL4_1                 ) = $RWP_WL4                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL4_1                 ) = 1.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL4_2                 ) = $RS_RWP_WL4             ! Parent result element
result.type (                       $RS_RWP_WL4_2                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WL4_2                 ) = 'Contact 2 '            ! Description
result.par (              1 ,       $RS_RWP_WL4_2                 ) = $RWP_WL4                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL4_2                 ) = 2.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL4_3                 ) = $RS_RWP_WL4             ! Parent result element
result.type (                       $RS_RWP_WL4_3                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WL4_3                 ) = 'Contact 3 '            ! Description
result.par (              1 ,       $RS_RWP_WL4_3                 ) = $RWP_WL4                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL4_3                 ) = 3.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL4_4                 ) = $RS_RWP_WL4             ! Parent result element
result.type (                       $RS_RWP_WL4_4                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WL4_4                 ) = 'Contact 4 '            ! Description
result.par (              1 ,       $RS_RWP_WL4_4                 ) = $RWP_WL4                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL4_4                 ) = 4.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL4_5                 ) = $RS_RWP_WL4             ! Parent result element
result.type (                       $RS_RWP_WL4_5                 ) = 79                      ! Type
result.desc (             1 ,       $RS_RWP_WL4_5                 ) = 'Contact 5 '            ! Description
result.par (              1 ,       $RS_RWP_WL4_5                 ) = $RWP_WL4                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL4_5                 ) = 5.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL4_1_Adv             ) = $RS_RWP_WL4             ! Parent result element
result.type (                       $RS_RWP_WL4_1_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WL4_1_Adv             ) = 'Contact 1 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WL4_1_Adv             ) = $RWP_WL4                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL4_1_Adv             ) = 1.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL4_2_Adv             ) = $RS_RWP_WL4             ! Parent result element
result.type (                       $RS_RWP_WL4_2_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WL4_2_Adv             ) = 'Contact 2 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WL4_2_Adv             ) = $RWP_WL4                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL4_2_Adv             ) = 2.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL4_3_Adv             ) = $RS_RWP_WL4             ! Parent result element
result.type (                       $RS_RWP_WL4_3_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WL4_3_Adv             ) = 'Contact 3 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WL4_3_Adv             ) = $RWP_WL4                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL4_3_Adv             ) = 3.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL4_4_Adv             ) = $RS_RWP_WL4             ! Parent result element
result.type (                       $RS_RWP_WL4_4_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WL4_4_Adv             ) = 'Contact 4 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WL4_4_Adv             ) = $RWP_WL4                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL4_4_Adv             ) = 4.0000000000000000E+00  ! [-] Contact patch number

result.container (                  $RS_RWP_WL4_5_Adv             ) = $RS_RWP_WL4             ! Parent result element
result.type (                       $RS_RWP_WL4_5_Adv             ) = 80                      ! Type
result.desc (             1 ,       $RS_RWP_WL4_5_Adv             ) = 'Contact 5 Adv'         ! Description
result.par (              1 ,       $RS_RWP_WL4_5_Adv             ) = $RWP_WL4                ! [-] Rail-Wheel Pair
result.par (              4 ,       $RS_RWP_WL4_5_Adv             ) = 5.0000000000000000E+00  ! [-] Contact patch number

                                                                                                                                                                    
